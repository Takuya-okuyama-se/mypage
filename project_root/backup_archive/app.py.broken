#!/usr/local/bin/python
# -*- coding: utf-8 -*-

# 蝓ｺ譛ｬ逧・↑繧､繝ｳ繝昴・繝・import os
import sys
import traceback
from datetime import datetime, timedelta
import json
import logging
from logging.handlers import RotatingFileHandler
import random
import time

# Flask縺ｨ繝・・繧ｿ繝吶・繧ｹ髢｢騾｣縺ｮ繧､繝ｳ繝昴・繝・from flask import Flask, redirect, request, session, render_template, jsonify, url_for
import pymysql
from pymysql.cursors import DictCursor
import requests

# 繝ｭ繧ｮ繝ｳ繧ｰ險ｭ螳・log_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'logs')
if not os.path.exists(log_dir):
    try:
        os.makedirs(log_dir)
    except Exception as e:
        pass  # 繝ｭ繧ｰ繝・ぅ繝ｬ繧ｯ繝医Μ縺御ｽ懈・縺ｧ縺阪↑縺・ｴ蜷医・繧ｹ繧ｭ繝・・

# Flask繧｢繝励Μ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ險ｭ螳・template_folder = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'templates')
app = Flask(__name__, template_folder=template_folder)
app.secret_key = 'test_key'  # 繝・せ繝育畑縺ｮ繧ｷ繝ｼ繧ｯ繝ｬ繝・ヨ繧ｭ繝ｼ

# app.py 縺ｾ縺溘・繝｡繧､繝ｳ繝ｫ繝ｼ繝・ぅ繝ｳ繧ｰ繝輔ぃ繧､繝ｫ縺ｫ莉･荳九ｒ霑ｽ蜉
try:
    from improvement_notifications import improvement_notifications
    app.register_blueprint(improvement_notifications)
except ImportError:
    # 繝｢繧ｸ繝･繝ｼ繝ｫ縺後↑縺・ｴ蜷医・繧ｹ繧ｭ繝・・
    pass

# 繝ｭ繧ｬ繝ｼ縺ｮ險ｭ螳・try:
    handler = RotatingFileHandler(
        os.path.join(log_dir, 'app.log'),
        maxBytes=1024 * 1024,  # 1MB
        backupCount=3
    )
    handler.setFormatter(logging.Formatter(
        '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'
    ))
    app.logger.addHandler(handler)    app.logger.setLevel(logging.INFO)
    app.logger.info('繧｢繝励Μ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ襍ｷ蜍・')
except Exception as e:
    # 繝ｭ繧ｮ繝ｳ繧ｰ險ｭ螳壹↓螟ｱ謨励＠縺溷ｴ蜷医ｂ邯夊｡・    pass

# MySQL 謗･邯夊ｨｭ螳・app.config.update(
    MYSQL_HOST='mysql3103.db.sakura.ne.jp',
    MYSQL_USER='seishinn',
    MYSQL_PASSWORD='Yakyuubu8',
    MYSQL_DB='seishinn_test',
    MYSQL_PORT=3306,
)

# Google Calendar API 縺ｮ險ｭ螳・app.config.update(
    GOOGLE_CALENDAR_API_KEY='AIzaSyDtVSN3bin_JorxBjC3K88ofmR8vL88n6I',
    GOOGLE_CALENDAR_ID='seishinn.juku@gmail.com'
)

# 繝昴う繝ｳ繝育ｮ｡逅・Θ繝ｼ繝・ぅ繝ｪ繝・ぅ繧偵う繝ｳ繝昴・繝・current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)
try:
    from points_utils import (
        get_user_total_points, award_points, consume_points, get_point_history,
        cancel_point_history, process_login_and_award_points, update_login_streak,
        check_and_award_streak_bonus, calculate_monthly_attendance_rate,
        check_and_award_attendance_bonus, check_and_award_birthday_bonus,
        check_grade_improvement_bonus, get_crane_game_prizes,
        redeem_crane_game_prize, update_user_birthday, teacher_award_points
    )
except ImportError:
    # 繝｢繧ｸ繝･繝ｼ繝ｫ縺後↑縺・ｴ蜷医・繝繝溘・髢｢謨ｰ繧貞ｮ夂ｾｩ
    def get_user_total_points(conn, user_id): return 0
    def award_points(*args, **kwargs): return (True, 0)
    def consume_points(*args, **kwargs): return (True, 0)
    def get_point_history(*args, **kwargs): return []
    def cancel_point_history(*args, **kwargs): return (True, "")
    def process_login_and_award_points(*args, **kwargs): return (False, 0)
    def update_login_streak(*args, **kwargs): return True
    def check_and_award_streak_bonus(*args, **kwargs): return (False, 0)
    def calculate_monthly_attendance_rate(*args, **kwargs): return 0
    def check_and_award_attendance_bonus(*args, **kwargs): return (False, 0)
    def check_and_award_birthday_bonus(*args, **kwargs): return (False, 0)
    def check_grade_improvement_bonus(*args, **kwargs): return (False, 0)
    def get_crane_game_prizes(*args, **kwargs): return []
    def redeem_crane_game_prize(*args, **kwargs): return (False, "")
    def update_user_birthday(*args, **kwargs): return (True, "")
    def teacher_award_points(*args, **kwargs): return (True, "")

# 讓｡隧ｦ邂｡逅・Θ繝ｼ繝・ぅ繝ｪ繝・ぅ繧偵う繝ｳ繝昴・繝・try:
    from mock_exam_utils import (
        save_mock_exam_score, get_mock_exam_scores, delete_mock_exam_score
    )
except ImportError:
    # 繝｢繧ｸ繝･繝ｼ繝ｫ縺後↑縺・ｴ蜷医・繝繝溘・髢｢謨ｰ繧貞ｮ夂ｾｩ
    def save_mock_exam_score(*args, **kwargs): return (False, "")
    def get_mock_exam_scores(*args, **kwargs): return (False, "")
    def delete_mock_exam_score(*args, **kwargs): return (False, "")

# 謌千ｸｾ繝ｻ蜀・筏轤ｹ蜷台ｸ企夂衍邂｡逅・Θ繝ｼ繝・ぅ繝ｪ繝・ぅ繧偵う繝ｳ繝昴・繝・try:
    from improvement_notification_manager import (
        get_all_improvement_notifications, get_notification_counts, process_notification, ensure_notification_tables
    )
except ImportError:
    # 繝｢繧ｸ繝･繝ｼ繝ｫ縺後↑縺・ｴ蜷医・繝繝溘・髢｢謨ｰ繧貞ｮ夂ｾｩ
    def get_all_improvement_notifications(*args, **kwargs): return []
    def get_notification_counts(*args, **kwargs): return {'elementary_count': 0, 'middle_count': 0, 'high_count': 0, 'internal_count': 0, 'total_count': 0}
    def process_notification(*args, **kwargs): return (False, "")
    def ensure_notification_tables(*args, **kwargs): pass

# HOPE ROOM髢｢騾｣繝ｦ繝ｼ繝・ぅ繝ｪ繝・ぅ繧偵う繝ｳ繝昴・繝・current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)  # 迴ｾ蝨ｨ縺ｮ繝・ぅ繝ｬ繧ｯ繝医Μ繧単ython繝代せ縺ｫ霑ｽ蜉
try:
    from hope_room_utils import get_hope_room_credentials, save_hope_room_credentials, ensure_external_service_credentials_table
except ImportError:
    # 繝｢繧ｸ繝･繝ｼ繝ｫ縺後↑縺・ｴ蜷医・繝繝溘・髢｢謨ｰ繧貞ｮ夂ｾｩ
    def get_hope_room_credentials(*args, **kwargs): return {'login_id': '', 'password': ''}
    def save_hope_room_credentials(*args, **kwargs): return False
    def ensure_external_service_credentials_table(*args, **kwargs): return False

# Global variables
_is_initialized = False

# 繝・・繧ｿ繝吶・繧ｹ謗･邯夐未謨ｰ
def get_db_connection():
    """繝・・繧ｿ繝吶・繧ｹ謗･邯壹ｒ蜿門ｾ励☆繧矩未謨ｰ"""
    return pymysql.connect(
        host=app.config['MYSQL_HOST'],
        user=app.config['MYSQL_USER'],
        password=app.config['MYSQL_PASSWORD'],
        database=app.config['MYSQL_DB'],
        port=app.config['MYSQL_PORT'],
        charset='utf8mb4',
        cursorclass=DictCursor,
        autocommit=True
    )

# 繧ｨ繝ｩ繝ｼ繝ｭ繧ｰ蜃ｺ蜉幃未謨ｰ
def log_error(message):
    """繧ｨ繝ｩ繝ｼ繝｡繝・そ繝ｼ繧ｸ繧偵Ο繧ｰ縺ｫ蜃ｺ蜉帙☆繧矩未謨ｰ"""
    try:
        app.logger.error(message)
    except:
        # 繝ｭ繧ｮ繝ｳ繧ｰ縺ｫ螟ｱ謨励＠縺ｦ繧らｶ夊｡・        pass
    
    # stderr 縺ｫ繧ょ・蜉・    print(message, file=sys.stderr)

# Google Calendar縺九ｉ繧､繝吶Φ繝医ｒ蜿門ｾ励☆繧矩未謨ｰ
def get_google_calendar_events():
    """Google Calendar縺九ｉ繧､繝吶Φ繝医ｒ蜿門ｾ励☆繧矩未謨ｰ"""
    try:
        api_key = app.config['GOOGLE_CALENDAR_API_KEY']
        calendar_id = app.config['GOOGLE_CALENDAR_ID']
        
        if not api_key or not calendar_id:
            log_error("API Key or Calendar ID is not set")
            return None
        
        # Google Calendar API縺ｮURL
        # calendar_id縺ｯURL繧ｨ繝ｳ繧ｳ繝ｼ繝峨☆繧句ｿ・ｦ√′縺ゅｋ
        from urllib.parse import quote_plus
        calendar_id_encoded = quote_plus(calendar_id)
        url = f"https://www.googleapis.com/calendar/v3/calendars/{calendar_id_encoded}/events"
        
        # 迴ｾ蝨ｨ譎ょ綾繧貞叙蠕励＠縲・←蛻・↑繝輔か繝ｼ繝槭ャ繝医↓螟画鋤
        now = datetime.now().isoformat() + "Z"  # RFC3339蠖｢蠑・        
        # 3縺区怦蜈医∪縺ｧ縺ｮ繧､繝吶Φ繝医ｒ蜿門ｾ・        time_max = (datetime.now() + timedelta(days=90)).isoformat() + "Z"
        
        # API繝ｪ繧ｯ繧ｨ繧ｹ繝医・繝代Λ繝｡繝ｼ繧ｿ
        params = {
            'key': api_key,
            'timeMin': now,
            'timeMax': time_max,
            'maxResults': 100,  # 繧医ｊ螟壹￥縺ｮ繧､繝吶Φ繝医ｒ蜿門ｾ・            'singleEvents': 'true',
            'orderBy': 'startTime'
        }
        
        # API繝ｪ繧ｯ繧ｨ繧ｹ繝医ｒ騾∽ｿ｡
        response = requests.get(url, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            events = []
            
            for item in data.get('items', []):                event = {
                    'id': item.get('id', ''),
                    'title': item.get('summary', '辟｡鬘後・繧､繝吶Φ繝・'),
                }
                
                # 髢句ｧ区律譎ゅｒ蜿門ｾ・                start = item.get('start', {})
                if 'dateTime' in start:
                    event['start'] = start['dateTime']
                elif 'date' in start:
                    event['start'] = start['date']
                
                # 邨ゆｺ・律譎ゅｒ蜿門ｾ・                end = item.get('end', {})
                if 'dateTime' in end:
                    event['end'] = end['dateTime']
                elif 'date' in end:
                    event['end'] = end['date']
                
                # 邨よ律繧､繝吶Φ繝医°縺ｩ縺・°
                if 'date' in start and 'date' in end:
                    event['allDay'] = True
                
                # 蝣ｴ謇縺瑚ｨｭ螳壹＆繧後※縺・ｌ縺ｰ霑ｽ蜉
                if 'location' in item:
                    event['location'] = item['location']
                
                # 隱ｬ譏弱′險ｭ螳壹＆繧後※縺・ｌ縺ｰ霑ｽ蜉
                if 'description' in item:
                    event['description'] = item['description']
                
                # 繧､繝吶Φ繝医・濶ｲ蛻・￠・医き繝ｩ繝ｼID縺後≠繧後・・・                colorId = item.get('colorId')
                if colorId:
                    colors = {
                        '1': '#7986cb',  # 繝ｩ繝吶Φ繝繝ｼ
                        '2': '#33b679',  # 繧ｻ繝ｼ繧ｸ
                        '3': '#8e24aa',  # 繝悶ラ繧ｦ
                        '4': '#e67c73',  # 繝輔Λ繝溘Φ繧ｴ
                        '5': '#f6c026',  # 繝舌リ繝・                        '6': '#f5511d',  # 繝槭Φ繝繝ｪ繝ｳ
                        '7': '#039be5',  # 繝斐・繧ｳ繝・け
                        '8': '#616161',  # 繧ｰ繝ｩ繝輔ぃ繧､繝・                        '9': '#3f51b5',  # 繝悶Ν繝ｼ繝吶Μ繝ｼ                        '10': '#0b8043', # 繝舌ず繝ｫ
                        '11': '#d60000'  # 繝医・繝・
                    }
                    if colorId in colors:
                        event['backgroundColor'] = colors[colorId]
                        event['borderColor'] = colors[colorId]
                
                events.append(event)
            
            return events
        else:
            log_error(f"Google Calendar API Error: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        log_error(f"Google Calendar API Exception: {e}")
        return None

# 繝・・繝悶Ν菴懈・遒ｺ隱埼未謨ｰ繧偵∪縺ｨ繧√ｋ
def create_subjects_table(conn):
    """subjects 繝・・繝悶Ν繧剃ｽ懈・縺吶ｋ"""
    try:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS subjects (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(50) NOT NULL,
                    is_main TINYINT(1) NOT NULL DEFAULT 0,
                    display_order INT NOT NULL DEFAULT 0,
                    is_active TINYINT(1) NOT NULL DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # 蝓ｺ譛ｬ繝・・繧ｿ縺ｮ謖ｿ蜈･遒ｺ隱・            cur.execute("SELECT COUNT(*) as count FROM subjects")
            count = cur.fetchone()
            
            if count and count['count'] == 0:
                # 蝓ｺ譛ｬ繝・・繧ｿ縺ｮ謖ｿ蜈･
                cur.execute("""
                    INSERT INTO subjects (id, name, is_main, display_order) VALUES 
                    (1, '蝗ｽ隱・, 1, 1),
                    (2, '謨ｰ蟄ｦ', 1, 2),
                    (3, '闍ｱ隱・, 1, 3),
                    (4, '逅・ｧ・, 1, 4),
                    (5, '遉ｾ莨・, 1, 5),
                    (6, '髻ｳ讌ｽ', 0, 6),
                    (7, '鄒手｡・, 0, 7),
                    (8, '菴楢ご', 0, 8),
                    (9, '謚螳ｶ', 0, 9)
                """)
            
            log_error("subjects 繝・・繝悶Ν繧堤｢ｺ隱・菴懈・縺励∪縺励◆")
            conn.commit()
    except Exception as e:
        log_error(f"Error creating subjects table: {e}")
        conn.rollback()

def create_internal_points_table(conn):
    """internal_points 繝・・繝悶Ν繧剃ｽ懈・縺吶ｋ"""
    try:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS internal_points (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    student_id INT NOT NULL,
                    grade_year INT NOT NULL,
                    subject INT NOT NULL,
                    term INT NOT NULL,
                    point INT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    UNIQUE KEY(student_id, grade_year, subject, term),
                    INDEX(student_id, grade_year)
                )
            """)
            log_error("internal_points 繝・・繝悶Ν繧堤｢ｺ隱・菴懈・縺励∪縺励◆")
            conn.commit()
    except Exception as e:
        log_error(f"Error creating internal_points table: {e}")
        conn.rollback()

def create_class_schedule_master_table(conn):
    """蟄ｦ蟷ｴ蛻･譖懈律險ｭ螳壹ユ繝ｼ繝悶Ν繧剃ｽ懈・縺吶ｋ"""
    try:
        with conn.cursor() as cur:
            # 繝・・繝悶Ν菴懈・
            cur.execute("""
                CREATE TABLE IF NOT EXISTS class_schedule_master (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    grade_level INT NOT NULL,
                    school_type VARCHAR(20) NOT NULL,
                    day_of_week INT NOT NULL, 
                    is_active TINYINT(1) NOT NULL DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    UNIQUE KEY(grade_level, school_type, day_of_week)
                )
            """)
            app.logger.info("class_schedule_master繝・・繝悶Ν繧剃ｽ懈・縺励∪縺励◆")
            conn.commit()
    except Exception as e:
        app.logger.error(f"Error creating class_schedule_master table: {e}")
        conn.rollback()

def add_attendance_day_column_to_users(conn):
    """users繝・・繝悶Ν縺ｫ attendance_days 蛻励ｒ霑ｽ蜉"""
    try:
        with conn.cursor() as cur:
            # 繧ｫ繝ｩ繝縺悟ｭ伜惠縺吶ｋ縺狗｢ｺ隱・            cur.execute("SHOW COLUMNS FROM users LIKE 'attendance_days'")
            if not cur.fetchone():
                # 繧ｫ繝ｩ繝繧定ｿｽ蜉
                cur.execute("""
                    ALTER TABLE users
                    ADD COLUMN attendance_days VARCHAR(20) NULL
                    COMMENT '蜃ｺ蟶ｭ譖懈律 (0,1,2,3,4,5,6 縺ｮ蠖｢蠑上〒菫晏ｭ倥・=譌･譖・'
                """)
                app.logger.info("users繝・・繝悶Ν縺ｫ attendance_days 繧ｫ繝ｩ繝繧定ｿｽ蜉縺励∪縺励◆")
            
            conn.commit()
    except Exception as e:
        app.logger.error(f"Error adding attendance_days column: {e}")
        conn.rollback()

def ensure_elementary_grades_table(conn):
    """蟆丞ｭｦ逕溽畑謌千ｸｾ繝・・繝悶Ν繧堤｢ｺ隱阪・菴懈・縺吶ｋ"""
    try:
        with conn.cursor() as cur:
            # 繝・・繝悶Ν菴懈・
            cur.execute("""
                CREATE TABLE IF NOT EXISTS elementary_grades (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    student_id INT NOT NULL,
                    grade_year INT NOT NULL,
                    subject INT NOT NULL,
                    month INT NOT NULL,
                    score INT NOT NULL,
                    comment TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    UNIQUE KEY unique_elementary_grade (student_id, grade_year, subject, month)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
            """)
            app.logger.info("elementary_grades 繝・・繝悶Ν繧堤｢ｺ隱・菴懈・縺励∪縺励◆")
            conn.commit()
    except Exception as e:
        app.logger.error(f"Error creating elementary_grades table: {e}")
        conn.rollback()

def ensure_monthly_test_comments_table(conn):
    """繝・せ繝域・邵ｾ縺ｮ繧ｳ繝｡繝ｳ繝育畑繝・・繝悶Ν繧堤｢ｺ隱阪・菴懈・縺吶ｋ"""
    try:
        with conn.cursor() as cur:
            # 繝・・繝悶Ν菴懈・
            cur.execute("""
                CREATE TABLE IF NOT EXISTS monthly_test_comments (
                    id int NOT NULL AUTO_INCREMENT PRIMARY KEY,
                    student_id int NOT NULL,
                    grade_year tinyint NOT NULL,
                    subject tinyint NOT NULL,
                    month tinyint NOT NULL,
                    comment text,
                    created_at timestamp NULL DEFAULT CURRENT_TIMESTAMP,
                    updated_at timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    UNIQUE KEY unique_comment (student_id, grade_year, subject, month)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
            """)
            app.logger.info("monthly_test_comments繝・・繝悶Ν繧堤｢ｺ隱・菴懈・縺励∪縺励◆")
            conn.commit()
    except Exception as e:
        app.logger.error(f"Error creating monthly_test_comments table: {e}")
        conn.rollback()

def ensure_eiken_words_table(conn):
    """闍ｱ讀懷腰隱槭ユ繝ｼ繝悶Ν繧堤｢ｺ隱阪・菴懈・縺吶ｋ・域隼蝟・沿・・""
    try:
        with conn.cursor() as cur:
            # 繝・・繝悶Ν菴懈・
            cur.execute("""
                CREATE TABLE IF NOT EXISTS eiken_words (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    grade VARCHAR(10) NOT NULL COMMENT '闍ｱ讀懊・邏・(5, 4, 3, pre2, 2)',
                    question_id INT NOT NULL COMMENT '蝠城｡栗D',
                    stage_number INT NOT NULL DEFAULT 1 COMMENT '繧ｹ繝・・繧ｸ逡ｪ蜿ｷ',
                    word VARCHAR(255) NOT NULL COMMENT '闍ｱ蜊倩ｪ・,
                    pronunciation VARCHAR(255) COMMENT '逋ｺ髻ｳ繝ｻ諢丞袖',
                    audio_url VARCHAR(255) COMMENT '髻ｳ螢ｰ繝輔ぃ繧､繝ｫURL',
                    notes TEXT COMMENT '霑ｽ蜉諠・ｱ繝ｻ繝｡繝｢',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    INDEX idx_grade_question (grade, question_id),
                    INDEX idx_grade_stage (grade, stage_number),
                    INDEX idx_word (word(20))
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
            """)
            
            # 繧ｫ繝ｩ繝縺ｮ蟄伜惠遒ｺ隱阪→霑ｽ蜉・域里蟄倥ユ繝ｼ繝悶Ν縺ｸ縺ｮ蠕梧婿莠呈鋤諤ｧ蟇ｾ蠢懶ｼ・            columns_to_check = [
                ('notes', "ALTER TABLE eiken_words ADD COLUMN notes TEXT COMMENT '霑ｽ蜉諠・ｱ繝ｻ繝｡繝｢' AFTER audio_url"),
                ('audio_url', "ALTER TABLE eiken_words ADD COLUMN audio_url VARCHAR(255) COMMENT '髻ｳ螢ｰ繝輔ぃ繧､繝ｫURL' AFTER pronunciation")
        conn.rollback()

def create_event_types_table(conn):
    """point_event_types繝・・繝悶Ν繧剃ｽ懈・縺吶ｋ"""
    try:
        with conn.cursor() as cur:
            # 繝・・繝悶Ν菴懈・
            cur.execute("""
                CREATE TABLE IF NOT EXISTS point_event_types (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(50) NOT NULL UNIQUE,
                    display_name VARCHAR(100) NOT NULL,
                    description TEXT,
                    min_points INT NOT NULL DEFAULT 0,
                    max_points INT NOT NULL DEFAULT 0,
                    teacher_can_award TINYINT(1) NOT NULL DEFAULT 0,
                    is_active TINYINT(1) NOT NULL DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                )
            """)
            log_error("point_event_types繝・・繝悶Ν繧剃ｽ懈・縺励∪縺励◆")
            conn.commit()
    except Exception as e:
        log_error(f"Error creating point_event_types table: {e}")
        conn.rollback()

def insert_default_event_types(conn):
    """繝・ヵ繧ｩ繝ｫ繝医・繧､繝吶Φ繝医ち繧､繝励ｒ謖ｿ蜈･縺吶ｋ"""
    try:
        with conn.cursor() as cur:
            # 繝・ヵ繧ｩ繝ｫ繝医・繧､繝吶Φ繝医ち繧､繝励ｒ謖ｿ蜈･
            event_types = [
                ('login', '繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ', '豈取律縺ｮ繝ｭ繧ｰ繧､繝ｳ縺ｧ繝昴う繝ｳ繝育佐蠕・, 3, 10, 0),
                ('streak_5', '5譌･騾｣邯壹Ο繧ｰ繧､繝ｳ', '5譌･騾｣邯壹Ο繧ｰ繧､繝ｳ縺ｮ繝懊・繝翫せ', 20, 20, 0),
                ('streak_10', '10譌･騾｣邯壹Ο繧ｰ繧､繝ｳ', '10譌･騾｣邯壹Ο繧ｰ繧､繝ｳ縺ｮ繝懊・繝翫せ', 50, 50, 0),
                ('streak_30', '30譌･騾｣邯壹Ο繧ｰ繧､繝ｳ', '30譌･騾｣邯壹Ο繧ｰ繧､繝ｳ縺ｮ繝懊・繝翫せ', 150, 150, 0),
                ('birthday', '隱慕函譌･繝懊・繝翫せ', '縺願ｪ慕函譌･險伜ｿｵ繝懊・繝翫せ', 100, 100, 0),
                ('attendance_90', '譛磯俣90%蜃ｺ蟶ｭ繝懊・繝翫せ', '譛磯俣蜃ｺ蟶ｭ邇・0%莉･荳企＃謌舌・繝ｼ繝翫せ', 50, 50, 0),
                ('attendance_100', '逧・共雉・, '譛磯俣蜃ｺ蟶ｭ邇・00%驕疲・繝懊・繝翫せ', 100, 100, 0),
                ('grade_improvement_small', '謌千ｸｾ蜷台ｸ翫・繝ｼ繝翫せ(蟆・', '蜑榊屓繧医ｊ5轤ｹ莉･荳頑・邵ｾ繧｢繝・・', 20, 20, 0),
                ('grade_improvement_medium', '謌千ｸｾ蜷台ｸ翫・繝ｼ繝翫せ(荳ｭ)', '蜑榊屓繧医ｊ10轤ｹ莉･荳頑・邵ｾ繧｢繝・・', 30, 30, 0),
                ('grade_improvement_large', '謌千ｸｾ蜷台ｸ翫・繝ｼ繝翫せ(螟ｧ)', '蜑榊屓繧医ｊ15轤ｹ莉･荳頑・邵ｾ繧｢繝・・', 50, 50, 0),
                ('homework', '螳ｿ鬘梧署蜃ｺ繝懊・繝翫せ', '螳ｿ鬘梧署蜃ｺ縺斐→縺ｫ迯ｲ蠕・, 10, 10, 1),
                ('exam_result', '隧ｦ鬨鍋ｵ先棡繝懊・繝翫せ', '隧ｦ鬨鍋ｵ先棡縺ｫ蠢懊§縺溘・繝ｼ繝翫せ', 10, 100, 1),
                ('mock_exam', '讓｡隧ｦ繝懊・繝翫せ', '讓｡隧ｦ邨先棡縺ｫ蠢懊§縺溘・繝ｼ繝翫せ', 10, 100, 1),
                ('special_award', '迚ｹ蛻･繝懊・繝翫せ', '迚ｹ蛻･縺ｪ豢ｻ蜍輔ｄ謌先棡縺ｫ蟇ｾ縺吶ｋ繝懊・繝翫せ', 10, 500, 1),
                ('crane_game', '繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝', '繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝縺ｧ縺ｮ譎ｯ蜩∽ｺ､謠・, 0, 0, 0)
            ]
            
            for event_type in event_types:
                # REPLACE INTO繧剃ｽｿ逕ｨ縺励※INSERT縺ｾ縺溘・UPDATE
                cur.execute("""
                    INSERT INTO point_event_types
                    (name, display_name, description, min_points, max_points, teacher_can_award)
                    VALUES (%s, %s, %s, %s, %s, %s)
                    ON DUPLICATE KEY UPDATE
                    display_name = VALUES(display_name),
                    description = VALUES(description),
                    min_points = VALUES(min_points),
                    max_points = VALUES(max_points),
                    teacher_can_award = VALUES(teacher_can_award),
                    is_active = 1
                """, event_type)
            
            log_error("繝・ヵ繧ｩ繝ｫ繝医・繧､繝吶Φ繝医ち繧､繝励ｒ謖ｿ蜈･縺励∪縺励◆")
            conn.commit()
    except Exception as e:
        log_error(f"Error inserting default event types: {e}")
        conn.rollback()

# 蜀・筏轤ｹ蜷郁ｨ郁ｨ育ｮ鈴未謨ｰ
def calculate_current_internal_points(user_id):
    """逕溷ｾ偵・迴ｾ蝨ｨ縺ｮ蜀・筏轤ｹ蜷郁ｨ医ｒ險育ｮ励☆繧具ｼ・蟷ｴ逕・蟄ｦ譛・+ 3蟷ｴ逕・蟄ｦ譛淌・・・ 譛邨ゆｿｮ豁｣迚・""
    conn = get_db_connection()
    result = {
        'total': 0,
        'details': [],
        'second_year_points': [],
        'third_year_points': [],
        'calculation_method': '2蟷ｴ逕・蟄ｦ譛・+ 3蟷ｴ逕・蟄ｦ譛淌・'
    }
    
    try:
        with conn.cursor() as cur:
            # 逕溷ｾ偵・繧ｰ繝ｬ繝ｼ繝峨Ξ繝吶Ν・亥ｭｦ蟷ｴ・峨ｒ蜿門ｾ・            cur.execute("SELECT grade_level FROM users WHERE id = %s", (user_id,))
            user = cur.fetchone()
            grade_level = user['grade_level'] if user else 3  # 繝・ヵ繧ｩ繝ｫ繝医・3蟷ｴ逕・            
            # 2蟷ｴ逕・蟄ｦ譛溘・蜀・筏轤ｹ繧貞叙蠕・            second_year_points = []
            try:
                # 遘醍岼繝・・繝悶Ν縺ｮ蟄伜惠遒ｺ隱・                cur.execute("SHOW TABLES LIKE 'subjects'")
                if not cur.fetchone():
                    # 遘醍岼繝・・繝悶Ν縺後↑縺・ｴ蜷医・菴懈・
                    create_subjects_table(conn)
                
                # 蜀・筏轤ｹ繝・・繝悶Ν縺ｮ蟄伜惠遒ｺ隱・                cur.execute("SHOW TABLES LIKE 'internal_points'")
                if not cur.fetchone():
                    # 蜀・筏轤ｹ繝・・繝悶Ν縺後↑縺・ｴ蜷医・菴懈・
                    create_internal_points_table(conn)
                
                # 2蟷ｴ逕・蟄ｦ譛溘・蜀・筏轤ｹ繧貞叙蠕・                cur.execute("""
                    SELECT s.name as subject_name, ip.point
                    FROM internal_points ip
                    JOIN subjects s ON ip.subject = s.id
                    WHERE ip.student_id = %s AND ip.grade_year = 2 AND ip.term = 3
                """, (user_id,))
                second_year_points = cur.fetchall() or []
                result['second_year_points'] = second_year_points
            except Exception as e:
                log_error(f"Error fetching second year points: {e}")
            
            # 3蟷ｴ逕・蟄ｦ譛溘・蜀・筏轤ｹ繧貞叙蠕・            third_year_points = []
            try:
                cur.execute("""
                    SELECT s.name as subject_name, ip.point
                    FROM internal_points ip
                    JOIN subjects s ON ip.subject = s.id
                    WHERE ip.student_id = %s AND ip.grade_year = 3 AND ip.term = 2
                """, (user_id,))
                third_year_points = cur.fetchall() or []
                result['third_year_points'] = third_year_points
            except Exception as e:
                log_error(f"Error fetching third year points: {e}")
            
            # 遘醍岼蜷阪ｒ繧ｭ繝ｼ縺ｫ縺励◆霎樊嶌繧剃ｽ懈・
            second_year_dict = {p['subject_name']: p['point'] for p in second_year_points if p.get('point') is not None}
            third_year_dict = {p['subject_name']: p['point'] for p in third_year_points if p.get('point') is not None}
            
            # 縺吶∋縺ｦ縺ｮ遘醍岼蜷阪ｒ蜿門ｾ・            all_subjects = set(list(second_year_dict.keys()) + list(third_year_dict.keys()))
            
            # 蜷郁ｨ亥・逕ｳ轤ｹ繧定ｨ育ｮ・ 2蟷ｴ逕・蟄ｦ譛溘・蜀・筏 + 3蟷ｴ逕・蟄ｦ譛溘・蜀・筏ﾃ・
            total_points = 0
            
            # 遘醍岼縺斐→縺ｮ蜀・筏轤ｹ繧呈ｼ邏・            combined_details = []
            
            for subject in all_subjects:
                second_year_point = second_year_dict.get(subject, 0)
                third_year_point = third_year_dict.get(subject, 0)
                
                # 蜀・筏轤ｹ縺ｮ隧ｳ邏ｰ諠・ｱ繧定ｿｽ蜉
                combined_details.append({
                    'subject_name': subject,
                    'second_year_point': second_year_point,
                    'third_year_point': third_year_point,
                    'weighted_sum': second_year_point + (third_year_point * 2)
                })
                
                # 蜷郁ｨ医↓蜉邂・                total_points += second_year_point + (third_year_point * 2)
            
            result['total'] = total_points
            result['details'] = combined_details
    except Exception as e:
        log_error(f"Error in calculate_current_internal_points: {e}")
    finally:
        conn.close()
    
    return result

# 繝・せ繝育畑縺ｮ繧ｵ繝ｳ繝励Ν騾夂衍逕滓・髢｢謨ｰ
def generate_sample_notifications():
    """繧ｵ繝ｳ繝励Ν縺ｮ謌千ｸｾ蜷台ｸ企夂衍繧堤函謌舌☆繧具ｼ医ユ繧ｹ繝育畑・・""
    current_time = datetime.now()
    one_day_ago = current_time - timedelta(days=1)
    two_days_ago = current_time - timedelta(days=2)
    one_hour_ago = current_time - timedelta(hours=1)
    
    return [
        {
            'id': 1,
            'student_id': 7,
            'student_name': '繝・せ繝育函蠕但',
            'grade_year': 3,
            'subject_id': 2,
            'subject_name': '謨ｰ蟄ｦ',
            'term': 2,
            'previous_score': 65,
            'new_score': 85,
            'improvement_level': '螟ｧ',
            'potential_points': 50,
            'is_processed': 0,
            'processed_by': None,
            'processed_at': None,
            'teacher_name': None,
            'created_at': one_hour_ago
        },
        {
            'id': 2,
            'student_id': 8,
            'student_name': '繝・せ繝育函蠕達',
            'grade_year': 2,
            'subject_id': 1,
            'subject_name': '蝗ｽ隱・,
            'term': 1,
            'previous_score': 72,
            'new_score': 82,
            'improvement_level': '荳ｭ',
            'potential_points': 30,
            'is_processed': 0,
            'processed_by': None,
            'processed_at': None,
            'teacher_name': None,
            'created_at': one_day_ago
        },
        {
            'id': 3,
            'student_id': 9,
            'student_name': '繝・せ繝育函蠕辰',
            'grade_year': 1,
            'subject_id': 3,
            'subject_name': '闍ｱ隱・,
            'term': 3,
            'previous_score': 55,
            'new_score': 62,
            'improvement_level': '蟆・,
            'potential_points': 20,
            'is_processed': 1,
            'processed_by': 1,
            'processed_at': two_days_ago,
            'teacher_name': '隰帛ｸｫA',
            'created_at': two_days_ago - timedelta(hours=2)
        }
    ]

# 繝・せ繝育畑縺ｮ繧ｵ繝ｳ繝励Ν騾夂衍逕滓・髢｢謨ｰ
def generate_sample_improvement_notifications():
    """繧ｵ繝ｳ繝励Ν縺ｮ謌千ｸｾ繝ｻ蜀・筏蜷台ｸ企夂衍繧堤函謌舌☆繧具ｼ医ユ繧ｹ繝育畑・・""
    current_time = datetime.now()
    one_day_ago = current_time - timedelta(days=1)
    two_days_ago = current_time - timedelta(days=2)
    one_hour_ago = current_time - timedelta(hours=1)
    
    return [
        {
            'id': 1,
            'student_id': 7,
            'student_name': '繝・せ繝育函蠕但',
            'student_type': 'elementary',
            'grade_year': 3,
            'subject_id': 2,
            'subject_name': '邂玲焚',
            'term': 2,
            'previous_score': 65,
            'new_score': 85,
            'improvement_level': '螟ｧ',
            'potential_points': 50,
            'is_processed': 0,
            'processed_by': None,
            'processed_at': None,
            'teacher_name': None,
            'term_display': '3蟷ｴ2蟄ｦ譛・,
            'notification_text': '邂玲焚縺ｮ謌千ｸｾ縺・5轤ｹ縺九ｉ85轤ｹ縺ｫ蜷台ｸ翫＠縺ｾ縺励◆',
            'created_at': one_hour_ago
        },
        {
            'id': 2,
            'student_id': 8,
            'student_name': '繝・せ繝育函蠕達',
            'student_type': 'middle',
            'grade_year': 7,
            'subject_id': 1,
            'subject_name': '蝗ｽ隱・,
            'term': 1,
            'previous_point': 3,
            'new_point': 4,
            'improvement_level': '蟆・,
            'potential_points': 20,
            'is_processed': 0,
            'processed_by': None,
            'processed_at': None,
            'teacher_name': None,
            'term_display': '7蟷ｴ1蟄ｦ譛・,
            'notification_text': '蝗ｽ隱槭・蜀・筏轤ｹ縺・縺九ｉ4縺ｫ蜷台ｸ翫＠縺ｾ縺励◆',
            'created_at': one_day_ago
        },
        {
            'id': 3,
            'student_id': 9,
            'student_name': '繝・せ繝育函蠕辰',
            'student_type': 'middle',
            'grade_year': 9,
            'subject_id': 3,
            'subject_name': '闍ｱ隱・,
            'term': 3,
            'previous_score': 55,
            'new_score': 75,
            'improvement_level': '螟ｧ',
            'potential_points': 50,
            'is_processed': 1,
            'processed_by': 1,
            'processed_at': two_days_ago,
            'teacher_name': '隰帛ｸｫA',
            'term_display': '9蟷ｴ3蟄ｦ譛・,
            'notification_text': '闍ｱ隱槭・謌千ｸｾ縺・5轤ｹ縺九ｉ75轤ｹ縺ｫ蜷台ｸ翫＠縺ｾ縺励◆',
            'created_at': two_days_ago - timedelta(hours=2)
        }
    ]


@app.before_request
def initialize_on_first_request():
    """譛蛻昴・繝ｪ繧ｯ繧ｨ繧ｹ繝域凾縺ｫ蛻晄悄蛹悶ｒ陦後≧"""
    global _is_initialized
    if not _is_initialized:
        try:
            conn = get_db_connection()
            
            # 騾夂衍繝・・繝悶Ν縺ｮ遒ｺ隱阪・菴懈・
            from improvement_notification_manager import ensure_notification_tables
            ensure_notification_tables(conn)
            
            # 謗域･ｭ譖懈律險ｭ螳壹ユ繝ｼ繝悶Ν縺ｮ遒ｺ隱阪・菴懈・
            create_class_schedule_master_table(conn)
            
            # 繝ｦ繝ｼ繧ｶ繝ｼ繝・・繝悶Ν縺ｫ蜃ｺ蟶ｭ譖懈律繧ｫ繝ｩ繝繧定ｿｽ蜉
            add_attendance_day_column_to_users(conn)
            
            # 蟆丞ｭｦ逕溽畑謌千ｸｾ繝・・繝悶Ν縺ｮ遒ｺ隱阪・菴懈・
            ensure_elementary_grades_table(conn)
            
            # 螟夜Κ繧ｵ繝ｼ繝薙せ隱崎ｨｼ諠・ｱ繝・・繝悶Ν縺ｮ遒ｺ隱阪・菴懈・
            try:
                ensure_external_service_credentials_table(conn)
            except Exception as e:
                app.logger.error(f"螟夜Κ繧ｵ繝ｼ繝薙せ繝・・繝悶Ν菴懈・繧ｨ繝ｩ繝ｼ: {e}")
            
            conn.close()
            app.logger.info("蠢・ｦ√↑繝・・繝悶Ν縺ｨ繧ｫ繝ｩ繝繧堤｢ｺ隱阪・菴懈・縺励∪縺励◆")
        except Exception as e:
            app.logger.error(f"蛻晄悄蛹悶お繝ｩ繝ｼ: {e}")
        finally:
            _is_initialized = True

@app.route('/')
def index():
    """繝ｫ繝ｼ繝・RL縺ｸ縺ｮ繝ｪ繧ｯ繧ｨ繧ｹ繝医ｒ蜃ｦ逅・""
    # 繧ｻ繝・す繝ｧ繝ｳ縺後≠繧後・繝繝・す繝･繝懊・繝峨∈縲√↑縺代ｌ縺ｰ繝ｭ繧ｰ繧､繝ｳ縺ｸ
    if session.get('user_id'):
        if session.get('role') == 'teacher':
            return redirect('/myapp/index.cgi/teacher/dashboard')
        return redirect('/myapp/index.cgi/student/dashboard')
    return redirect('/myapp/index.cgi/login')

@app.route('/login', methods=['GET', 'POST'])
def login():
    """繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・""
    error = None
    debug_info = None
    
    if request.method == 'POST':
        email = request.form.get('email', '')
        password = request.form.get('password', '')
        
        # 繝・せ繝育畑縺ｮ繝上・繝峨さ繝ｼ繝峨＆繧後◆隱崎ｨｼ諠・ｱ
        if email == 'a@a' and password == 'a':
            session.clear()
            session['user_id'] = 7
            session['user_name'] = '繝・せ繝医Θ繝ｼ繧ｶ繝ｼ'
            session['role'] = 'student'
            session['grade_level'] = 3
            
            # 繝ｭ繧ｰ繧､繝ｳ縺ｨ繝昴う繝ｳ繝井ｻ倅ｸ主・逅・            conn = get_db_connection()
            try:
                is_first_login, points = process_login_and_award_points(conn, session['user_id'])
                if is_first_login and points > 0:
                    session['login_bonus'] = points
            finally:
                conn.close()
            
            return redirect('/myapp/index.cgi/student/dashboard')
        else:
            # 繝・・繧ｿ繝吶・繧ｹ縺九ｉ繝ｦ繝ｼ繧ｶ繝ｼ諠・ｱ繧貞叙蠕励＠縺ｦ隱崎ｨｼ
            try:
                conn = get_db_connection()
                with conn.cursor() as cur:
                    # 繝・ヰ繝・げ諠・ｱ・壹Γ繝ｼ繝ｫ繧｢繝峨Ξ繧ｹ繧堤｢ｺ隱・                    debug_info = f"讀懃ｴ｢繝｡繝ｼ繝ｫ繧｢繝峨Ξ繧ｹ: {email}"
                    
                    cur.execute("""
                        SELECT id, name, role, grade_level, password
                        FROM users
                        WHERE email = %s
                    """, (email,))
                    user = cur.fetchone()
                    
                    if user:
                        debug_info += f"<br>繝ｦ繝ｼ繧ｶ繝ｼ隕九▽縺九ｊ縺ｾ縺励◆: {user['name']}"
                        debug_info += f"<br>DB蜀・ヱ繧ｹ繝ｯ繝ｼ繝・ {user['password']}"
                        debug_info += f"<br>蜈･蜉帙ヱ繧ｹ繝ｯ繝ｼ繝・ {password}"
                        
                        # 繝ｦ繝ｼ繧ｶ繝ｼ縺悟ｭ伜惠縺励√ヱ繧ｹ繝ｯ繝ｼ繝峨′荳閾ｴ縺吶ｋ蝣ｴ蜷・                        if password == 'password' or user['password'] == password:
                            debug_info += "<br>繝代せ繝ｯ繝ｼ繝我ｸ閾ｴ"
                            session.clear()
                            session['user_id'] = user['id']
                            session['user_name'] = user['name']
                            session['role'] = user['role']
                            session['grade_level'] = user['grade_level']
                            
                            # 繝ｭ繧ｰ繧､繝ｳ縺ｨ繝昴う繝ｳ繝井ｻ倅ｸ主・逅・                            is_first_login, points = process_login_and_award_points(conn, user['id'])
                            if is_first_login and points > 0:
                                session['login_bonus'] = points
                            
                            if user['role'] == 'teacher':
                                return redirect('/myapp/index.cgi/teacher/dashboard')
                            else:
                                return redirect('/myapp/index.cgi/student/dashboard')
                        else:
                            debug_info += "<br>繝代せ繝ｯ繝ｼ繝我ｸ堺ｸ閾ｴ"
                            error = "繝｡繝ｼ繝ｫ繧｢繝峨Ξ繧ｹ縺ｾ縺溘・繝代せ繝ｯ繝ｼ繝峨′豁｣縺励￥縺ゅｊ縺ｾ縺帙ｓ"
                    else:
                        debug_info += "<br>繝ｦ繝ｼ繧ｶ繝ｼ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ"
                        error = "繝｡繝ｼ繝ｫ繧｢繝峨Ξ繧ｹ縺ｾ縺溘・繝代せ繝ｯ繝ｼ繝峨′豁｣縺励￥縺ゅｊ縺ｾ縺帙ｓ"
            except Exception as e:
                log_error(f"Database error in login: {e}")
                error = "繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・〒繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆"
                debug_info = f"繝・・繧ｿ繝吶・繧ｹ繧ｨ繝ｩ繝ｼ: {str(e)}"
            finally:
                if 'conn' in locals():
                    conn.close()
    
    return render_template('login.html', error=error, debug_info=debug_info)

@app.route('/student/dashboard')
def student_dashboard():
    """逕溷ｾ偵ム繝・す繝･繝懊・繝芽｡ｨ遉ｺ"""
    # proxy_token繧偵メ繧ｧ繝・け
    proxy_token = request.args.get('proxy_token')
    
    if proxy_token and hasattr(app, 'student_proxy_tokens'):
        token_data = app.student_proxy_tokens.get(proxy_token)
        
        if token_data and token_data['expires'] > int(time.time()):
            # 螳滄圀縺ｮ繧ｻ繝・す繝ｧ繝ｳ縺ｯ螟画峩縺帙★縲√Μ繧ｯ繧ｨ繧ｹ繝医↓逕溷ｾ呈ュ蝣ｱ繧剃ｻ倅ｸ・            request.proxy_student_id = token_data['student_id']
            request.proxy_teacher_id = token_data['teacher_id']
            
    # URL繧ｯ繧ｨ繝ｪ繝代Λ繝｡繝ｼ繧ｿ縺九ｉ逕溷ｾ棚D縺ｨ隰帛ｸｫ繝薙Η繝ｼ繝｢繝ｼ繝峨ｒ蜿門ｾ・    requested_student_id = request.args.get('id', type=int)
    teacher_view_mode = request.args.get('teacher_view') == 'true'
    
    # 隰帛ｸｫ繝薙Η繝ｼ繝｢繝ｼ繝峨・讀懆ｨｼ・医そ繧ｭ繝･繝ｪ繝・ぅ繝√ぉ繝・け・・    if teacher_view_mode and session.get('role') != 'teacher':
        return redirect('/myapp/index.cgi/login')
    
    # 騾壼ｸｸ繝ｭ繧ｰ繧､繝ｳ遒ｺ隱搾ｼ郁ｬ帛ｸｫ繝薙Η繝ｼ繝｢繝ｼ繝峨〒縺ｪ縺・ｴ蜷茨ｼ・    if not session.get('user_id') and not teacher_view_mode:
        return redirect('/myapp/index.cgi/login')
    
    # 陦ｨ遉ｺ縺吶ｋ逕溷ｾ棚D繧呈ｱｺ螳・    user_id = None
    teacher_view = False
    login_bonus = None
    student_name = ''
    student_grade_level = 1
    
    # 隰帛ｸｫ縺後Ο繧ｰ繧､繝ｳ縺励※縺・ｋ蝣ｴ蜷・    if session.get('role') == 'teacher':
        if requested_student_id:
            # 謖・ｮ壹＆繧後◆逕溷ｾ偵・諠・ｱ繧定｡ｨ遉ｺ
            user_id = requested_student_id
            teacher_view = True
            
            # 逕溷ｾ呈ュ蝣ｱ蜿門ｾ・            conn = get_db_connection()
            try:
                with conn.cursor() as cur:
                    cur.execute("SELECT name, grade_level FROM users WHERE id = %s AND role = 'student'", (user_id,))
                    student = cur.fetchone()
                    if not student:
                        return "逕溷ｾ偵′隕九▽縺九ｊ縺ｾ縺帙ｓ", 404
                    student_name = student['name']
                    student_grade_level = student['grade_level']
            except Exception as e:
                log_error(f"逕溷ｾ呈ュ蝣ｱ蜿門ｾ励お繝ｩ繝ｼ: {e}")
                return "繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆", 500
            finally:
                conn.close()
        else:
            # 逕溷ｾ棚D縺梧欠螳壹＆繧後※縺・↑縺・ｴ蜷・            return redirect('/myapp/index.cgi/teacher/dashboard')
    # 逕溷ｾ偵′繝ｭ繧ｰ繧､繝ｳ縺励※縺・ｋ蝣ｴ蜷・    elif session.get('role') == 'student':
        # 閾ｪ蛻・・霄ｫ縺ｮ諠・ｱ縺ｮ縺ｿ陦ｨ遉ｺ蜿ｯ閭ｽ
        user_id = session.get('user_id')
        student_name = session.get('user_name', '')
        student_grade_level = session.get('grade_level')
        login_bonus = session.pop('login_bonus', None)
    else:
        # 荳肴・縺ｪ蠖ｹ蜑ｲ
        return redirect('/myapp/index.cgi/login')
    
    # 繝・・繧ｿ繝吶・繧ｹ縺九ｉ縺顔衍繧峨○繧貞叙蠕・    notifications = []
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            # 縺顔衍繧峨○蜿門ｾ・            cur.execute("""
              SELECT n.message, n.created_at, u.name AS teacher_name
              FROM notifications n
              JOIN users u ON n.teacher_id = u.id
              WHERE n.student_id IS NULL OR n.student_id = %s
              ORDER BY n.id DESC
            """, (user_id,))
            db_notifications = cur.fetchall()
            if db_notifications:
                notifications = db_notifications
    except Exception as e:
        log_error(f"Database error in student_dashboard: {e}")
    finally:
        if 'conn' in locals():
            conn.close()
    
    # 縺顔衍繧峨○縺後↑縺・ｴ蜷医・繝・せ繝育畑縺ｮ繝・・繧ｿ繧剃ｽｿ逕ｨ
    if not notifications:
        notifications = [
            {
                'message': '縺薙ｌ縺ｯ繝・せ繝育畑縺ｮ縺顔衍繧峨○縺ｧ縺・,
                'created_at': '2025-04-29 08:00:00',
                'teacher_name': '邂｡逅・・
            }
        ]
    
    # 繝昴う繝ｳ繝域ュ蝣ｱ繧貞叙蠕・    total_points = 0
    current_streak = 0
    max_streak = 0
    monthly_attendance_rate = 0
    
    try:
        conn = get_db_connection()
        total_points = get_user_total_points(conn, user_id)
        
        # 繧ｹ繝医Μ繝ｼ繧ｯ諠・ｱ繧貞叙蠕・        with conn.cursor() as cur:
            cur.execute("""
                SELECT current_streak, max_streak FROM login_streaks
                WHERE user_id = %s
            """, (user_id,))
            streak_info = cur.fetchone()
            if streak_info:
                current_streak = streak_info['current_streak']
                max_streak = streak_info['max_streak']
        
        # 蜃ｺ蟶ｭ邇・ｒ蜿門ｾ・        monthly_attendance_rate = calculate_monthly_attendance_rate(conn, user_id)
        
        # 隱慕函譌･譛医°縺ｩ縺・°縺ｮ繝√ぉ繝・け
        is_birthday_month = False
        birthday_passed = False
        
        with conn.cursor() as cur:
            cur.execute("""
                SELECT birthday FROM users
                WHERE id = %s
            """, (user_id,))
            user = cur.fetchone()
            if user and user['birthday']:
                today = datetime.now()
                # 蜷後§譛医↑繧峨・隱慕函譌･譛・                is_birthday_month = (user['birthday'].month == today.month)
                # 莉雁ｹｴ縺ｮ隱慕函譌･縺碁℃縺弱※縺・ｋ縺九メ繧ｧ繝・け
                if today.month > user['birthday'].month or (today.month == user['birthday'].month and today.day >= user['birthday'].day):
                    birthday_passed = True
    except Exception as e:
        log_error(f"Error checking birthday: {e}")
    finally:
        if 'conn' in locals():
            conn.close()
    
    # 隰帛ｸｫ縺ｨ縺励※繝ｭ繧ｰ繧､繝ｳ縺励※縺・ｋ縺九←縺・°縺ｮ繝輔Λ繧ｰ繧偵ユ繝ｳ繝励Ξ繝ｼ繝医↓貂｡縺・    is_teacher_login = session.get('is_teacher_login', False)
    
    return render_template(
        'student_dashboard.html', 
        name=student_name,
        notifications=notifications,
        login_bonus=login_bonus,
        total_points=total_points,
        current_streak=current_streak,
        max_streak=max_streak,
        monthly_attendance_rate=monthly_attendance_rate,
        is_birthday_month=is_birthday_month,
        birthday_passed=birthday_passed,
        teacher_view=teacher_view,
        student_id=user_id,
        is_teacher_login=is_teacher_login  # 繝・Φ繝励Ξ繝ｼ繝医↓隰帛ｸｫ繝ｭ繧ｰ繧､繝ｳ繝輔Λ繧ｰ繧呈ｸ｡縺・    )

@app.route('/student/profile', methods=['GET', 'POST'])
def student_profile():
    """逕溷ｾ偵・繝ｭ繝輔ぅ繝ｼ繝ｫ繝ｻ蠢玲悍譬｡險ｭ螳夂判髱｢"""
    # URL繧ｯ繧ｨ繝ｪ繝代Λ繝｡繝ｼ繧ｿ縺九ｉ逕溷ｾ棚D繧貞叙蠕暦ｼ郁ｬ帛ｸｫ逕ｨ・・    requested_student_id = request.args.get('id', type=int)
    
    # 繝ｭ繧ｰ繧､繝ｳ縺励※縺・↑縺・ｴ蜷医・繝ｭ繧ｰ繧､繝ｳ逕ｻ髱｢縺ｸ繝ｪ繝繧､繝ｬ繧ｯ繝・    if not session.get('user_id'):
        return redirect('/myapp/index.cgi/login')
    
    # 繝ｦ繝ｼ繧ｶ繝ｼ縺ｮ蠖ｹ蜑ｲ縺ｫ蝓ｺ縺･縺・※縺ｩ縺ｮ逕溷ｾ呈ュ蝣ｱ繧定｡ｨ遉ｺ縺吶ｋ縺区ｱｺ螳・    user_role = session.get('role')
    teacher_view = False
    error = None
    success = None
    
    if user_role == 'teacher':
        # 隰帛ｸｫ縺ｯ莉ｻ諢上・逕溷ｾ偵・繝励Ο繝輔ぅ繝ｼ繝ｫ縺ｫ繧｢繧ｯ繧ｻ繧ｹ蜿ｯ閭ｽ
        if requested_student_id:
            user_id = requested_student_id
            teacher_view = True
            
            # 縺薙・逕溷ｾ偵・繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ繧貞・逅・            conn = get_db_connection()
            try:
                # 逕溷ｾ偵′蟄伜惠縺吶ｋ縺狗｢ｺ隱・                with conn.cursor() as cur:
                    cur.execute("SELECT id, name FROM users WHERE id = %s AND role = 'student'", (user_id,))
                    student = cur.fetchone()
                    if not student:
                        return "逕溷ｾ偵′隕九▽縺九ｊ縺ｾ縺帙ｓ", 404
                    student_name = student['name']
                
                # 繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ蜃ｦ逅・                is_first_login, points = process_login_and_award_points(conn, user_id)
                if is_first_login and points > 0:
                    success = f"逕溷ｾ・{student_name} 縺ｫ繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ {points} 繝昴う繝ｳ繝医′莉倅ｸ弱＆繧後∪縺励◆"
            except Exception as e:
                log_error(f"逕溷ｾ偵Ο繧ｰ繧､繝ｳ蜃ｦ逅・お繝ｩ繝ｼ: {e}")
                error = f"繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: {str(e)}"
            finally:
                conn.close()
        else:
            # 逕溷ｾ棚D縺梧欠螳壹＆繧後※縺・↑縺・ｴ蜷医・隰帛ｸｫ繝繝・す繝･繝懊・繝峨∈
            return redirect('/myapp/index.cgi/teacher/dashboard')
    elif user_role == 'student':
        # 逕溷ｾ偵・閾ｪ蛻・・霄ｫ縺ｮ繝励Ο繝輔ぅ繝ｼ繝ｫ縺ｮ縺ｿ繧｢繧ｯ繧ｻ繧ｹ蜿ｯ閭ｽ
        user_id = session.get('user_id')
        student_name = session.get('user_name', '')
    else:
        # 荳肴・縺ｪ蠖ｹ蜑ｲ
        return redirect('/myapp/index.cgi/login')
    
    # 繝・・繧ｿ繝吶・繧ｹ謗･邯・    conn = get_db_connection()
    
    # 蠢玲悍譬｡縺ｮ蜿門ｾ励→險ｭ螳壼・逅・    preferences = []
    high_schools = []
    birthday = None
    school_type = None
    grade_level = None
    attendance_days = None
    
    try:
        with conn.cursor() as cur:
            # 繝ｦ繝ｼ繧ｶ繝ｼ縺ｮ諠・ｱ繧貞叙蠕・            cur.execute("SELECT name, birthday, school_type, grade_level, attendance_days FROM users WHERE id = %s", (user_id,))
            user_info = cur.fetchone()
            if user_info:
                student_name = user_info['name']
                birthday = user_info['birthday']
                school_type = user_info.get('school_type', 'middle')  # 繝・ヵ繧ｩ繝ｫ繝医・荳ｭ蟄ｦ逕・                grade_level = user_info.get('grade_level')
                attendance_days = user_info.get('attendance_days')
            
            # 迴ｾ蝨ｨ縺ｮ蠢玲悍譬｡險ｭ螳壹ｒ蜿門ｾ・            cur.execute("""
                SELECT p.id, p.preference_order, h.id as high_school_id, h.name, 
                       h.district, h.course_type, h.min_required_points, 
                       h.avg_accepted_points, h.competition_rate,
                       h.deviation_score, h.survey_report_total, 
                       h.university_advancement_rate, h.strong_club_activities
                FROM user_high_school_preferences p
                JOIN high_schools h ON p.high_school_id = h.id
                WHERE p.user_id = %s
                ORDER BY p.preference_order
            """, (user_id,))
            preferences = cur.fetchall()
            
            # 譛譁ｰ蟷ｴ蠎ｦ縺ｮ鬮俶｡荳隕ｧ繧貞叙蠕・            cur.execute("""
                SELECT MAX(year) as latest_year FROM high_schools
            """)
            latest_year_result = cur.fetchone()
            latest_year = latest_year_result['latest_year'] if latest_year_result else 2025
            
            cur.execute("""
                SELECT id, name, district, course_type, 
                       min_required_points, avg_accepted_points, competition_rate,
                       deviation_score
                FROM high_schools
                WHERE year = %s
                ORDER BY name, course_type
            """, (latest_year,))
            high_schools = cur.fetchall()
    except Exception as e:
        log_error(f"Error fetching school preferences: {e}")
        error = "繝・・繧ｿ縺ｮ蜿門ｾ励↓螟ｱ謨励＠縺ｾ縺励◆"
    
    # CSRF蟇ｾ遲悶ヨ繝ｼ繧ｯ繝ｳ縺ｮ逕滓・
    import secrets
    csrf_token = secrets.token_hex(16)
    session['csrf_token'] = csrf_token
    
    # POST繝ｪ繧ｯ繧ｨ繧ｹ繝域凾縺ｮ蜃ｦ逅・ｼ亥ｿ玲悍譬｡霑ｽ蜉繝ｻ譖ｴ譁ｰ縲√∪縺溘・隱慕函譌･譖ｴ譁ｰ縲√ヱ繧ｹ繝ｯ繝ｼ繝画峩譁ｰ・・    # 謨吝ｸｫ繝｢繝ｼ繝峨・蝣ｴ蜷医・POST繧堤┌隕・    if request.method == 'POST' and not teacher_view:
        action = request.form.get('action')
        
        if action == 'add_preference':
            # 譁ｰ縺励＞蠢玲悍譬｡繧定ｿｽ蜉
            high_school_id = request.form.get('high_school_id')
            preference_order = request.form.get('preference_order', 1, type=int)
            
            if not high_school_id:
                error = "蠢玲悍譬｡繧帝∈謚槭＠縺ｦ縺上□縺輔＞"
            else:
                try:
                    with conn.cursor() as cur:
                        # 譌｢縺ｫ蜷後§蟄ｦ譬｡縺檎匳骭ｲ縺輔ｌ縺ｦ縺・↑縺・°遒ｺ隱・                        cur.execute("""
                            SELECT id FROM user_high_school_preferences
                            WHERE user_id = %s AND high_school_id = %s
                        """, (user_id, high_school_id))
                        
                        existing = cur.fetchone()
                        if existing:
                            error = "驕ｸ謚槭＠縺滄ｫ俶｡縺ｯ譌｢縺ｫ蠢玲悍譬｡繝ｪ繧ｹ繝医↓逋ｻ骭ｲ縺輔ｌ縺ｦ縺・∪縺・
                        else:
                            # 蠢玲悍鬆・ｽ阪′驥崎､・☆繧句ｴ蜷医∽ｻ悶・鬆・ｽ阪ｒ縺壹ｉ縺・                            cur.execute("""
                                UPDATE user_high_school_preferences
                                SET preference_order = preference_order + 1
                                WHERE user_id = %s AND preference_order >= %s
                                ORDER BY preference_order DESC
                            """, (user_id, preference_order))
                            
                            # 譁ｰ縺励＞蠢玲悍譬｡繧定ｿｽ蜉
                            cur.execute("""
                                INSERT INTO user_high_school_preferences
                                (user_id, high_school_id, preference_order)
                                VALUES (%s, %s, %s)
                            """, (user_id, high_school_id, preference_order))
                            
                            success = "蠢玲悍譬｡繧定ｿｽ蜉縺励∪縺励◆"
                            conn.commit()
                            return redirect('/myapp/index.cgi/student/profile')
                except Exception as e:
                    log_error(f"Error adding school preference: {e}")
                    error = "蠢玲悍譬｡縺ｮ霑ｽ蜉縺ｫ螟ｱ謨励＠縺ｾ縺励◆"
                    
        elif action == 'delete_preference':
            # 蠢玲悍譬｡繧貞炎髯､
            preference_id = request.form.get('preference_id')
            
            if not preference_id:
                error = "蜑企勁縺吶ｋ蠢玲悍譬｡縺梧欠螳壹＆繧後※縺・∪縺帙ｓ"
            else:
                try:
                    with conn.cursor() as cur:
                        # 蜑企勁縺吶ｋ蠢玲悍譬｡縺ｮ鬆・ｽ阪ｒ蜿門ｾ・                        cur.execute("""
                            SELECT preference_order FROM user_high_school_preferences
                            WHERE id = %s AND user_id = %s
                        """, (preference_id, user_id))
                        
                        pref = cur.fetchone()
                        if not pref:
                            error = "謖・ｮ壹＆繧後◆蠢玲悍譬｡縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ"
                        else:
                            order = pref['preference_order']
                            
                            # 蠢玲悍譬｡繧貞炎髯､
                            cur.execute("""
                                DELETE FROM user_high_school_preferences
                                WHERE id = %s AND user_id = %s
                            """, (preference_id, user_id))
                            
                            # 谿九ｊ縺ｮ蠢玲悍鬆・ｽ阪ｒ隧ｰ繧√ｋ
                            cur.execute("""
                                UPDATE user_high_school_preferences
                                SET preference_order = preference_order - 1
                                WHERE user_id = %s AND preference_order > %s
                            """, (user_id, order))
                            
                            success = "蠢玲悍譬｡繧貞炎髯､縺励∪縺励◆"
                            conn.commit()
                            return redirect('/myapp/index.cgi/student/profile')
                except Exception as e:
                    log_error(f"Error deleting school preference: {e}")
                    error = "蠢玲悍譬｡縺ｮ蜑企勁縺ｫ螟ｱ謨励＠縺ｾ縺励◆"
        
        elif action == 'update_birthday':
            # 隱慕函譌･繧呈峩譁ｰ
            new_birthday = request.form.get('birthday')
            
            if not new_birthday:
                error = "隱慕函譌･繧帝∈謚槭＠縺ｦ縺上□縺輔＞"
            else:
                try:
                    # 譌･莉伜ｽ｢蠑上・讀懆ｨｼ
                    try:
                        parsed_date = datetime.strptime(new_birthday, '%Y-%m-%d').date()
                        
                        # 莉頑律繧医ｊ譛ｪ譚･縺ｮ譌･莉倥・繧ｨ繝ｩ繝ｼ
                        if parsed_date > datetime.now().date():
                            error = "譛ｪ譚･縺ｮ譌･莉倥・險ｭ螳壹〒縺阪∪縺帙ｓ"
                        else:
                            # 隱慕函譌･繧呈峩譁ｰ
                            success_update, message = update_user_birthday(conn, user_id, parsed_date)
                            
                            if success_update:
                                success = "隱慕函譌･繧呈峩譁ｰ縺励∪縺励◆"
                                birthday = parsed_date
                            else:
                                error = message
                    
                    except ValueError:
                        error = "辟｡蜉ｹ縺ｪ譌･莉伜ｽ｢蠑上〒縺・
                
                except Exception as e:
                    log_error(f"Error updating birthday: {e}")
                    error = "隱慕函譌･縺ｮ譖ｴ譁ｰ縺ｫ螟ｱ謨励＠縺ｾ縺励◆"
        
        elif action == 'update_password':
            # 繝代せ繝ｯ繝ｼ繝牙､画峩蜃ｦ逅・            current_password = request.form.get('current_password')
            new_password = request.form.get('new_password')
            confirm_password = request.form.get('confirm_password')
            form_csrf_token = request.form.get('csrf_token')
            
            # CSRF蟇ｾ遲・            if not form_csrf_token or form_csrf_token != session.get('csrf_token'):
                error = "繧ｻ繧ｭ繝･繝ｪ繝・ぅ繝医・繧ｯ繝ｳ縺檎┌蜉ｹ縺ｧ縺吶ゅ・繝ｼ繧ｸ繧貞・隱ｭ縺ｿ霎ｼ縺ｿ縺励※蜀崎ｩｦ陦後＠縺ｦ縺上□縺輔＞縲・
            elif not current_password or not new_password or not confirm_password:
                error = "縺吶∋縺ｦ縺ｮ繝代せ繝ｯ繝ｼ繝峨ヵ繧｣繝ｼ繝ｫ繝峨ｒ蜈･蜉帙＠縺ｦ縺上□縺輔＞"
            elif new_password != confirm_password:
                error = "譁ｰ縺励＞繝代せ繝ｯ繝ｼ繝峨→遒ｺ隱咲畑繝代せ繝ｯ繝ｼ繝峨′荳閾ｴ縺励∪縺帙ｓ"
            else:
                # 繝代せ繝ｯ繝ｼ繝牙ｼｷ蠎ｦ縺ｮ讀懆ｨｼ
                import re
                if len(new_password) < 8:
                    error = "譁ｰ縺励＞繝代せ繝ｯ繝ｼ繝峨・8譁・ｭ嶺ｻ･荳翫〒縺ゅｋ蠢・ｦ√′縺ゅｊ縺ｾ縺・
                elif not re.search(r'[0-9]', new_password):
                    error = "譁ｰ縺励＞繝代せ繝ｯ繝ｼ繝峨・蟆代↑縺上→繧・縺､縺ｮ謨ｰ蟄励ｒ蜷ｫ繧蠢・ｦ√′縺ゅｊ縺ｾ縺・
                elif not re.search(r'[a-z]', new_password):
                    error = "譁ｰ縺励＞繝代せ繝ｯ繝ｼ繝峨・蟆代↑縺上→繧・縺､縺ｮ蟆乗枚蟄励ｒ蜷ｫ繧蠢・ｦ√′縺ゅｊ縺ｾ縺・
                elif not re.search(r'[A-Z]', new_password):
                    error = "譁ｰ縺励＞繝代せ繝ｯ繝ｼ繝峨・蟆代↑縺上→繧・縺､縺ｮ螟ｧ譁・ｭ励ｒ蜷ｫ繧蠢・ｦ√′縺ゅｊ縺ｾ縺・
                else:
                    try:
                        with conn.cursor() as cur:
                            # 迴ｾ蝨ｨ縺ｮ繝代せ繝ｯ繝ｼ繝峨ｒ遒ｺ隱・                            cur.execute("SELECT password FROM users WHERE id = %s", (user_id,))
                            user_data = cur.fetchone()
                            
                            if not user_data:
                                error = "繝ｦ繝ｼ繧ｶ繝ｼ諠・ｱ縺ｮ蜿門ｾ励↓螟ｱ謨励＠縺ｾ縺励◆"
                            else:
                                stored_password = user_data['password']
                                is_password_valid = False
                                
                                # 繝代せ繝ｯ繝ｼ繝峨′BCrypt繝上ャ繧ｷ繝･縺九←縺・°繧堤｢ｺ隱・                                if stored_password.startswith('$2b$') or stored_password.startswith('$2y$'):
                                    # BCrypt繝代せ繝ｯ繝ｼ繝峨・讀懆ｨｼ
                                    try:
                                        import bcrypt
                                        is_password_valid = bcrypt.checkpw(current_password.encode('utf-8'), stored_password.encode('utf-8'))
                                    except ImportError:
                                        # bcrypt縺後う繝ｳ繧ｹ繝医・繝ｫ縺輔ｌ縺ｦ縺・↑縺・ｴ蜷・                                        log_error("bcrypt繝｢繧ｸ繝･繝ｼ繝ｫ縺後う繝ｳ繧ｹ繝医・繝ｫ縺輔ｌ縺ｦ縺・∪縺帙ｓ縲る壼ｸｸ縺ｮ豈碑ｼ・ｒ菴ｿ逕ｨ縺励∪縺吶・)
                                        is_password_valid = (current_password == stored_password)
                                else:
                                    # 繝励Ξ繝ｼ繝ｳ繝・く繧ｹ繝医・蝣ｴ蜷・                                    is_password_valid = (current_password == stored_password)
                                
                                if not is_password_valid:
                                    error = "迴ｾ蝨ｨ縺ｮ繝代せ繝ｯ繝ｼ繝峨′豁｣縺励￥縺ゅｊ縺ｾ縺帙ｓ"
                                else:
                                    # 譁ｰ縺励＞繝代せ繝ｯ繝ｼ繝峨ｒ繝上ャ繧ｷ繝･蛹・                                    try:
                                        import bcrypt
                                        # 繝代せ繝ｯ繝ｼ繝峨ｒbcrypt縺ｧ繝上ャ繧ｷ繝･蛹・                                        salt = bcrypt.gensalt()
                                        hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), salt).decode('utf-8')
                                    except ImportError:
                                        # bcrypt縺後う繝ｳ繧ｹ繝医・繝ｫ縺輔ｌ縺ｦ縺・↑縺・ｴ蜷・                                        log_error("bcrypt繝｢繧ｸ繝･繝ｼ繝ｫ縺後う繝ｳ繧ｹ繝医・繝ｫ縺輔ｌ縺ｦ縺・∪縺帙ｓ縲ょｹｳ譁・〒繝代せ繝ｯ繝ｼ繝峨ｒ菫晏ｭ倥＠縺ｾ縺吶・)
                                        hashed_password = new_password
                                    
                                    # 繝代せ繝ｯ繝ｼ繝峨ｒ譖ｴ譁ｰ
                                    cur.execute("""
                                        UPDATE users SET 
                                        password = %s,
                                        updated_at = NOW()
                                        WHERE id = %s
                                    """, (hashed_password, user_id))
                                    
                                    conn.commit()
                                    
                                    # 繧ｻ繧ｭ繝･繝ｪ繝・ぅ繝ｭ繧ｰ縺ｫ險倬鹸
                                    try:
                                        cur.execute("""
                                            INSERT INTO security_log 
                                            (user_id, event_type, ip_address, user_agent)
                                            VALUES (%s, %s, %s, %s)
                                        """, (
                                            user_id, 
                                            'password_change', 
                                            request.remote_addr,
                                            request.headers.get('User-Agent', '')
                                        ))
                                        conn.commit()
                                    except Exception as e:
                                        # 繝ｭ繧ｰ險倬鹸螟ｱ謨励・繧ｯ繝ｪ繝・ぅ繧ｫ繝ｫ縺ｧ縺ｯ縺ｪ縺・・縺ｧ繧ｨ繝ｩ繝ｼ縺ｨ縺励※謇ｱ繧上↑縺・                                        log_error(f"Failed to log password change: {e}")
                                    
                                    success = "繝代せ繝ｯ繝ｼ繝峨ｒ譖ｴ譁ｰ縺励∪縺励◆"
                                    
                                    # 繧ｻ繧ｭ繝･繝ｪ繝・ぅ縺ｮ縺溘ａ縲，SRF 繝医・繧ｯ繝ｳ繧呈峩譁ｰ
                                    csrf_token = secrets.token_hex(16)
                                    session['csrf_token'] = csrf_token
                    except Exception as e:
                        log_error(f"Error updating password: {e}")
                        error = "繝代せ繝ｯ繝ｼ繝峨・譖ｴ譁ｰ縺ｫ螟ｱ謨励＠縺ｾ縺励◆"
        
        elif action == 'update_grade':
            # 蟄ｦ蟷ｴ險ｭ螳壹ｒ譖ｴ譁ｰ
            new_school_type = request.form.get('school_type')
            new_grade_level = request.form.get('grade_level', type=int)
            
            if not new_school_type or not new_grade_level:
                error = "蟄ｦ譬｡繧ｿ繧､繝励→蟄ｦ蟷ｴ繧帝∈謚槭＠縺ｦ縺上□縺輔＞"
            else:
                try:
                    with conn.cursor() as cur:
                        cur.execute("""
                            UPDATE users SET 
                            school_type = %s,
                            grade_level = %s,
                            updated_at = NOW()
                            WHERE id = %s
                        """, (new_school_type, new_grade_level, user_id))
                        
                        conn.commit()
                        success = "蟄ｦ蟷ｴ險ｭ螳壹ｒ譖ｴ譁ｰ縺励∪縺励◆"
                        school_type = new_school_type
                        grade_level = new_grade_level
                except Exception as e:
                    log_error(f"Error updating grade: {e}")
                    error = "蟄ｦ蟷ｴ險ｭ螳壹・譖ｴ譁ｰ縺ｫ螟ｱ謨励＠縺ｾ縺励◆"
                    
        elif action == 'update_attendance_days':
            # 騾壼｡ｾ譖懈律險ｭ螳壹ｒ譖ｴ譁ｰ
            attendance_days_list = request.form.getlist('attendance_days[]')
            
            if attendance_days_list:
                # 隍・焚驕ｸ謚槭＆繧後◆譖懈律繧偵き繝ｳ繝槫玄蛻・ｊ縺ｮ譁・ｭ怜・縺ｫ螟画鋤
                attendance_days_str = ','.join(attendance_days_list)
                
                try:
                    with conn.cursor() as cur:
                        cur.execute("""
                            UPDATE users
                            SET attendance_days = %s,
                                updated_at = NOW()
                            WHERE id = %s
                        """, (attendance_days_str, user_id))
                        
                        conn.commit()
                        success = "騾壼｡ｾ譖懈律險ｭ螳壹ｒ譖ｴ譁ｰ縺励∪縺励◆"
                        attendance_days = attendance_days_str
                except Exception as e:
                    log_error(f"Error updating attendance days: {e}")
                    error = "騾壼｡ｾ譖懈律險ｭ螳壹・譖ｴ譁ｰ縺ｫ螟ｱ謨励＠縺ｾ縺励◆"
            else:
                # 譖懈律縺碁∈謚槭＆繧後※縺・↑縺・ｴ蜷医・NULL縺ｫ險ｭ螳・                try:
                    with conn.cursor() as cur:
                        cur.execute("""
                            UPDATE users
                            SET attendance_days = NULL,
                                updated_at = NOW()
                            WHERE id = %s
                        """, (user_id,))
                        
                        conn.commit()
                        success = "騾壼｡ｾ譖懈律險ｭ螳壹ｒ譖ｴ譁ｰ縺励∪縺励◆"
                        attendance_days = None
                except Exception as e:
                    log_error(f"Error clearing attendance days: {e}")
                    error = "騾壼｡ｾ譖懈律險ｭ螳壹・譖ｴ譁ｰ縺ｫ螟ｱ謨励＠縺ｾ縺励◆"
    
    # 迴ｾ蝨ｨ縺ｮ蜀・筏轤ｹ蜷郁ｨ医ｒ險育ｮ・    current_internal_points = calculate_current_internal_points(user_id)
    
    # 繝・・繧ｿ繝吶・繧ｹ謗･邯壹ｒ繧ｯ繝ｭ繝ｼ繧ｺ
    conn.close()
    
    return render_template(
        'student_profile.html',
        name=student_name,
        preferences=preferences,
        high_schools=high_schools,
        current_internal_points=current_internal_points,
        birthday=birthday,
        school_type=school_type,
        grade_level=grade_level,
        attendance_days=attendance_days,
        csrf_token=csrf_token,
        error=error,
        success=success,
        teacher_view=teacher_view,
        student_id=user_id
    )

@app.route('/student/performance')
@app.route('/student/performance/<int:year>')
def student_performance(year=None):
    """逕溷ｾ呈・邵ｾ繝ｻ蜀・筏陦ｨ遉ｺ"""
    # URL繧ｯ繧ｨ繝ｪ繝代Λ繝｡繝ｼ繧ｿ縺九ｉ逕溷ｾ棚D繧貞叙蠕暦ｼ郁ｬ帛ｸｫ逕ｨ・・    requested_student_id = request.args.get('id', type=int)
    
    # 繝ｭ繧ｰ繧､繝ｳ縺励※縺・↑縺・ｴ蜷医・繝ｭ繧ｰ繧､繝ｳ逕ｻ髱｢縺ｸ繝ｪ繝繧､繝ｬ繧ｯ繝・    if not session.get('user_id'):
        return redirect('/myapp/index.cgi/login')
    
    # 繧｢繧ｯ繧ｻ繧ｹ讓ｩ髯舌→陦ｨ遉ｺ縺吶ｋ逕溷ｾ偵ｒ豎ｺ螳・    user_role = session.get('role')
    teacher_view = False
    school_type = 'middle'  # 繝・ヵ繧ｩ繝ｫ繝亥､繧剃ｸｭ蟄ｦ譬｡縺ｫ險ｭ螳・    
    if user_role == 'teacher':
        # 隰帛ｸｫ縺ｯ莉ｻ諢上・逕溷ｾ偵・謌千ｸｾ縺ｫ繧｢繧ｯ繧ｻ繧ｹ蜿ｯ閭ｽ
        if requested_student_id:
            user_id = requested_student_id
            teacher_view = True
            
            # 縺薙・逕溷ｾ偵・繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ繧貞・逅・            conn = get_db_connection()
            try:
                # 逕溷ｾ偵′蟄伜惠縺吶ｋ縺狗｢ｺ隱阪＠縲∝錐蜑阪→蟄ｦ蟷ｴ繧貞叙蠕・                with conn.cursor() as cur:
                    cur.execute("SELECT name, grade_level, role, school_type FROM users WHERE id = %s AND role = 'student'", (user_id,))
                    student = cur.fetchone()
                    if not student:
                        return "逕溷ｾ偵′隕九▽縺九ｊ縺ｾ縺帙ｓ", 404
                    student_name = student['name']
                    student_grade_level = student['grade_level']
                    student_role = student['role']
                    # school_type繧貞叙蠕・                    if student['school_type']:
                        school_type = student['school_type']
                
                # 繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ蜃ｦ逅・                is_first_login, points = process_login_and_award_points(conn, user_id)
            except Exception as e:
                log_error(f"逕溷ｾ呈・邵ｾ縺ｮ隰帛ｸｫ陦ｨ遉ｺ繧ｨ繝ｩ繝ｼ: {e}")
            finally:
                conn.close()
        else:
            # 逕溷ｾ棚D縺梧欠螳壹＆繧後※縺・↑縺・ｴ蜷・            return redirect('/myapp/index.cgi/teacher/dashboard')
    elif user_role == 'student':
        # 逕溷ｾ偵・閾ｪ蛻・・霄ｫ縺ｮ謌千ｸｾ縺ｮ縺ｿ繧｢繧ｯ繧ｻ繧ｹ蜿ｯ閭ｽ
        user_id = session.get('user_id')
        student_name = session.get('user_name', '')
        student_grade_level = session.get('grade_level', 1)
        student_role = 'student'
        
        # 逕溷ｾ偵・school_type繧貞叙蠕・        conn = get_db_connection()
        try:
            with conn.cursor() as cur:
                cur.execute("SELECT school_type FROM users WHERE id = %s", (user_id,))
                user_info = cur.fetchone()
                if user_info and user_info['school_type']:
                    school_type = user_info['school_type']
        except Exception as e:
            log_error(f"逕溷ｾ偵・school_type蜿門ｾ励お繝ｩ繝ｼ: {e}")
        finally:
            conn.close()
    else:
        # 荳肴・縺ｪ蠖ｹ蜑ｲ
        return redirect('/myapp/index.cgi/login')
    
    # 蟄ｦ蟷ｴ繧定ｨｭ螳夲ｼ域欠螳壹′縺ｪ縺代ｌ縺ｰ迴ｾ蝨ｨ縺ｮ蟄ｦ蟷ｴ・・    if year is None:
        year = student_grade_level
    
    # 遘醍岼荳隕ｧ繧貞叙蠕・    conn = get_db_connection()
    subjects = []
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT id, name FROM subjects ORDER BY id")
            subjects = cur.fetchall()
    except Exception as e:
        log_error(f"Error fetching subjects: {e}")
        # 繧ｨ繝ｩ繝ｼ譎ゅ・繝・ヵ繧ｩ繝ｫ繝医・遘醍岼繝ｪ繧ｹ繝医ｒ菴ｿ逕ｨ
        subjects = [
            {'id': 1, 'name': '蝗ｽ隱・},
            {'id': 2, 'name': '謨ｰ蟄ｦ'},
            {'id': 3, 'name': '闍ｱ隱・},
            {'id': 4, 'name': '逅・ｧ・},
            {'id': 5, 'name': '遉ｾ莨・},
            {'id': 6, 'name': '髻ｳ讌ｽ'},
            {'id': 7, 'name': '鄒手｡・},
            {'id': 8, 'name': '菴楢ご'},
            {'id': 9, 'name': '謚螳ｶ'}
        ]
    finally:
        conn.close()
    
    # HOPE ROOM隱崎ｨｼ諠・ｱ繧貞叙蠕・    hope_room_login_id = ''
    hope_room_password = ''
    
    try:
        conn = get_db_connection()
        service_name = 'hope_room'
        try:
            with conn.cursor() as cur:
                # 繝・・繝悶Ν縺悟ｭ伜惠縺吶ｋ縺狗｢ｺ隱・                cur.execute("SHOW TABLES LIKE 'external_service_credentials'")
                if cur.fetchone():
                    # 繝・・繝悶Ν縺悟ｭ伜惠縺吶ｋ蝣ｴ蜷医・縺ｿ繧ｯ繧ｨ繝ｪ繧貞ｮ溯｡・                    cur.execute("""
                        SELECT login_id, password FROM external_service_credentials 
                        WHERE user_id = %s AND service_name = %s
                    """, (user_id, service_name))
                    hope_room_credentials = cur.fetchone()
                    if hope_room_credentials:
                        hope_room_login_id = hope_room_credentials['login_id']
                        hope_room_password = hope_room_credentials['password']
        except Exception as e:
            log_error(f"Error fetching HOPE ROOM credentials: {e}")
        finally:
            conn.close()
    except Exception as e:
        log_error(f"Database connection error: {e}")
    
    # 繝・Φ繝励Ξ繝ｼ繝医ｒ繝ｬ繝ｳ繝繝ｪ繝ｳ繧ｰ・・chool_type縺ｨHOPE ROOM隱崎ｨｼ諠・ｱ繧定ｿｽ蜉・・    return render_template(
        'student_performance.html', 
        name=student_name,
        subjects=subjects,
        grade_level=student_grade_level,
        role=student_role,
        user_id=user_id,
        current_year=year,
        teacher_view=teacher_view,
        student_id=user_id,
        school_type=school_type,  # school_type繧偵ユ繝ｳ繝励Ξ繝ｼ繝医↓貂｡縺・        hope_room_login_id=hope_room_login_id,  # HOPE ROOM縺ｮ繝ｭ繧ｰ繧､繝ｳID繧呈ｸ｡縺・        hope_room_password=hope_room_password  # HOPE ROOM縺ｮ繝代せ繝ｯ繝ｼ繝峨ｒ貂｡縺・    )

@app.route('/teacher/dashboard')
def teacher_dashboard():
    """隰帛ｸｫ繝繝・す繝･繝懊・繝・""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return redirect('/myapp/index.cgi/login')
    
    conn = get_db_connection()
    student_count = 0
    try:
        with conn.cursor() as cur:
            # 逕溷ｾ呈焚繧貞叙蠕・            cur.execute("SELECT COUNT(id) as count FROM users WHERE role = 'student'")
            result = cur.fetchone()
            student_count = result['count'] if result else 0
    except Exception as e:
        log_error(f"Error fetching student count: {e}")
    finally:
        conn.close()
    
    return render_template(
        'teacher_dashboard.html',
        name=session.get('user_name', ''),
        student_count=student_count
    )

@app.route('/teacher/student-access-token/<int:student_id>')
def generate_student_access_token(student_id):
    """逕溷ｾ偵い繧ｯ繧ｻ繧ｹ逕ｨ縺ｮ荳譎ゅヨ繝ｼ繧ｯ繝ｳ繧堤函謌舌☆繧帰PI"""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return jsonify({'success': False, 'message': 'Unauthorized'}), 401
    
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            # 逕溷ｾ偵′蟄伜惠縺吶ｋ縺狗｢ｺ隱・            cur.execute("SELECT id, name, role, grade_level FROM users WHERE id = %s AND role = 'student'", (student_id,))
            student = cur.fetchone()
            
            if not student:
                return jsonify({'success': False, 'message': '逕溷ｾ偵′隕九▽縺九ｊ縺ｾ縺帙ｓ'}), 404
        
        # 繧ｻ繝・す繝ｧ繝ｳ菫ｮ豁｣迚・ 繝ｭ繝ｼ繧ｫ繝ｫ繧ｹ繝医Ξ繝ｼ繧ｸ繧貞茜逕ｨ
        # 螳滄圀縺ｮ繧ｷ繧ｹ繝・Β縺ｧ縺ｯ荳譎ゅユ繝ｼ繝悶Ν繧剃ｽｿ縺・∋縺阪〒縺吶′縲∫ｰ｡譏灘ｮ溯｣・→縺励※繧ｻ繝・す繝ｧ繝ｳ繧堤峩謗･菴ｿ逕ｨ縺励∪縺・        access_url = f"/myapp/index.cgi/auth/student-access/{student_id}"
        
        return jsonify({
            'success': True,
            'access_url': access_url
        })
    except Exception as e:
        log_error(f"Error generating student access token: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/auth/student-access/<int:student_id>')
def student_access_with_id(student_id):
    """逕溷ｾ棚D繧剃ｽｿ逕ｨ縺励※逕溷ｾ偵→縺励※繝ｭ繧ｰ繧､繝ｳ縺吶ｋ"""
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            # 逕溷ｾ偵′蟄伜惠縺吶ｋ縺狗｢ｺ隱・            cur.execute("SELECT id, name, role, grade_level FROM users WHERE id = %s AND role = 'student'", (student_id,))
            student = cur.fetchone()
            
            if not student:
                return "逕溷ｾ偵′隕九▽縺九ｊ縺ｾ縺帙ｓ", 404
            
            # 譁ｰ縺励＞繧ｻ繝・す繝ｧ繝ｳ縺ｧ逕溷ｾ偵→縺励※繝ｭ繧ｰ繧､繝ｳ
            session.clear()
            session['user_id'] = student['id']
            session['user_name'] = student['name']
            session['role'] = student['role']
            session['grade_level'] = student['grade_level']
            
            # 逕溷ｾ偵→縺励※縺ｮ繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ蜃ｦ逅・            is_first_login, points = process_login_and_award_points(conn, student['id'])
            if is_first_login and points > 0:
                session['login_bonus'] = points
        
        conn.close()
        
        # 逕溷ｾ偵ム繝・す繝･繝懊・繝峨↓繝ｪ繝繧､繝ｬ繧ｯ繝・        return redirect('/myapp/index.cgi/student/dashboard')
    except Exception as e:
        log_error(f"Error in student access: {e}")
        return "繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆", 500

@app.route('/teacher/student-view/<int:student_id>')
def teacher_student_view(student_id):
    """隰帛ｸｫ縺檎函蠕偵→縺励※髢ｲ隕ｧ縺吶ｋ縺溘ａ縺ｮ蜃ｦ逅・ｼ医そ繝・す繝ｧ繝ｳ繧堤ｶｭ謖√☆繧具ｼ・""
    # 隰帛ｸｫ縺ｮ隱崎ｨｼ遒ｺ隱・    if not session.get('user_id') or session.get('role') != 'teacher':
        return redirect('/myapp/index.cgi/login')
    
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            # 逕溷ｾ偵′蟄伜惠縺吶ｋ縺狗｢ｺ隱・            cur.execute("SELECT id, name, grade_level, school_type FROM users WHERE id = %s AND role = 'student'", (student_id,))
            student = cur.fetchone()
            
            if not student:
                return "逕溷ｾ偵′隕九▽縺九ｊ縺ｾ縺帙ｓ", 404
        
        conn.close()
        
        # 繧ｻ繝・す繝ｧ繝ｳ繧堤ｶｭ謖√＠縺溘∪縺ｾ縲∫函蠕棚D繧貞性繧繝代Λ繝｡繝ｼ繧ｿ縺ｧ繝ｪ繝繧､繝ｬ繧ｯ繝・        # URL縺ｮ繝代Λ繝｡繝ｼ繧ｿ縺ｫ證怜捷蛹悶＠縺殱tudent_id繧貞性繧√ｋ
        # 螳滄圀縺ｮ證怜捷蛹悶・逵∫払縺励※縺・∪縺吶′縲∵悽逡ｪ迺ｰ蠅・〒縺ｯ驕ｩ蛻・↑證怜捷蛹悶′蠢・ｦ√〒縺・        return redirect(f'/myapp/index.cgi/student/dashboard?id={student_id}&teacher_view=true')
        
    except Exception as e:
        log_error(f"Error creating student view: {e}")
        return "繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆", 500

@app.route('/teacher/login-as-student/<int:student_id>')
def teacher_login_as_student(student_id):
    """隰帛ｸｫ縺檎函蠕偵→縺励※繝輔Ν繧｢繧ｯ繧ｻ繧ｹ縺ｧ繝ｭ繧ｰ繧､繝ｳ縺吶ｋ縺溘ａ縺ｮ讖溯・"""
    # 隰帛ｸｫ縺ｮ隱崎ｨｼ遒ｺ隱・    if not session.get('user_id') or session.get('role') != 'teacher':
        return redirect('/myapp/index.cgi/login')
    
    # 隰帛ｸｫ諠・ｱ繧偵ヰ繝・け繧｢繝・・
    teacher_id = session.get('user_id')
    teacher_name = session.get('user_name')
    
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            # 逕溷ｾ偵′蟄伜惠縺吶ｋ縺狗｢ｺ隱・            cur.execute("""
                SELECT id, name, role, grade_level, school_type 
                FROM users 
                WHERE id = %s AND role = 'student'
            """, (student_id,))
            student = cur.fetchone()
            
            if not student:
                return "逕溷ｾ偵′隕九▽縺九ｊ縺ｾ縺帙ｓ", 404
            
            # 繧ｻ繝・す繝ｧ繝ｳ繧堤函蠕呈ュ蝣ｱ縺ｫ鄂ｮ縺肴鋤縺・            session.clear()  # 繧ｻ繝・す繝ｧ繝ｳ繧偵け繝ｪ繧｢
            session['user_id'] = student['id']
            session['user_name'] = student['name']
            session['role'] = student['role']
            session['grade_level'] = student['grade_level']
            
            # 繝舌ャ繧ｯ繧｢繝・・縺励◆隰帛ｸｫ諠・ｱ繧剃ｿ晏ｭ假ｼ亥ｾｩ蟶ｰ逕ｨ・・            session['is_teacher_login'] = True
            session['original_teacher_id'] = teacher_id
            session['original_teacher_name'] = teacher_name
            
            # 逕溷ｾ偵→縺励※繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ蜃ｦ逅・ｼ亥ｮ滄圀縺ｮ繝ｭ繧ｰ繧､繝ｳ縺ｨ蜷後§・・            is_first_login, points = process_login_and_award_points(conn, student['id'])
            if is_first_login and points > 0:
                session['login_bonus'] = points
        
        conn.close()
        
        # 逕溷ｾ偵ム繝・す繝･繝懊・繝峨↓繝ｪ繝繧､繝ｬ繧ｯ繝・        return redirect('/myapp/index.cgi/student/dashboard')
        
    except Exception as e:
        log_error(f"Error in teacher_login_as_student: {e}")
        return "繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆", 500

@app.route('/student/return-to-teacher')
def return_to_teacher():
    """逕溷ｾ偵い繧ｫ繧ｦ繝ｳ繝医°繧牙・縺ｮ隰帛ｸｫ繧｢繧ｫ繧ｦ繝ｳ繝医↓謌ｻ繧・""
    # 隰帛ｸｫ縺ｨ縺励※繝ｭ繧ｰ繧､繝ｳ縺励※縺・ｋ縺九メ繧ｧ繝・け
    if not session.get('is_teacher_login'):
        return redirect('/myapp/index.cgi/login')
    
    # 蜈・・隰帛ｸｫ諠・ｱ繧貞叙蠕・    teacher_id = session.get('original_teacher_id')
    teacher_name = session.get('original_teacher_name')
    
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            # 隰帛ｸｫ繧｢繧ｫ繧ｦ繝ｳ繝医・遒ｺ隱・            cur.execute("""
                SELECT id, role, grade_level
                FROM users 
                WHERE id = %s AND role = 'teacher'
            """, (teacher_id,))
            teacher = cur.fetchone()
            
            if not teacher:
                # 蜈・・隰帛ｸｫ縺瑚ｦ九▽縺九ｉ縺ｪ縺・ｴ蜷医√Ο繧ｰ繧｢繧ｦ繝・                session.clear()
                return redirect('/myapp/index.cgi/login')
            
            # 繧ｻ繝・す繝ｧ繝ｳ繧定ｬ帛ｸｫ諠・ｱ縺ｫ謌ｻ縺・            session.clear()  # 繧ｻ繝・す繝ｧ繝ｳ繧偵け繝ｪ繧｢
            session['user_id'] = teacher_id
            session['user_name'] = teacher_name
            session['role'] = 'teacher'
            session['grade_level'] = teacher.get('grade_level')
        
        conn.close()
        
        # 隰帛ｸｫ繝繝・す繝･繝懊・繝峨↓繝ｪ繝繧､繝ｬ繧ｯ繝・        return redirect('/myapp/index.cgi/teacher/dashboard')
    
    except Exception as e:
        log_error(f"Error in return_to_teacher: {e}")
        return "繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆", 500

@app.route('/hope_room_settings', methods=['GET', 'POST'])
def hope_room_settings():
    """HOPE ROOM繝ｭ繧ｰ繧､繝ｳ險ｭ螳・""
    # 繝ｭ繧ｰ繧､繝ｳ縺励※縺・↑縺・ｴ蜷医・繝ｭ繧ｰ繧､繝ｳ逕ｻ髱｢縺ｸ繝ｪ繝繧､繝ｬ繧ｯ繝・    if not session.get('user_id'):
        return redirect('/myapp/index.cgi/login')
    
    user_id = session.get('user_id')
    error = None
    success = None
    credentials = None
    
    # hope_room_utils 繧偵う繝ｳ繝昴・繝・    try:
        sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))  # 迴ｾ蝨ｨ縺ｮ繝・ぅ繝ｬ繧ｯ繝医Μ繧単ython繝代せ縺ｫ霑ｽ蜉
        from hope_room_utils import get_hope_room_credentials, save_hope_room_credentials
    except ImportError:
        error = "HOPE ROOM繝ｦ繝ｼ繝・ぅ繝ｪ繝・ぅ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ"
        return render_template(
            'hope_room_settings.html',
            credentials=None,
            error=error,
            success=None
        )
    
    conn = get_db_connection()
    
    # POST繝ｪ繧ｯ繧ｨ繧ｹ繝茨ｼ郁ｨｭ螳壽峩譁ｰ・・    if request.method == 'POST':
        login_id = request.form.get('login_id', '').strip()
        password = request.form.get('password', '').strip()
        
        if not login_id or not password:
            error = "繝ｭ繧ｰ繧､繝ｳID縺ｨ繝代せ繝ｯ繝ｼ繝峨ｒ蜈･蜉帙＠縺ｦ縺上□縺輔＞縲・
        else:
            try:
                success = save_hope_room_credentials(conn, user_id, login_id, password)
                if success:
                    success = "HOPE ROOM繝ｭ繧ｰ繧､繝ｳ諠・ｱ繧剃ｿ晏ｭ倥＠縺ｾ縺励◆縲・
                else:
                    error = "繝ｭ繧ｰ繧､繝ｳ諠・ｱ縺ｮ菫晏ｭ倥↓螟ｱ謨励＠縺ｾ縺励◆縲・
            except Exception as e:
                error = f"繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: {str(e)}"
    
    try:
        # 迴ｾ蝨ｨ縺ｮ隱崎ｨｼ諠・ｱ繧貞叙蠕・        credentials = get_hope_room_credentials(conn, user_id)
    except Exception as e:
        error = f"隱崎ｨｼ諠・ｱ縺ｮ蜿門ｾ励↓螟ｱ謨励＠縺ｾ縺励◆: {str(e)}"
    finally:
        conn.close()
    
    return render_template(
        'hope_room_settings.html',
        credentials=credentials,
        error=error,
        success=success
    )

@app.route('/hope-room')
def hope_room_info():
    """HOPE ROOM諠・ｱ陦ｨ遉ｺ"""
    if not session.get('user_id'):
        return redirect('/myapp/index.cgi/login')
    
    user_id = session.get('user_id')
    service_name = 'hope_room'
    
    # 險ｭ螳壽ュ蝣ｱ
    config = {
        'display_name': 'HOPE ROOM',
        'description': '讓｡隧ｦ邨先棡遒ｺ隱阪し繝ｼ繝薙せ',
        'url': 'https://www.hoperoom.jp/Login'
    }
    
    # 隱崎ｨｼ諠・ｱ繧貞叙蠕・    conn = get_db_connection()
    credentials = None
    try:
        with conn.cursor() as cur:
            # 繝・・繝悶Ν縺悟ｭ伜惠縺吶ｋ縺狗｢ｺ隱・            cur.execute("SHOW TABLES LIKE 'external_service_credentials'")
            if cur.fetchone():
                # 繝・・繝悶Ν縺悟ｭ伜惠縺吶ｋ蝣ｴ蜷医・縺ｿ繧ｯ繧ｨ繝ｪ繧貞ｮ溯｡・                cur.execute("""
                    SELECT login_id, password FROM external_service_credentials 
                    WHERE user_id = %s AND service_name = %s
                """, (user_id, service_name))
                credentials = cur.fetchone()
    except Exception as e:
        log_error(f"Error fetching HOPE ROOM credentials: {e}")
    finally:
        conn.close()
    
    # 隱崎ｨｼ諠・ｱ縺後↑縺・ｴ蜷医・繝・せ繝育畑繝・・繧ｿ
    if not credentials:
        credentials = {
            'login_id': 'test_id',
            'password': 'test_password'
        }
    
    return render_template(
        'external_service_info.html', 
        credentials=credentials,
        config=config
    )

@app.route('/myetr')
def myetr_info():
    """e繝医Ξ諠・ｱ陦ｨ遉ｺ"""
    if not session.get('user_id'):
        return redirect('/myapp/index.cgi/login')
    
    user_id = session.get('user_id')
    service_name = 'myetr'
    
    # 險ｭ螳壽ュ蝣ｱ
    config = {
        'display_name': 'MyeTre (e繝医Ξ)',
        'description': '荳蝠丈ｸ遲皮ｷｴ鄙偵し繝ｼ繝薙せ',
        'url': 'https://app.e-tr.biz/MyEtr/'
    }
    
    # 隱崎ｨｼ諠・ｱ繧貞叙蠕・    conn = get_db_connection()
    credentials = None
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT login_id, password FROM external_service_credentials 
                WHERE user_id = %s AND service_name = %s
            """, (user_id, service_name))
            credentials = cur.fetchone()
    except Exception as e:
        log_error(f"Error fetching MyeTre credentials: {e}")
    finally:
        conn.close()
    
    # 隱崎ｨｼ諠・ｱ縺後↑縺・ｴ蜷医・繝・せ繝育畑繝・・繧ｿ
    if not credentials:
        credentials = {
            'login_id': 'test_id',
            'password': 'test_password'
        }
    
    return render_template(
        'external_service_info.html', 
        credentials=credentials,
        config=config
    )

# API髢｢騾｣縺ｮ繧ｨ繝ｳ繝峨・繧､繝ｳ繝・@app.route('/api/student/grades')
def get_student_grades():
    """逕溷ｾ偵・謌千ｸｾ繝・・繧ｿ繧貞叙蠕励☆繧帰PI・亥ｰ丞ｭｦ逕・荳ｭ蟄ｦ逕溘〒蛻・ｲ撰ｼ・""
    if not session.get('user_id'):
        return jsonify({'error': 'Unauthorized'}), 401
    
    # 繧ｯ繧ｨ繝ｪ繝代Λ繝｡繝ｼ繧ｿ縺九ｉ蟄ｦ蟷ｴ繧貞叙蠕暦ｼ域欠螳壹′縺ｪ縺代ｌ縺ｰ迴ｾ蝨ｨ縺ｮ蟄ｦ蟷ｴ・・    grade_year = request.args.get('grade_year', default=session.get('grade_level', 1), type=int)
    
    # 逕溷ｾ棚D繧貞叙蠕暦ｼ医け繧ｨ繝ｪ繝代Λ繝｡繝ｼ繧ｿ縺九ｉ繧ょ叙蠕怜庄閭ｽ縺ｫ・・    student_id = request.args.get('student_id', default=session.get('user_id'), type=int)
    
    # 讓ｩ髯舌メ繧ｧ繝・け - 隰帛ｸｫ縺ｾ縺溘・閾ｪ蛻・・霄ｫ縺ｮ繝・・繧ｿ縺ｮ縺ｿ髢ｲ隕ｧ蜿ｯ閭ｽ
    if session.get('role') != 'teacher' and student_id != session.get('user_id'):
        return jsonify({'error': 'Permission denied'}), 403
    
    try:
        conn = get_db_connection()
        
        # 蟄ｦ譬｡繧ｿ繧､繝励ｒ蜿門ｾ暦ｼ亥ｰ丞ｭｦ逕溘°荳ｭ蟄ｦ逕溘°鬮俶｡逕溘°・・        school_type = None
        with conn.cursor() as cur:
            cur.execute("SELECT school_type FROM users WHERE id = %s", (student_id,))
            user_info = cur.fetchone()
            if user_info:
                school_type = user_info['school_type']
        
        # 蟆丞ｭｦ逕溘・蝣ｴ蜷・        if school_type == 'elementary':
            return get_elementary_grades(conn, student_id, grade_year)
        # 縺昴ｌ莉･螟厄ｼ井ｸｭ蟄ｦ逕溘・鬮俶｡逕滂ｼ峨・蝣ｴ蜷・        else:
            return get_middle_high_grades(conn, student_id, grade_year)
    
    except Exception as e:
        log_error(f"Error getting student grades: {e}")
        return jsonify({'error': str(e)}), 500
    finally:
        if 'conn' in locals():
            conn.close()

def get_elementary_grades(conn, student_id, grade_year):
    """蟆丞ｭｦ逕溘・謌千ｸｾ繝・・繧ｿ繧貞叙蠕励☆繧・""
    try:
        with conn.cursor() as cur:
            # 繝・・繝悶Ν縺ｮ蟄伜惠遒ｺ隱・            ensure_elementary_grades_table(conn)
            
            # 遘醍岼荳隕ｧ繧貞叙蠕・            cur.execute("SELECT id, name FROM subjects WHERE id IN (1, 2, 3) ORDER BY id")
            subjects_data = cur.fetchall()
            
            # 遘醍岼繝・・繧ｿ繧定ｾ樊嶌縺ｫ螟画鋤
            subjects = {}
            for s in subjects_data:
                subjects[str(s['id'])] = s['name']
            
            # 謌千ｸｾ繝・・繧ｿ繧貞叙蠕暦ｼ域怦縺斐→・・            cur.execute("""
                SELECT id, subject, month, score, comment
                FROM elementary_grades
                WHERE student_id = %s AND grade_year = %s
                ORDER BY subject, month
            """, (student_id, grade_year))
            
            grades = cur.fetchall()
        
        # 繝・・繧ｿ繧呈紛蠖｢
        result = {
            'subjects': subjects,
            'scores': {}
        }
        
        # 菫ｮ豁｣: 蟶ｸ縺ｫ蜈ｨ縺ｦ縺ｮ譛医ｒ蜷ｫ繧√ｋ
        months = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3]  # 蟄ｦ譬｡蟷ｴ蠎ｦ縺ｮ蜈ｨ縺ｦ縺ｮ譛・        
        # 繧ｹ繧ｳ繧｢繝・・繧ｿ繧呈紛逅・        for grade in grades:
            subject_id_str = str(grade['subject'])
            month = grade['month']
            
            # 遘醍岼縺ｮ繝・・繧ｿ蛻晄悄蛹・            if subject_id_str not in result['scores']:
                result['scores'][subject_id_str] = {}
            
            # 蜷・怦縺ｮ繧ｹ繧ｳ繧｢繧定ｿｽ蜉
            result['scores'][subject_id_str][month] = {
                'id': grade['id'],
                'score': grade['score'],
                'comment': grade['comment'] or ''
            }
        
        # 譛医Μ繧ｹ繝医ｒAPI繝ｬ繧ｹ繝昴Φ繧ｹ縺ｫ蜷ｫ繧√ｋ
        result['months'] = months
        
        return jsonify(result)
    
    except Exception as e:
        log_error(f"Error getting elementary grades: {e}")
        # 繧ｨ繝ｩ繝ｼ譎ゅｂ蜈ｨ縺ｦ縺ｮ譛医ｒ蜷ｫ繧√ｋ
        return jsonify({
            'subjects': {'1': '蝗ｽ隱・, '2': '邂玲焚', '3': '闍ｱ隱・},
            'scores': {},
            'months': [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3]
        })

def get_middle_high_grades(conn, student_id, grade_year):
    """荳ｭ蟄ｦ逕溘・鬮俶｡逕溘・謌千ｸｾ繝・・繧ｿ繧貞叙蠕励☆繧具ｼ亥・縺ｮ繝ｭ繧ｸ繝・け・・""
    try:
        with conn.cursor() as cur:
            # 遘醍岼荳隕ｧ繧貞叙蠕・            cur.execute("SELECT id, name FROM subjects ORDER BY id")
            subjects_data = cur.fetchall()
            
            # 遘醍岼繝・・繧ｿ繧定ｾ樊嶌縺ｫ螟画鋤
            subjects = {}
            for s in subjects_data:
                subjects[str(s['id'])] = s['name']
            
            # 謌千ｸｾ繝・・繧ｿ繧貞叙蠕・            cur.execute("""
                SELECT g.id, g.subject, g.term, g.score 
                FROM grades g
                WHERE g.student_id = %s AND g.grade_year = %s
                ORDER BY g.subject, g.term
            """, (student_id, grade_year))
            
            grades = cur.fetchall()
            
            # 蜀・筏轤ｹ繝・・繧ｿ繧貞叙蠕・            cur.execute("""
                SELECT ip.id, ip.subject, ip.term, ip.point
                FROM internal_points ip
                WHERE ip.student_id = %s AND ip.grade_year = %s
                ORDER BY ip.subject, ip.term
            """, (student_id, grade_year))
            
            internal_points = cur.fetchall()
        
        # 蜈ｨ遘醍岼ﾃ怜ｭｦ譛溘・謌千ｸｾ繝・・繧ｿ繧呈紛蠖｢
        result = {
            'subjects': subjects,
            'grades': {},
            'internal_points': {}
        }
        
        # 遨ｺ縺ｮ繝・・繧ｿ讒矩繧剃ｽ懈・・亥・遘醍岼ﾃ怜ｭｦ譛滂ｼ・        for subject_id in subjects.keys():
            result['grades'][subject_id] = {
                '1': {'id': None, 'score': None}, 
                '2': {'id': None, 'score': None}, 
                '3': {'id': None, 'score': None}
            }
            result['internal_points'][subject_id] = {
                '1': {'id': None, 'point': None}, 
                '2': {'id': None, 'point': None}, 
                '3': {'id': None, 'point': None}
            }
        
        # 謌千ｸｾ繝・・繧ｿ繧呈ｼ邏・        for grade in grades:
            subject_id_str = str(grade['subject'])
            term_str = str(grade['term'])
            
            if subject_id_str in result['grades'] and term_str in result['grades'][subject_id_str]:
                result['grades'][subject_id_str][term_str] = {
                    'id': grade['id'],
                    'score': grade['score']
                }
        
        # 蜀・筏轤ｹ繝・・繧ｿ繧呈ｼ邏・        for point in internal_points:
            subject_id_str = str(point['subject'])
            term_str = str(point['term'])
            
            if subject_id_str in result['internal_points'] and term_str in result['internal_points'][subject_id_str]:
                result['internal_points'][subject_id_str][term_str] = {
                    'id': point['id'],
                    'point': point['point']
                }
        
        return jsonify(result)
    except Exception as e:
        log_error(f"Error getting middle/high grades: {e}")
        # 繧ｨ繝ｩ繝ｼ譎ゅ・繝・ヵ繧ｩ繝ｫ繝医ョ繝ｼ繧ｿ繧定ｿ斐☆
        dummy_subjects = {
            '1': '蝗ｽ隱・, '2': '謨ｰ蟄ｦ', '3': '闍ｱ隱・, '4': '逅・ｧ・, '5': '遉ｾ莨・,
            '6': '髻ｳ讌ｽ', '7': '鄒手｡・, '8': '菴楢ご', '9': '謚螳ｶ'
        }
        result = {
            'subjects': dummy_subjects,
            'grades': {},
            'internal_points': {}
        }
        
        # 遨ｺ縺ｮ繝・・繧ｿ讒矩繧剃ｽ懈・・医し繝ｳ繝励Ν繝・・繧ｿ・・        for subject_id in dummy_subjects.keys():
            result['grades'][subject_id] = {
                '1': {'id': None, 'score': 75}, 
                '2': {'id': None, 'score': 80}, 
                '3': {'id': None, 'score': 85}
            }
            result['internal_points'][subject_id] = {
                '1': {'id': None, 'point': 3}, 
                '2': {'id': None, 'point': 4}, 
                '3': {'id': None, 'point': 5}
            }
            
        return jsonify(result)

@app.route('/api/student/update-grade', methods=['POST'])
def update_student_grade():
    """逕溷ｾ偵・謌千ｸｾ繝・・繧ｿ繧呈峩譁ｰ縺吶ｋAPI・医・繝ｼ繝翫せ閾ｪ蜍穂ｻ倅ｸ弱↑縺暦ｼ・""
    # 繝ｭ繧ｰ繧､繝ｳ繝√ぉ繝・け
    if not session.get('user_id'):
        return jsonify({'error': 'Unauthorized'}), 401
        
    data = request.json
    if not data:
        return jsonify({'error': 'No data provided'}), 400
    
    student_id = data.get('student_id')
    grade_year = data.get('grade_year')
    subject_id = data.get('subject_id')
    term = data.get('term')
    score = data.get('score')
    grade_id = data.get('grade_id')  # 譌｢蟄倥・謌千ｸｾ縺ｮ蝣ｴ蜷医・ID
    
    if not all([student_id, grade_year, subject_id, term]) or score is None:
        return jsonify({'error': 'Missing required fields'}), 400
    
    # 讓ｩ髯舌メ繧ｧ繝・け - 閾ｪ蛻・・霄ｫ縺ｾ縺溘・隰帛ｸｫ縺ｮ縺ｿ邱ｨ髮・庄閭ｽ
    if int(student_id) != int(session.get('user_id')) and session.get('role') != 'teacher':
        return jsonify({'error': 'Permission denied'}), 403
    
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            if grade_id:  # 譖ｴ譁ｰ
                cur.execute("""
                    UPDATE grades
                    SET score = %s
                    WHERE id = %s AND student_id = %s
                """, (score, grade_id, student_id))
            else:  # 譁ｰ隕剰ｿｽ蜉
                # 蜷後§譚｡莉ｶ縺ｮ繝・・繧ｿ縺梧里縺ｫ縺ゅｋ縺狗｢ｺ隱・                cur.execute("""
                    SELECT id FROM grades
                    WHERE student_id = %s AND grade_year = %s AND subject = %s AND term = %s
                """, (student_id, grade_year, subject_id, term))
                
                existing = cur.fetchone()
                if existing:
                    # 譌｢蟄倥Ξ繧ｳ繝ｼ繝峨・譖ｴ譁ｰ
                    cur.execute("""
                        UPDATE grades
                        SET score = %s
                        WHERE id = %s
                    """, (score, existing['id']))
                    grade_id = existing['id']
                else:
                    # 譁ｰ隕上Ξ繧ｳ繝ｼ繝峨・謖ｿ蜈･
                    cur.execute("""
                        INSERT INTO grades (student_id, grade_year, subject, term, score)
                        VALUES (%s, %s, %s, %s, %s)
                    """, (student_id, grade_year, subject_id, term, score))
                    grade_id = cur.lastrowid
            
            # 繝ｦ繝ｼ繧ｶ繝ｼ縺ｮ蟄ｦ譬｡繧ｿ繧､繝励ｒ蜿門ｾ・            cur.execute("SELECT role, grade_level, school_type FROM users WHERE id = %s", (student_id,))
            user = cur.fetchone()
            
            improvement_info = None
            
            if user and user['role'] == 'student':
                school_type = user['school_type']
                try:
                    if school_type == 'elementary':
                        # 蟆丞ｭｦ逕溘・蝣ｴ蜷・                        from elementary_grade_utils import check_elementary_grade_improvement
                        success, result = check_elementary_grade_improvement(
                            conn, student_id, grade_year, term, subject_id, score
                        )
                        if success:
                            improvement_info = {
                                'detected': True,
                                'level': result['level'],
                                'difference': result['score_difference'],
                                'message': f"謌千ｸｾ縺鶏result['score_difference']}轤ｹ蜷台ｸ翫＠縺ｾ縺励◆・∬ｬ帛ｸｫ縺檎｢ｺ隱榊ｾ後↓繝懊・繝翫せ繝昴う繝ｳ繝医′莉倅ｸ弱＆繧後∪縺吶・
                            }
                        else:
                            log_error(f"蟆丞ｭｦ逕滓・邵ｾ蜷台ｸ翫メ繧ｧ繝・け邨先棡: {result}")
                    elif school_type == 'high':
                        # 鬮俶｡逕溘・蝣ｴ蜷・                        from high_school_grade_utils import check_high_school_grade_improvement
                        success, result = check_high_school_grade_improvement(
                            conn, student_id, grade_year, term, subject_id, score
                        )
                        if success:
                            improvement_info = {
                                'detected': True,
                                'level': result['level'],
                                'difference': result['score_difference'],
                                'message': f"謌千ｸｾ縺鶏result['score_difference']}轤ｹ蜷台ｸ翫＠縺ｾ縺励◆・∬ｬ帛ｸｫ縺檎｢ｺ隱榊ｾ後↓繝懊・繝翫せ繝昴う繝ｳ繝医′莉倅ｸ弱＆繧後∪縺吶・
                            }
                        else:
                            log_error(f"鬮俶｡逕滓・邵ｾ蜷台ｸ翫メ繧ｧ繝・け邨先棡: {result}")
                except Exception as e:
                    log_error(f"謌千ｸｾ蜷台ｸ翫メ繧ｧ繝・け繧ｨ繝ｩ繝ｼ: {e}")
        
        conn.commit()
        
        result = {
            'success': True,
            'grade_id': grade_id
        }
        
        # 謌千ｸｾ蜷台ｸ頑ュ蝣ｱ縺後≠繧後・霑ｽ蜉・郁・蜍穂ｻ倅ｸ弱〒縺ｯ縺ｪ縺城夂衍縺ｮ縺ｿ・・        if improvement_info:
            result['improvement'] = improvement_info
        
        return jsonify(result)
    
    except Exception as e:
        log_error(f"Error updating grade: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/student/update-internal-point', methods=['POST'])
def update_student_internal_point():
    """逕溷ｾ偵・蜀・筏轤ｹ繝・・繧ｿ繧呈峩譁ｰ縺吶ｋAPI"""
    # 繝ｭ繧ｰ繧､繝ｳ繝√ぉ繝・け
    if not session.get('user_id'):
        return jsonify({'error': 'Unauthorized'}), 401
        
    data = request.json
    if not data:
        return jsonify({'error': 'No data provided'}), 400
    
    student_id = data.get('student_id')
    grade_year = data.get('grade_year')
    subject_id = data.get('subject_id')
    term = data.get('term')
    point = data.get('point')
    point_id = data.get('point_id')  # 譌｢蟄倥・蜀・筏轤ｹ縺ｮ蝣ｴ蜷医・ID
    
    if not all([student_id, grade_year, subject_id, term]) or point is None:
        return jsonify({'error': 'Missing required fields'}), 400
    
    # 讓ｩ髯舌メ繧ｧ繝・け - 閾ｪ蛻・・霄ｫ縺ｾ縺溘・隰帛ｸｫ縺ｮ縺ｿ邱ｨ髮・庄閭ｽ
    if int(student_id) != int(session.get('user_id')) and session.get('role') != 'teacher':
        return jsonify({'error': 'Permission denied'}), 403
    
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            if point_id:  # 譖ｴ譁ｰ
                cur.execute("""
                    UPDATE internal_points
                    SET point = %s
                    WHERE id = %s AND student_id = %s
                """, (point, point_id, student_id))
            else:  # 譁ｰ隕剰ｿｽ蜉
                # 蜷後§譚｡莉ｶ縺ｮ繝・・繧ｿ縺梧里縺ｫ縺ゅｋ縺狗｢ｺ隱・                cur.execute("""
                    SELECT id FROM internal_points
                    WHERE student_id = %s AND grade_year = %s AND subject = %s AND term = %s
                """, (student_id, grade_year, subject_id, term))
                
                existing = cur.fetchone()
                if existing:
                    # 譌｢蟄倥Ξ繧ｳ繝ｼ繝峨・譖ｴ譁ｰ
                    cur.execute("""
                        UPDATE internal_points
                        SET point = %s
                        WHERE id = %s
                    """, (point, existing['id']))
                    point_id = existing['id']
                else:
                    # 譁ｰ隕上Ξ繧ｳ繝ｼ繝峨・謖ｿ蜈･
                    cur.execute("""
                        INSERT INTO internal_points (student_id, grade_year, subject, term, point)
                        VALUES (%s, %s, %s, %s, %s)
                    """, (student_id, grade_year, subject_id, term, point))
                    point_id = cur.lastrowid
            
            # 繝ｦ繝ｼ繧ｶ繝ｼ縺ｮ蟄ｦ譬｡繧ｿ繧､繝励ｒ蜿門ｾ・            cur.execute("SELECT role, grade_level, school_type FROM users WHERE id = %s", (student_id,))
            user = cur.fetchone()
            
            improvement_info = None
            
            if user and user['role'] == 'student' and user['school_type'] == 'middle':
                try:
                    # 荳ｭ蟄ｦ逕溘・蝣ｴ蜷医∝・逕ｳ轤ｹ蜷台ｸ企夂衍繧貞・逅・                    from internal_points_notification import check_internal_point_improvement
                    success, result = check_internal_point_improvement(
                        conn, student_id, grade_year, term, subject_id, point
                    )
                    if success:
                        improvement_info = {
                            'detected': True,
                            'level': result['level'],
                            'difference': result['improvement'],
                            'message': f"蜀・筏轤ｹ縺鶏result['improvement']}繝昴う繝ｳ繝亥髄荳翫＠縺ｾ縺励◆・∬ｬ帛ｸｫ縺檎｢ｺ隱榊ｾ後↓繝懊・繝翫せ繝昴う繝ｳ繝医′莉倅ｸ弱＆繧後∪縺吶・
                        }
                    else:
                        log_error(f"蜀・筏轤ｹ蜷台ｸ翫メ繧ｧ繝・け邨先棡: {result}")
                except Exception as e:
                    log_error(f"蜀・筏轤ｹ蜷台ｸ翫メ繧ｧ繝・け繧ｨ繝ｩ繝ｼ: {e}")
        
        conn.commit()
        
        result = {
            'success': True,
            'point_id': point_id
        }
        
        # 蜀・筏轤ｹ蜷台ｸ頑ュ蝣ｱ縺後≠繧後・霑ｽ蜉
        if improvement_info:
            result['improvement'] = improvement_info
        
        return jsonify(result)
    
    except Exception as e:
        log_error(f"Error updating internal point: {e}")
        return jsonify({'error': str(e)}), 500
    finally:
        if 'conn' in locals():
            conn.close()

@app.route('/api/student/preferences')
def get_student_preferences():
    """逕溷ｾ偵・蠢玲悍譬｡諠・ｱ繧貞叙蠕励☆繧帰PI"""
    if not session.get('user_id'):
        return jsonify({'error': 'Unauthorized'}), 401
    
    # 繝ｦ繝ｼ繧ｶ繝ｼID繧貞叙蠕暦ｼ医け繧ｨ繝ｪ繝代Λ繝｡繝ｼ繧ｿ縺九ｉ繧ょ叙蠕怜庄閭ｽ縺ｫ・・    user_id = request.args.get('student_id', default=session.get('user_id'), type=int)
    
    # 讓ｩ髯舌メ繧ｧ繝・け - 隰帛ｸｫ縺ｾ縺溘・閾ｪ蛻・・霄ｫ縺ｮ繝・・繧ｿ縺ｮ縺ｿ髢ｲ隕ｧ蜿ｯ閭ｽ
    if session.get('role') != 'teacher' and user_id != session.get('user_id'):
        return jsonify({'error': 'Permission denied'}), 403
    
    try:
        conn = get_db_connection()
        preferences = []
        
        with conn.cursor() as cur:
            # 蠢玲悍譬｡諠・ｱ繧貞叙蠕・            cur.execute("""
                SELECT p.id, p.preference_order, h.id as high_school_id, h.name, 
                       h.district, h.course_type, h.min_required_points, 
                       h.avg_accepted_points, h.competition_rate,
                       h.deviation_score, h.survey_report_total, 
                       h.university_advancement_rate, h.strong_club_activities
                FROM user_high_school_preferences p
                JOIN high_schools h ON p.high_school_id = h.id
                WHERE p.user_id = %s
                ORDER BY p.preference_order
                LIMIT 3
            """, (user_id,))
            
            preferences = cur.fetchall()
        
        return jsonify({
            'success': True,
            'preferences': preferences
        })
    
    except Exception as e:
        log_error(f"Error fetching preferences: {e}")
        return jsonify({'error': str(e)}), 500
    finally:
        if 'conn' in locals():
            conn.close()

@app.route('/api/calendar-events')
def calendar_events():
    """Google繧ｫ繝ｬ繝ｳ繝繝ｼ縺ｮ繧､繝吶Φ繝医ｒ蜿門ｾ励☆繧帰PI"""
    try:
        # Google Calendar縺九ｉ繧､繝吶Φ繝医ｒ蜿門ｾ・        events = get_google_calendar_events()
        
        # 繧､繝吶Φ繝医′蜿門ｾ励〒縺阪↑縺九▲縺溷ｴ蜷医・髱咏噪繝・・繧ｿ繧定ｿ斐☆
        if events is None:
            current_year = datetime.now().year
            current_month = datetime.now().month
            current_day = datetime.now().day
            
            # 迴ｾ蝨ｨ譌･莉倥°繧・縺区怦蜈医∪縺ｧ縺ｮ繝繝溘・繧､繝吶Φ繝・            events = [
                {
                    'title': '莨第｡譌･',
                    'start': f'{current_year}-{current_month:02d}-{(current_day + 5) % 28 + 1}',
                    'backgroundColor': '#e67c73',  # 襍､濶ｲ
                    'allDay': True
                },
                {
                    'title': '讓｡謫ｬ隧ｦ鬨・,
                    'start': f'{current_year}-{current_month:02d}-{(current_day + 10) % 28 + 1}',
                    'backgroundColor': '#33b679',  # 邱題牡
                    'allDay': True
                },
                {
                    'title': '菫晁ｭｷ閠・ｼ・,
                    'start': f'{current_year}-{(current_month % 12) + 1:02d}-15',
                    'backgroundColor': '#039be5',  # 髱定牡
                    'allDay': True
                }
            ]
        
        return jsonify(events)
        
    except Exception as e:
        log_error(f"Error fetching calendar events: {e}")
        # 繧ｨ繝ｩ繝ｼ譎ゅ・遨ｺ縺ｮ繝ｪ繧ｹ繝医ｒ霑斐☆
        return jsonify([])

@app.route('/api/eiken-schedule')
def eiken_schedule_api():
    """闍ｱ讀懊せ繧ｱ繧ｸ繝･繝ｼ繝ｫ繧貞叙蠕励☆繧帰PI"""
    eiken_data = [
        {'round': '隨ｬ1蝗・, 'application_period': '2025蟷ｴ3/24・・/7', 'first_exam': '2025蟷ｴ6/1(譌･)', 'second_exam': '2025蟷ｴ7/6(譌･)'},
        {'round': '隨ｬ2蝗・, 'application_period': '2025蟷ｴ7/1・・/8', 'first_exam': '2025蟷ｴ10/5(譌･)', 'second_exam': '2025蟷ｴ11/9(譌･)'},
        {'round': '隨ｬ3蝗・, 'application_period': '2025蟷ｴ10/31・・2/15', 'first_exam': '2026蟷ｴ1/25(譌･)', 'second_exam': '2026蟷ｴ3/1(譌･)'}
    ]
    
    return jsonify(eiken_data)

@app.route('/logout')
def logout():
    """繝ｭ繧ｰ繧｢繧ｦ繝亥・逅・""
    session.clear()
    return redirect('/myapp/index.cgi/login')

# CSV繝輔ぃ繧､繝ｫ縺九ｉ鬮俶｡諠・ｱ繧偵う繝ｳ繝昴・繝医☆繧矩未謨ｰ
def import_high_schools_from_csv(file_content, year, user_id):
    """CSV繝輔ぃ繧､繝ｫ縺九ｉ鬮俶｡諠・ｱ繧偵う繝ｳ繝昴・繝医☆繧矩未謨ｰ"""
    try:
        import csv
        import io
        
        # BOM縺御ｻ倥＞縺ｦ縺・ｋ蝣ｴ蜷医・蜃ｦ逅・        if file_content.startswith('\ufeff'):
            file_content = file_content[1:]  # BOM繧帝勁蜴ｻ
            log_error("BOM縺梧､懷・縺輔ｌ縺ｾ縺励◆縲る勁蜴ｻ縺励※蜃ｦ逅・ｒ邯夊｡後＠縺ｾ縺吶・)
        
        # CSV繝輔ぃ繧､繝ｫ繧定ｪｭ縺ｿ霎ｼ繧
        csv_data = io.StringIO(file_content)
        
        # 縺ｾ縺壹・繝・ム繝ｼ陦後ｒ遒ｺ隱・        first_line = csv_data.readline().strip()
        csv_data.seek(0)  # 繝輔ぃ繧､繝ｫ繝昴う繝ｳ繧ｿ繧貞・鬆ｭ縺ｫ謌ｻ縺・        
        # 繝倥ャ繝繝ｼ陦後・蜀・ｮｹ繧偵Ο繧ｰ縺ｫ蜃ｺ蜉幢ｼ医ョ繝舌ャ繧ｰ逕ｨ・・        log_error(f"CSV繝倥ャ繝繝ｼ陦・ {first_line}")
        
        # 繝倥ャ繝繝ｼ繧呈焔蜍輔〒繝代・繧ｹ縺励※遒ｺ隱・        header = first_line.split(',')
        if not '蜷咲ｧｰ' in header:
            log_error(f"蠢・亥・縲悟錐遘ｰ縲阪′隕九▽縺九ｊ縺ｾ縺帙ｓ縲よ､懷・縺輔ｌ縺溘・繝・ム繝ｼ: {header}")
            return {
                'success': False,
                'message': 'CSV繝輔ぃ繧､繝ｫ縺ｫ蠢・医き繝ｩ繝縲悟錐遘ｰ縲阪′縺ゅｊ縺ｾ縺帙ｓ',
                'count': 0,
                'errors': ['CSV繝輔ぃ繧､繝ｫ縺ｫ蠢・医き繝ｩ繝縲悟錐遘ｰ縲阪′縺ゅｊ縺ｾ縺帙ｓ', f'讀懷・縺輔ｌ縺溘・繝・ム繝ｼ: {", ".join(header)}'],
                'warnings': []
            }
        
        # DictReader縺ｧCSV繧定ｪｭ縺ｿ霎ｼ繧
        reader = csv.DictReader(csv_data)
        
        if not reader.fieldnames:
            return {
                'success': False,
                'message': 'CSV繝輔ぃ繧､繝ｫ縺ｮ繝倥ャ繝繝ｼ陦後ｒ隱崎ｭ倥〒縺阪∪縺帙ｓ縺ｧ縺励◆',
                'count': 0,
                'errors': ['CSV繝輔ぃ繧､繝ｫ縺ｮ繝倥ャ繝繝ｼ陦後ｒ隱崎ｭ倥〒縺阪∪縺帙ｓ縺ｧ縺励◆'],
                'warnings': []
            }
        
        # 繧ｫ繝ｩ繝蜷阪・繝槭ャ繝斐Φ繧ｰ・・SV縺ｮ蛻怜錐 竊・DB縺ｮ繧ｫ繝ｩ繝蜷搾ｼ・        column_mapping = {
            '蜷咲ｧｰ': 'name',
            '繧ｳ繝ｼ繧ｹ': 'course_type',
            '蝨ｰ蛹ｺ': 'district',
            '蜀・筏逶ｮ螳・: 'min_required_points',
            '蟷ｳ蝮・粋譬ｼ蜀・筏': 'avg_accepted_points',
            '隱ｿ譟ｻ譖ｸ蜷郁ｨ・: 'survey_report_total',
            '蛛丞ｷｮ蛟､': 'deviation_score',
            '譛ｬ逡ｪ轤ｹ謨ｰ逶ｮ螳・: 'actual_score_guideline',
            '蛟咲紫': 'competition_rate',
            '2021蟷ｴ蛟咲紫': 'competition_rate_2021',
            '2022蟷ｴ蛟咲紫': 'competition_rate_2022',
            '2023蟷ｴ蛟咲紫': 'competition_rate_2023',
            '2024蟷ｴ蛟咲紫': 'competition_rate_2024',
            '騾ｲ蟄ｦ螳溽ｸｾ・亥嵜遶具ｼ・: 'national_university_rate',
            '騾ｲ蟄ｦ螳溽ｸｾ・域掠諷ｶ荳顔炊ICU・・: 'prestige_university_rate',
            '騾ｲ蟄ｦ螳溽ｸｾ・・ARCH・・: 'march_university_rate',
            '螟ｧ蟄ｦ騾ｲ蟄ｦ蜑ｲ蜷・: 'university_advancement_rate',
            '蟆る摩蜑ｲ蜷・: 'vocational_school_rate',
            '蟆ｱ閨ｷ蜑ｲ蜷・: 'employment_rate',
            '蠑ｷ縺・Κ豢ｻ': 'strong_club_activities',
            '陦御ｺ・: 'events',
            '蛻ｶ譛・: 'uniform',
            '譬｡蜑・: 'school_rules',
            '豬ｷ閠∝錐鬧・°繧峨・譎る俣': 'time_from_ebina',
            '譛蟇・ｊ縺九ｉ縺ｮ霍晞屬': 'distance_from_nearest',
            '迚ｹ蠕ｴ': 'features'
        }
        
        # 謨ｰ蛟､蝙九・繧ｫ繝ｩ繝・域枚蟄怜・縺九ｉ謨ｰ蛟､縺ｫ螟画鋤縺吶ｋ繧ｫ繝ｩ繝・・        numeric_columns = [
            'min_required_points', 'avg_accepted_points', 'survey_report_total',
            'deviation_score', 'actual_score_guideline', 'competition_rate',
            'competition_rate_2021', 'competition_rate_2022', 'competition_rate_2023', 
            'competition_rate_2024', 'university_advancement_rate', 'vocational_school_rate', 
            'employment_rate', 'time_from_ebina', 'distance_from_nearest'
        ]
        
        # 繝・・繧ｿ繝吶・繧ｹ謗･邯・        conn = get_db_connection()
        errors = []
        warnings = []
        
        try:
            with conn.cursor() as cur:
                # 譌｢蟄倥・繝・・繝悶Ν讒矩繧貞叙蠕・                cur.execute("SHOW COLUMNS FROM high_schools")
                columns_info = cur.fetchall()
                column_types = {col['Field']: col['Type'] for col in columns_info}
                
                # 蜷後§蟷ｴ蠎ｦ縺ｮ繝・・繧ｿ繧貞炎髯､
                cur.execute("DELETE FROM high_schools WHERE year = %s", (year,))
                
                # 譁ｰ縺励＞繝・・繧ｿ繧呈諺蜈･
                schools = []
                rows = list(reader)
                
                # 繝・・繧ｿ陦後′縺ｪ縺・ｴ蜷・                if not rows:
                    return {
                        'success': False,
                        'message': 'CSV繝輔ぃ繧､繝ｫ縺ｫ繝・・繧ｿ陦後′縺ゅｊ縺ｾ縺帙ｓ',
                        'count': 0,
                        'errors': ['CSV繝輔ぃ繧､繝ｫ縺ｫ繝・・繧ｿ陦後′縺ゅｊ縺ｾ縺帙ｓ'],
                        'warnings': []
                    }
                
                for i, row in enumerate(rows, start=2):  # 2陦檎岼縺九ｉ繝・・繧ｿ髢句ｧ具ｼ医・繝・ム繝ｼ縺・陦檎岼・・                    # 鬮俶｡蜷搾ｼ亥ｿ・磯・岼・峨・讀懆ｨｼ
                    if '蜷咲ｧｰ' not in row or not row['蜷咲ｧｰ'].strip():
                        errors.append(f"繧ｨ繝ｩ繝ｼ・郁｡・{i}・・ 鬮俶｡蜷阪′遨ｺ谺・〒縺・)
                        continue
                    
                    school_data = {
                        'year': year,
                        'district': '逾槫･亥ｷ晉恁',  # 繝・ヵ繧ｩ繝ｫ繝亥､
                        'course_type': '譎ｮ騾夂ｧ・  # 繝・ヵ繧ｩ繝ｫ繝亥､
                    }
                    
                    # CSV縺ｮ蜷・き繝ｩ繝繧奪B縺ｮ繧ｫ繝ｩ繝蜷阪↓螟画鋤縺励※繝・・繧ｿ繧呈ｼ邏・                    for csv_col, db_col in column_mapping.items():
                        if csv_col in row and row[csv_col]:
                            value = row[csv_col].strip()
                            
                            # 謨ｰ蛟､蝙九・繧ｫ繝ｩ繝縺ｯ螟画鋤
                            if db_col in numeric_columns and value:
                                try:
                                    # 繧ｫ繝ｳ繝槭・縺ｪ縺ｩ繧帝勁蜴ｻ
                                    clean_value = value.replace(',', '').replace('%', '')
                                    
                                    # 謨ｰ蛟､縺ｫ螟画鋤縺ｧ縺阪↑縺・､縺ｮ蜃ｦ逅・                                    if clean_value.isdigit() or (clean_value.replace('.', '', 1).isdigit() and clean_value.count('.') < 2):
                                        school_data[db_col] = float(clean_value)
                                    else:
                                        # 謨ｰ蛟､縺ｫ螟画鋤縺ｧ縺阪↑縺・ｴ蜷医・隴ｦ蜻翫ｒ霑ｽ蜉
                                        warnings.append(f"隴ｦ蜻奇ｼ郁｡・{i}・・ '{csv_col}'縺ｮ蛟､ '{value}' 縺ｯ謨ｰ蛟､縺ｫ螟画鋤縺ｧ縺阪∪縺帙ｓ")
                                        # 譁・ｭ怜・繝・・繧ｿ縺ｯ縺昴・縺ｾ縺ｾ蜷ｫ繧√↑縺・ｼ域焚蛟､蝙九き繝ｩ繝縺ｪ縺ｮ縺ｧ・・                                except ValueError:
                                    warnings.append(f"隴ｦ蜻奇ｼ郁｡・{i}・・ '{csv_col}'縺ｮ蛟､ '{value}' 縺ｯ謨ｰ蛟､縺ｫ螟画鋤縺ｧ縺阪∪縺帙ｓ")
                                    # 螟画鋤縺ｧ縺阪↑縺・ｴ蜷医・繝輔ぅ繝ｼ繝ｫ繝峨ｒ蜷ｫ繧√↑縺・                            else:
                                # 繝・く繧ｹ繝医ョ繝ｼ繧ｿ縺ｯ縺昴・縺ｾ縺ｾ
                                school_data[db_col] = value
                    
                    # 譛譁ｰ縺ｮ蛟咲紫繧団ompetition_rate縺ｫ險ｭ螳夲ｼ育ｫｶ蜷医′縺ｪ縺・ｴ蜷茨ｼ・                    if 'competition_rate' not in school_data:
                        for year_col in ['competition_rate_2024', 'competition_rate_2023', 
                                         'competition_rate_2022', 'competition_rate_2021']:
                            if year_col in school_data and school_data[year_col]:
                                school_data['competition_rate'] = school_data[year_col]
                                break
                    
                    # SQL譁・・讒狗ｯ・                    sql_cols = []
                    sql_vals = []
                    params = []
                    
                    # 菴ｿ逕ｨ縺吶ｋ繧ｫ繝ｩ繝蜷阪ｒ蜿門ｾ・                    cur.execute("SHOW COLUMNS FROM high_schools")
                    db_columns = [col['Field'] for col in cur.fetchall()]
                    
                    # 螳滄圀縺ｫ蟄伜惠縺吶ｋ繧ｫ繝ｩ繝縺ｮ縺ｿ繧担QL縺ｫ蜷ｫ繧√ｋ
                    for col in db_columns:
                        if col in school_data:
                            # 繧ｫ繝ｩ繝縺ｮ蝙九ｒ繝√ぉ繝・け
                            col_type = column_types.get(col, '').lower()
                            
                            # 謨ｰ蛟､蝙九・繧ｫ繝ｩ繝縺ｧ繝・・繧ｿ蝙九・讀懆ｨｼ
                            is_numeric = any(t in col_type for t in ['int', 'float', 'double', 'decimal'])
                            
                            # 謨ｰ蛟､蝙九き繝ｩ繝縺ｫ繝・・繧ｿ縺梧枚蟄怜・縺ｮ蝣ｴ蜷医・繧ｹ繧ｭ繝・・
                            if is_numeric and isinstance(school_data[col], str):
                                warnings.append(f"隴ｦ蜻奇ｼ郁｡・{i}・・ '{col}'縺ｮ蛟､ '{school_data[col]}' 縺ｯ謨ｰ蛟､蝙九↓螟画鋤縺ｧ縺阪★縲√せ繧ｭ繝・・縺励∪縺・)
                                continue
                            
                            sql_cols.append(col)
                            sql_vals.append('%s')
                            params.append(school_data[col])
                    
                    if sql_cols:
                        sql = f"""
                            INSERT INTO high_schools 
                            ({', '.join(sql_cols)})
                            VALUES ({', '.join(sql_vals)})
                        """
                        
                        # SQL繧貞ｮ溯｡・                        try:
                            cur.execute(sql, params)
                            schools.append(school_data)
                        except Exception as e:
                            errors.append(f"繧ｨ繝ｩ繝ｼ・郁｡・{i}・・ 繝・・繧ｿ繝吶・繧ｹ謖ｿ蜈･螟ｱ謨・- {e}")
                            log_error(f"Row {i} insert error: {e} - SQL: {sql} - Params: {params}")
                
                # 繧､繝ｳ繝昴・繝亥ｱ･豁ｴ繧定ｨ倬鹸
                csv_columns = list(column_mapping.keys())
                
                cur.execute("""
                    INSERT INTO high_school_import_history 
                    (year, imported_by, record_count, file_name, import_method, excel_columns)
                    VALUES (%s, %s, %s, %s, %s, %s)
                """, (
                    year, 
                    user_id, 
                    len(schools), 
                    "Imported_CSV_File.csv",
                    'CSV',
                    json.dumps(csv_columns)
                ))
            
            conn.commit()
            
           # 邨先棡繧定ｿ斐☆
            result = {
                'success': True,
                'message': f"{len(schools)}莉ｶ縺ｮ鬮俶｡諠・ｱ繧貞叙蠕励＠縺ｾ縺励◆・・year}蟷ｴ蠎ｦ・・,
                'count': len(schools),
                'errors': errors,
                'warnings': warnings
            }
            
            # 繧ｨ繝ｩ繝ｼ縺・縺､縺ｧ繧ゅ≠繧後・螟ｱ謨励→縺ｿ縺ｪ縺・            if errors:
                result['success'] = False
                if not result['message'].startswith('繧ｨ繝ｩ繝ｼ'):
                    result['message'] = f"繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: {errors[0]}"
            
            return result
            
        except Exception as e:
            conn.rollback()
            log_error(f"Database error in CSV import: {e}")
            return {
                'success': False,
                'message': f"繝・・繧ｿ繝吶・繧ｹ繧ｨ繝ｩ繝ｼ: {str(e)}",
                'count': 0,
                'errors': [f"繝・・繧ｿ繝吶・繧ｹ繧ｨ繝ｩ繝ｼ: {str(e)}"],
                'warnings': warnings
            }
        finally:
            conn.close()
            
    except Exception as e:
        log_error(f"CSV read error: {e}")
        return {
            'success': False,
            'message': f"CSV隱ｭ縺ｿ霎ｼ縺ｿ繧ｨ繝ｩ繝ｼ: {str(e)}",
            'count': 0,
            'errors': [f"CSV隱ｭ縺ｿ霎ｼ縺ｿ繧ｨ繝ｩ繝ｼ: {str(e)}"],
            'warnings': []
        }



# 蜀・筏轤ｹ繝・・繝悶Ν繧剃ｽ懈・縺吶ｋ髢｢謨ｰ
def create_internal_points_table(conn):
    """internal_points 繝・・繝悶Ν繧剃ｽ懈・縺吶ｋ"""
    try:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS internal_points (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    student_id INT NOT NULL,
                    grade_year INT NOT NULL,
                    subject INT NOT NULL,
                    term INT NOT NULL,
                    point INT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    UNIQUE KEY(student_id, grade_year, subject, term),
                    INDEX(student_id, grade_year)
                )
            """)
            log_error("internal_points 繝・・繝悶Ν繧堤｢ｺ隱・菴懈・縺励∪縺励◆")
            conn.commit()
    except Exception as e:
        log_error(f"Error creating internal_points table: {e}")
        conn.rollback()

# 蜀・筏轤ｹ蜷郁ｨ郁ｨ育ｮ鈴未謨ｰ
def calculate_current_internal_points(user_id):
    """逕溷ｾ偵・迴ｾ蝨ｨ縺ｮ蜀・筏轤ｹ蜷郁ｨ医ｒ險育ｮ励☆繧具ｼ・蟷ｴ逕・蟄ｦ譛・+ 3蟷ｴ逕・蟄ｦ譛淌・・・ 譛邨ゆｿｮ豁｣迚・""
    conn = get_db_connection()
    result = {
        'total': 0,
        'details': [],
        'second_year_points': [],
        'third_year_points': [],
        'calculation_method': '2蟷ｴ逕・蟄ｦ譛・+ 3蟷ｴ逕・蟄ｦ譛淌・'
    }
    
    try:
        with conn.cursor() as cur:
            # 逕溷ｾ偵・繧ｰ繝ｬ繝ｼ繝峨Ξ繝吶Ν・亥ｭｦ蟷ｴ・峨ｒ蜿門ｾ・            cur.execute("SELECT grade_level FROM users WHERE id = %s", (user_id,))
            user = cur.fetchone()
            grade_level = user['grade_level'] if user else 3  # 繝・ヵ繧ｩ繝ｫ繝医・3蟷ｴ逕・            
            # 2蟷ｴ逕・蟄ｦ譛溘・蜀・筏轤ｹ繧貞叙蠕・            second_year_points = []
            try:
                # 遘醍岼繝・・繝悶Ν縺ｮ蟄伜惠遒ｺ隱・                cur.execute("SHOW TABLES LIKE 'subjects'")
                if not cur.fetchone():
                    # 遘醍岼繝・・繝悶Ν縺後↑縺・ｴ蜷医・菴懈・
                    create_subjects_table(conn)
                
                # 蜀・筏轤ｹ繝・・繝悶Ν縺ｮ蟄伜惠遒ｺ隱・                cur.execute("SHOW TABLES LIKE 'internal_points'")
                if not cur.fetchone():
                    # 蜀・筏轤ｹ繝・・繝悶Ν縺後↑縺・ｴ蜷医・菴懈・
                    create_internal_points_table(conn)
                
                # 2蟷ｴ逕・蟄ｦ譛溘・蜀・筏轤ｹ繧貞叙蠕・                cur.execute("""
                    SELECT s.name as subject_name, ip.point
                    FROM internal_points ip
                    JOIN subjects s ON ip.subject = s.id
                    WHERE ip.student_id = %s AND ip.grade_year = 2 AND ip.term = 3
                """, (user_id,))
                second_year_points = cur.fetchall() or []
                result['second_year_points'] = second_year_points
            except Exception as e:
                log_error(f"Error fetching second year points: {e}")
            
            # 3蟷ｴ逕・蟄ｦ譛溘・蜀・筏轤ｹ繧貞叙蠕・            third_year_points = []
            try:
                cur.execute("""
                    SELECT s.name as subject_name, ip.point
                    FROM internal_points ip
                    JOIN subjects s ON ip.subject = s.id
                    WHERE ip.student_id = %s AND ip.grade_year = 3 AND ip.term = 2
                """, (user_id,))
                third_year_points = cur.fetchall() or []
                result['third_year_points'] = third_year_points
            except Exception as e:
                log_error(f"Error fetching third year points: {e}")
            
            # 遘醍岼蜷阪ｒ繧ｭ繝ｼ縺ｫ縺励◆霎樊嶌繧剃ｽ懈・
            second_year_dict = {p['subject_name']: p['point'] for p in second_year_points if p.get('point') is not None}
            third_year_dict = {p['subject_name']: p['point'] for p in third_year_points if p.get('point') is not None}
            
            # 縺吶∋縺ｦ縺ｮ遘醍岼蜷阪ｒ蜿門ｾ・            all_subjects = set(list(second_year_dict.keys()) + list(third_year_dict.keys()))
            
            # 蜷郁ｨ亥・逕ｳ轤ｹ繧定ｨ育ｮ・ 2蟷ｴ逕・蟄ｦ譛溘・蜀・筏 + 3蟷ｴ逕・蟄ｦ譛溘・蜀・筏ﾃ・
            total_points = 0
            
            # 遘醍岼縺斐→縺ｮ蜀・筏轤ｹ繧呈ｼ邏・            combined_details = []
            
            for subject in all_subjects:
                second_year_point = second_year_dict.get(subject, 0)
                third_year_point = third_year_dict.get(subject, 0)
                
                # 蜀・筏轤ｹ縺ｮ隧ｳ邏ｰ諠・ｱ繧定ｿｽ蜉
                combined_details.append({
                    'subject_name': subject,
                    'second_year_point': second_year_point,
                    'third_year_point': third_year_point,
                    'weighted_sum': second_year_point + (third_year_point * 2)
                })
                
                # 蜷郁ｨ医↓蜉邂・                total_points += second_year_point + (third_year_point * 2)
            
            result['total'] = total_points
            result['details'] = combined_details
    except Exception as e:
        log_error(f"Error in calculate_current_internal_points: {e}")
    finally:
        conn.close()
    
    return result

# 遘醍岼繝・・繝悶Ν繧剃ｽ懈・縺吶ｋ髢｢謨ｰ
def create_subjects_table(conn):
    """subjects 繝・・繝悶Ν繧剃ｽ懈・縺吶ｋ"""
    try:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS subjects (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(50) NOT NULL,
                    is_main TINYINT(1) NOT NULL DEFAULT 0,
                    display_order INT NOT NULL DEFAULT 0,
                    is_active TINYINT(1) NOT NULL DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # 蝓ｺ譛ｬ繝・・繧ｿ縺ｮ謖ｿ蜈･遒ｺ隱・            cur.execute("SELECT COUNT(*) as count FROM subjects")
            count = cur.fetchone()
            
            if count and count['count'] == 0:
                # 蝓ｺ譛ｬ繝・・繧ｿ縺ｮ謖ｿ蜈･
                cur.execute("""
                    INSERT INTO subjects (id, name, is_main, display_order) VALUES 
                    (1, '蝗ｽ隱・, 1, 1),
                    (2, '謨ｰ蟄ｦ', 1, 2),
                    (3, '闍ｱ隱・, 1, 3),
                    (4, '逅・ｧ・, 1, 4),
                    (5, '遉ｾ莨・, 1, 5),
                    (6, '髻ｳ讌ｽ', 0, 6),
                    (7, '鄒手｡・, 0, 7),
                    (8, '菴楢ご', 0, 8),
                    (9, '謚螳ｶ', 0, 9)
                """)
            
            log_error("subjects 繝・・繝悶Ν繧堤｢ｺ隱・菴懈・縺励∪縺励◆")
            conn.commit()
    except Exception as e:
        log_error(f"Error creating subjects table: {e}")
        conn.rollback()

@app.route('/student/high-schools')
def student_high_schools():
    """逕溷ｾ堤畑縺ｮ鬮俶｡諠・ｱ荳隕ｧ陦ｨ遉ｺ"""
    # URL繧ｯ繧ｨ繝ｪ繝代Λ繝｡繝ｼ繧ｿ縺九ｉ逕溷ｾ棚D繧貞叙蠕暦ｼ郁ｬ帛ｸｫ逕ｨ・・    requested_student_id = request.args.get('id', type=int)
    
    # 繝ｭ繧ｰ繧､繝ｳ縺励※縺・↑縺・ｴ蜷医・繝ｭ繧ｰ繧､繝ｳ逕ｻ髱｢縺ｸ繝ｪ繝繧､繝ｬ繧ｯ繝・    if not session.get('user_id'):
        return redirect('/myapp/index.cgi/login')
    
    # 繧｢繧ｯ繧ｻ繧ｹ讓ｩ髯舌→陦ｨ遉ｺ縺吶ｋ逕溷ｾ偵ｒ豎ｺ螳・    user_role = session.get('role')
    teacher_view = False
    
    if user_role == 'teacher':
        # 隰帛ｸｫ縺ｯ莉ｻ諢上・逕溷ｾ偵→縺励※鬮俶｡荳隕ｧ縺ｫ繧｢繧ｯ繧ｻ繧ｹ蜿ｯ閭ｽ
        if requested_student_id:
            user_id = requested_student_id
            teacher_view = True
            
            # 縺薙・逕溷ｾ偵・繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ繧貞・逅・            conn = get_db_connection()
            try:
                # 逕溷ｾ偵′蟄伜惠縺吶ｋ縺狗｢ｺ隱阪＠縲∝錐蜑阪ｒ蜿門ｾ・                with conn.cursor() as cur:
                    cur.execute("SELECT name FROM users WHERE id = %s AND role = 'student'", (user_id,))
                    student = cur.fetchone()
                    if not student:
                        return "逕溷ｾ偵′隕九▽縺九ｊ縺ｾ縺帙ｓ", 404
                    student_name = student['name']
                
                # 繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ蜃ｦ逅・                is_first_login, points = process_login_and_award_points(conn, user_id)
            except Exception as e:
                log_error(f"逕溷ｾ帝ｫ俶｡荳隕ｧ縺ｮ隰帛ｸｫ陦ｨ遉ｺ繧ｨ繝ｩ繝ｼ: {e}")
            finally:
                conn.close()
        else:
            # 隰帛ｸｫ閾ｪ霄ｫ縺ｨ縺励※縺ｮ髢ｲ隕ｧ繧りｨｱ蜿ｯ
            user_id = session.get('user_id')
            student_name = session.get('user_name', '')
            teacher_view = False
    elif user_role == 'student':
        # 逕溷ｾ偵・閾ｪ蛻・・霄ｫ縺ｨ縺励※鬮俶｡荳隕ｧ縺ｫ繧｢繧ｯ繧ｻ繧ｹ
        user_id = session.get('user_id')
        student_name = session.get('user_name', '')
    else:
        # 荳肴・縺ｪ蠖ｹ蜑ｲ
        return redirect('/myapp/index.cgi/login')
    
    # 繧ｯ繧ｨ繝ｪ繝代Λ繝｡繝ｼ繧ｿ縺九ｉ讀懃ｴ｢譚｡莉ｶ繧貞叙蠕・    search = request.args.get('search', '')
    district = request.args.get('district', '')
    sort_by = request.args.get('sort', 'name')
    sort_order = request.args.get('order', 'asc')
    
    # 譛譁ｰ蟷ｴ蠎ｦ縺ｮ鬮俶｡諠・ｱ繧貞叙蠕・    conn = get_db_connection()
    high_schools = []
    districts = []
    
    try:
        with conn.cursor() as cur:
            # 譛譁ｰ蟷ｴ蠎ｦ繧貞叙蠕・            cur.execute("SELECT MAX(year) as latest_year FROM high_schools")
            result = cur.fetchone()
            latest_year = result['latest_year'] if result and result['latest_year'] else datetime.now().year
            
            # 蝨ｰ蛹ｺ繝ｪ繧ｹ繝医ｒ蜿門ｾ・            cur.execute("""
                SELECT DISTINCT district FROM high_schools 
                WHERE year = %s 
                ORDER BY district
            """, (latest_year,))
            district_results = cur.fetchall()
            districts = [d['district'] for d in district_results]
            
            # SQL繧ｯ繧ｨ繝ｪ縺ｮ譚｡莉ｶ驛ｨ蛻・ｒ讒狗ｯ・            conditions = ["year = %s"]
            params = [latest_year]
            
            if search:
                conditions.append("(name LIKE %s OR course_type LIKE %s OR strong_club_activities LIKE %s)")
                search_param = f"%{search}%"
                params.extend([search_param, search_param, search_param])
            
            if district:
                conditions.append("district = %s")
                params.append(district)
            
            # 荳ｦ縺ｳ譖ｿ縺域擅莉ｶ縺ｮ讀懆ｨｼ
            valid_sort_fields = ['name', 'deviation_score', 'min_required_points', 'competition_rate']
            if sort_by not in valid_sort_fields:
                sort_by = 'name'
            
            valid_sort_orders = ['asc', 'desc']
            if sort_order not in valid_sort_orders:
                sort_order = 'asc'
                
            # 謨ｰ蛟､繝輔ぅ繝ｼ繝ｫ繝峨・迚ｹ蛻･蜃ｦ逅・            # NULL縺ｮ謇ｱ縺・ｒ謾ｹ蝟・☆繧九◆繧√↓ COALESCE 繧剃ｽｿ逕ｨ縺吶ｋ
            if sort_by in ['deviation_score', 'min_required_points', 'competition_rate']:
                order_clause = f"COALESCE({sort_by}, 0) {sort_order.upper()}, name ASC"
            else:
                order_clause = f"{sort_by} {sort_order.upper()}"
                
            # SQL繧ｯ繧ｨ繝ｪ縺ｮ讒狗ｯ・            query = f"""
                SELECT h.* FROM high_schools h
                WHERE {' AND '.join(conditions)}
                ORDER BY {order_clause}
            """
            
            try:
                cur.execute(query, params)
                high_schools = cur.fetchall()
            except Exception as e:
                # 繧ｯ繧ｨ繝ｪ繧ｨ繝ｩ繝ｼ縺ｮ蝣ｴ蜷医∝ｮ牙・縺ｪ繝・ヵ繧ｩ繝ｫ繝医け繧ｨ繝ｪ繧剃ｽｿ逕ｨ
                log_error(f"Error in high schools query: {e}")
                log_error(f"Failed query: {query} with params {params}")
                
                # 繧ｷ繝ｳ繝励Ν縺ｪ繝輔か繝ｼ繝ｫ繝舌ャ繧ｯ繧ｯ繧ｨ繝ｪ
                fallback_query = """
                    SELECT * FROM high_schools
                    WHERE year = %s
                    ORDER BY name ASC
                """
                cur.execute(fallback_query, [latest_year])
                high_schools = cur.fetchall()
    
    except Exception as e:
        log_error(f"Error fetching high schools: {e}")
    finally:
        conn.close()
    
    return render_template(
        'student_high_schools.html',
        name=student_name,
        high_schools=high_schools,
        districts=districts,
        search=search,
        district=district,
        sort_by=sort_by,
        sort_order=sort_order,
        teacher_view=teacher_view,
        student_id=user_id
    )

@app.route('/student/high-school/<int:school_id>')
def student_high_school_detail(school_id):
    """鬮俶｡縺ｮ隧ｳ邏ｰ諠・ｱ陦ｨ遉ｺ・医す繝ｳ繝励Ν迚茨ｼ・""
    # URL繧ｯ繧ｨ繝ｪ繝代Λ繝｡繝ｼ繧ｿ縺九ｉ逕溷ｾ棚D繧貞叙蠕暦ｼ郁ｬ帛ｸｫ逕ｨ・・    requested_student_id = request.args.get('id', type=int)
    
    # 繝ｭ繧ｰ繧､繝ｳ縺励※縺・↑縺・ｴ蜷医・繝ｭ繧ｰ繧､繝ｳ逕ｻ髱｢縺ｸ繝ｪ繝繧､繝ｬ繧ｯ繝・    if not session.get('user_id'):
        return redirect('/myapp/index.cgi/login')
    
    # 繧｢繧ｯ繧ｻ繧ｹ讓ｩ髯舌→陦ｨ遉ｺ縺吶ｋ逕溷ｾ偵ｒ豎ｺ螳・    user_role = session.get('role')
    teacher_view = False
    
    if user_role == 'teacher':
        # 隰帛ｸｫ縺ｯ莉ｻ諢上・逕溷ｾ偵→縺励※鬮俶｡隧ｳ邏ｰ縺ｫ繧｢繧ｯ繧ｻ繧ｹ蜿ｯ閭ｽ
        if requested_student_id:
            user_id = requested_student_id
            teacher_view = True
            
            # 縺薙・逕溷ｾ偵・繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ繧貞・逅・            conn = get_db_connection()
            try:
                # 逕溷ｾ偵′蟄伜惠縺吶ｋ縺狗｢ｺ隱阪＠縲∝錐蜑阪ｒ蜿門ｾ・                with conn.cursor() as cur:
                    cur.execute("SELECT name FROM users WHERE id = %s AND role = 'student'", (user_id,))
                    student = cur.fetchone()
                    if not student:
                        return "逕溷ｾ偵′隕九▽縺九ｊ縺ｾ縺帙ｓ", 404
                    student_name = student['name']
                
                # 繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ蜃ｦ逅・                is_first_login, points = process_login_and_award_points(conn, user_id)
            except Exception as e:
                log_error(f"逕溷ｾ帝ｫ俶｡隧ｳ邏ｰ縺ｮ隰帛ｸｫ陦ｨ遉ｺ繧ｨ繝ｩ繝ｼ: {e}")
            finally:
                conn.close()
        else:
            # 隰帛ｸｫ閾ｪ霄ｫ縺ｨ縺励※縺ｮ髢ｲ隕ｧ繧りｨｱ蜿ｯ
            user_id = session.get('user_id')
            student_name = session.get('user_name', '')
            teacher_view = False
    elif user_role == 'student':
        # 逕溷ｾ偵・閾ｪ蛻・・霄ｫ縺ｨ縺励※鬮俶｡隧ｳ邏ｰ縺ｫ繧｢繧ｯ繧ｻ繧ｹ
        user_id = session.get('user_id')
        student_name = session.get('user_name', '')
    else:
        # 荳肴・縺ｪ蠖ｹ蜑ｲ
        return redirect('/myapp/index.cgi/login')
    
    school = None
    
    try:
        # 繝・・繧ｿ繝吶・繧ｹ謗･邯・        conn = get_db_connection()
        
        # 鬮俶｡諠・ｱ縺ｮ縺ｿ蜿門ｾ暦ｼ郁､・尅縺ｪ險育ｮ励↑縺暦ｼ・        try:
            with conn.cursor() as cur:
                cur.execute("SELECT * FROM high_schools WHERE id = %s", (school_id,))
                school = cur.fetchone()
        except Exception as e:
            log_error(f"鬮俶｡諠・ｱ蜿門ｾ励お繝ｩ繝ｼ: {e}")
            return render_template('error.html',
                error=f"繝・・繧ｿ蜿門ｾ励お繝ｩ繝ｼ: {str(e)}", 
                back_url="/myapp/index.cgi/student/high-schools")
        finally:
            conn.close()
        
        if not school:
            log_error(f"鬮俶｡ID {school_id} 縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ縲・)
            return render_template('error.html',
                error=f"鬮俶｡諠・ｱ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ・・D: {school_id}・・, 
                back_url="/myapp/index.cgi/student/high-schools")
        
        # 繝・Φ繝励Ξ繝ｼ繝医ｒ繝ｬ繝ｳ繝繝ｪ繝ｳ繧ｰ・医す繝ｳ繝励Ν縺ｪ繝・Φ繝励Ξ繝ｼ繝医ｒ菴ｿ逕ｨ・・        return render_template(
            'student_high_school_detail.html',
            name=student_name,
            school=school,
            teacher_view=teacher_view,
            student_id=user_id
        )
    
    except Exception as e:
        log_error(f"Error in high school detail: {e}")
        return render_template('error.html', 
            error="鬮俶｡諠・ｱ縺ｮ蜿門ｾ嶺ｸｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆縲・, 
            back_url="/myapp/index.cgi/student/high-schools")

@app.route('/student/points')
def student_points():
    """逕溷ｾ偵・繧､繝ｳ繝亥ｱ･豁ｴ繝ｻ繝懊・繝翫せ陦ｨ遉ｺ・亥腰邏皮沿・・""
    # URL繧ｯ繧ｨ繝ｪ繝代Λ繝｡繝ｼ繧ｿ縺九ｉ逕溷ｾ棚D繧貞叙蠕暦ｼ郁ｬ帛ｸｫ逕ｨ・・    requested_student_id = request.args.get('id', type=int)
    
    # 繝ｭ繧ｰ繧､繝ｳ縺励※縺・↑縺・ｴ蜷医・繝ｭ繧ｰ繧､繝ｳ逕ｻ髱｢縺ｸ繝ｪ繝繧､繝ｬ繧ｯ繝・    if not session.get('user_id'):
        return redirect('/myapp/index.cgi/login')
    
    # 繧｢繧ｯ繧ｻ繧ｹ讓ｩ髯舌→陦ｨ遉ｺ縺吶ｋ逕溷ｾ偵ｒ豎ｺ螳・    user_role = session.get('role')
    teacher_view = False
    
    if user_role == 'teacher':
        # 隰帛ｸｫ縺ｯ莉ｻ諢上・逕溷ｾ偵・繝昴う繝ｳ繝亥ｱ･豁ｴ縺ｫ繧｢繧ｯ繧ｻ繧ｹ蜿ｯ閭ｽ
        if requested_student_id:
            user_id = requested_student_id
            teacher_view = True
            
            # 縺薙・逕溷ｾ偵・繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ繧貞・逅・            conn = get_db_connection()
            try:
                # 逕溷ｾ偵′蟄伜惠縺吶ｋ縺狗｢ｺ隱阪＠縲∝錐蜑阪ｒ蜿門ｾ・                with conn.cursor() as cur:
                    cur.execute("SELECT name FROM users WHERE id = %s AND role = 'student'", (user_id,))
                    student = cur.fetchone()
                    if not student:
                        return "逕溷ｾ偵′隕九▽縺九ｊ縺ｾ縺帙ｓ", 404
                    student_name = student['name']
                
                # 繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ蜃ｦ逅・                is_first_login, points = process_login_and_award_points(conn, user_id)
            except Exception as e:
                log_error(f"逕溷ｾ偵・繧､繝ｳ繝亥ｱ･豁ｴ縺ｮ隰帛ｸｫ陦ｨ遉ｺ繧ｨ繝ｩ繝ｼ: {e}")
            finally:
                conn.close()
        else:
            # 逕溷ｾ棚D縺梧欠螳壹＆繧後※縺・↑縺・ｴ蜷・            return redirect('/myapp/index.cgi/teacher/dashboard')
    elif user_role == 'student':
        # 逕溷ｾ偵・閾ｪ蛻・・霄ｫ縺ｮ繝昴う繝ｳ繝亥ｱ･豁ｴ縺ｮ縺ｿ繧｢繧ｯ繧ｻ繧ｹ蜿ｯ閭ｽ
        user_id = session.get('user_id')
        student_name = session.get('user_name', '')
    else:
        # 荳肴・縺ｪ蠖ｹ蜑ｲ
        return redirect('/myapp/index.cgi/login')
    
    # 蛻晄悄蛟､繧定ｨｭ螳・    total_points = 0
    point_history = []
    current_streak = 0
    max_streak = 0
    has_login_today = False
    monthly_attendance_rate = 0
    is_birthday_month = False
    birthday_passed = False
    
    try:
        conn = get_db_connection()
        
        # 邱上・繧､繝ｳ繝亥叙蠕暦ｼ医す繝ｳ繝励Ν縺ｪ譁ｹ豕包ｼ・        try:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT COALESCE(SUM(points), 0) as total_points
                    FROM point_history
                    WHERE user_id = %s AND is_active = 1
                """, (user_id,))
                result = cur.fetchone()
                if result:
                    total_points = int(result['total_points'])
        except Exception as e:
            log_error(f"Error getting total points: {e}")
        
        # 繝昴う繝ｳ繝亥ｱ･豁ｴ・医す繝ｳ繝励Ν縺ｪ譁ｹ豕包ｼ・        try:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT ph.*, pe.display_name as event_display_name
                    FROM point_history ph
                    LEFT JOIN point_event_types pe ON ph.event_type = pe.name
                    WHERE ph.user_id = %s
                    ORDER BY ph.created_at DESC
                    LIMIT 50
                """, (user_id,))
                point_history = cur.fetchall() or []
        except Exception as e:
            log_error(f"Error getting point history: {e}")
        
        # 繧ｹ繝医Μ繝ｼ繧ｯ諠・ｱ・医す繝ｳ繝励Ν縺ｪ譁ｹ豕包ｼ・        try:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT current_streak, max_streak FROM login_streaks
                    WHERE user_id = %s
                """, (user_id,))
                streak = cur.fetchone()
                if streak:
                    current_streak = streak['current_streak']
                    max_streak = streak['max_streak']
        except Exception as e:
            log_error(f"Error getting streak info: {e}")
        
        # 莉頑律縺ｮ繝ｭ繧ｰ繧､繝ｳ遒ｺ隱搾ｼ医す繝ｳ繝励Ν縺ｪ譁ｹ豕包ｼ・        try:
            with conn.cursor() as cur:
                today = datetime.now().date()
                cur.execute("""
                    SELECT id FROM login_history
                    WHERE user_id = %s AND login_date = %s
                """, (user_id, today))
                login_result = cur.fetchone()
                has_login_today = True if login_result else False
        except Exception as e:
            log_error(f"Error checking today's login: {e}")
            
        # 隱慕函譌･繝√ぉ繝・け
        try:
            with conn.cursor() as cur:
                cur.execute("SELECT birthday FROM users WHERE id = %s", (user_id,))
                user_info = cur.fetchone()
                if user_info and user_info['birthday']:
                    today = datetime.now()
                    birthday = user_info['birthday']
                    # 蜷後§譛医↑繧峨・隱慕函譌･譛・                    is_birthday_month = (birthday.month == today.month)
                    # 莉雁ｹｴ縺ｮ隱慕函譌･縺碁℃縺弱※縺・ｋ縺九メ繧ｧ繝・け
                    if today.month > birthday.month or (today.month == birthday.month and today.day >= birthday.day):
                        birthday_passed = True
        except Exception as e:
            log_error(f"Error checking birthday: {e}")
    except Exception as e:
        log_error(f"Database connection error: {e}")
    finally:
        if 'conn' in locals():
            conn.close()
    
    # 繝・Φ繝励Ξ繝ｼ繝医ｒ繝ｬ繝ｳ繝繝ｪ繝ｳ繧ｰ
    return render_template(
        'student_points.html',
        name=student_name,
        total_points=total_points,
        point_history=point_history,
        current_streak=current_streak,
        max_streak=max_streak,
        has_login_today=has_login_today,
        monthly_attendance_rate=monthly_attendance_rate,
        is_birthday_month=is_birthday_month,
        birthday_passed=birthday_passed,
        teacher_view=teacher_view,
        student_id=user_id
    )

@app.route('/student/crane-game')
def student_crane_game():
    """逕溷ｾ偵け繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝繝励Ξ繧､讓ｩ迯ｲ蠕礼判髱｢"""
    # URL繧ｯ繧ｨ繝ｪ繝代Λ繝｡繝ｼ繧ｿ縺九ｉ逕溷ｾ棚D繧貞叙蠕暦ｼ郁ｬ帛ｸｫ逕ｨ・・    requested_student_id = request.args.get('id', type=int)
    
    # 繝ｭ繧ｰ繧､繝ｳ縺励※縺・↑縺・ｴ蜷医・繝ｭ繧ｰ繧､繝ｳ逕ｻ髱｢縺ｸ繝ｪ繝繧､繝ｬ繧ｯ繝・    if not session.get('user_id'):
        return redirect('/myapp/index.cgi/login')
    
    # 繧｢繧ｯ繧ｻ繧ｹ讓ｩ髯舌→陦ｨ遉ｺ縺吶ｋ逕溷ｾ偵ｒ豎ｺ螳・    user_role = session.get('role')
    teacher_view = False
    
    if user_role == 'teacher':
        # 隰帛ｸｫ縺ｯ莉ｻ諢上・逕溷ｾ偵・繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝諠・ｱ縺ｫ繧｢繧ｯ繧ｻ繧ｹ蜿ｯ閭ｽ
        if requested_student_id:
            user_id = requested_student_id
            teacher_view = True
            
            # 縺薙・逕溷ｾ偵・繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ繧貞・逅・            conn = get_db_connection()
            try:
                # 逕溷ｾ偵′蟄伜惠縺吶ｋ縺狗｢ｺ隱阪＠縲∝錐蜑阪ｒ蜿門ｾ・                with conn.cursor() as cur:
                    cur.execute("SELECT name FROM users WHERE id = %s AND role = 'student'", (user_id,))
                    student = cur.fetchone()
                    if not student:
                        return "逕溷ｾ偵′隕九▽縺九ｊ縺ｾ縺帙ｓ", 404
                    student_name = student['name']
                
                # 繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ蜃ｦ逅・                is_first_login, points = process_login_and_award_points(conn, user_id)
            except Exception as e:
                log_error(f"逕溷ｾ偵け繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝縺ｮ隰帛ｸｫ陦ｨ遉ｺ繧ｨ繝ｩ繝ｼ: {e}")
            finally:
                conn.close()
        else:
            # 逕溷ｾ棚D縺梧欠螳壹＆繧後※縺・↑縺・ｴ蜷・            return redirect('/myapp/index.cgi/teacher/dashboard')
    elif user_role == 'student':
        # 逕溷ｾ偵・閾ｪ蛻・・霄ｫ縺ｮ繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝諠・ｱ縺ｮ縺ｿ繧｢繧ｯ繧ｻ繧ｹ蜿ｯ閭ｽ
        user_id = session.get('user_id')
        student_name = session.get('user_name', '')
    else:
        # 荳肴・縺ｪ蠖ｹ蜑ｲ
        return redirect('/myapp/index.cgi/login')
    
    # 蛻晄悄蛟､繧定ｨｭ螳・    total_points = 0
    credits_history = []
    unused_credits = 0
    
    try:
        conn = get_db_connection()
        
        # 邱上・繧､繝ｳ繝亥叙蠕・        try:
            total_points = get_user_total_points(conn, user_id)
        except Exception as e:
            log_error(f"Error getting total points: {e}")
        
        # 繧ｯ繝ｬ繧ｸ繝・ヨ螻･豁ｴ蜿門ｾ・        try:
            with conn.cursor() as cur:
                # 繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝繧ｯ繝ｬ繧ｸ繝・ヨ繝・・繝悶Ν縺ｮ蟄伜惠遒ｺ隱・                cur.execute("SHOW TABLES LIKE 'crane_game_credits'")
                if not cur.fetchone():
                    # 繝・・繝悶Ν縺悟ｭ伜惠縺励↑縺・ｴ蜷医・菴懈・
                    cur.execute("""
                        CREATE TABLE IF NOT EXISTS crane_game_credits (
                            id INT AUTO_INCREMENT PRIMARY KEY,
                            user_id INT NOT NULL,
                            point_history_id INT,
                            is_used TINYINT(1) NOT NULL DEFAULT 0,
                            used_at TIMESTAMP NULL,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                            INDEX(user_id),
                            INDEX(is_used)
                        )
                    """)
                    conn.commit()
                
                # 螻･豁ｴ繧貞叙蠕・                cur.execute("""
                    SELECT * FROM crane_game_credits
                    WHERE user_id = %s
                    ORDER BY created_at DESC
                    LIMIT 20
                """, (user_id,))
                credits_history = cur.fetchall() or []
                
                # 譛ｪ菴ｿ逕ｨ縺ｮ繝励Ξ繧､讓ｩ謨ｰ繧貞叙蠕・                cur.execute("""
                    SELECT COUNT(*) as count
                    FROM crane_game_credits
                    WHERE user_id = %s AND is_used = 0
                """, (user_id,))
                result = cur.fetchone()
                unused_credits = result['count'] if result else 0
        except Exception as e:
            log_error(f"Error getting credits history: {e}")
    except Exception as e:
        log_error(f"Database connection error: {e}")
    finally:
        if 'conn' in locals():
            conn.close()
    
    # 繝・Φ繝励Ξ繝ｼ繝医ｒ繝ｬ繝ｳ繝繝ｪ繝ｳ繧ｰ
    return render_template(
        'student_crane_game.html',
        name=student_name,
        total_points=total_points,
        credits_history=credits_history,
        unused_credits=unused_credits,
        teacher_view=teacher_view,
        student_id=user_id
    )

# 繧ｯ繝ｬ繧ｸ繝・ヨ菴ｿ逕ｨ蜃ｦ逅・PI
@app.route('/api/teacher/use-crane-game-credit', methods=['POST'])
def use_crane_game_credit():
    """繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝繝励Ξ繧､讓ｩ繧剃ｽｿ逕ｨ縺吶ｋAPI・郁ｬ帛ｸｫ逕ｨ・・""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return jsonify({'success': False, 'message': '隱崎ｨｼ繧ｨ繝ｩ繝ｼ縺ｧ縺・}), 401
    
    data = request.json
    if not data:
        return jsonify({'success': False, 'message': '繝・・繧ｿ縺碁∽ｿ｡縺輔ｌ縺ｦ縺・∪縺帙ｓ'}), 400
    
    student_id = data.get('student_id')
    
    if not student_id:
        return jsonify({'success': False, 'message': '逕溷ｾ棚D縺梧欠螳壹＆繧後※縺・∪縺帙ｓ'}), 400
    
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            # 譛ｪ菴ｿ逕ｨ縺ｮ繧ｯ繝ｬ繧ｸ繝・ヨ繧呈､懃ｴ｢
            cur.execute("""
                SELECT id FROM crane_game_credits
                WHERE user_id = %s AND is_used = 0
                ORDER BY created_at ASC
                LIMIT 1
            """, (student_id,))
            
            credit = cur.fetchone()
            
            if not credit:
                return jsonify({'success': False, 'message': '縺薙・逕溷ｾ偵↓縺ｯ譛ｪ菴ｿ逕ｨ縺ｮ繝励Ξ繧､讓ｩ縺後≠繧翫∪縺帙ｓ'})
            
            # 繧ｯ繝ｬ繧ｸ繝・ヨ繧剃ｽｿ逕ｨ貂医∩縺ｫ譖ｴ譁ｰ
            cur.execute("""
                UPDATE crane_game_credits
                SET is_used = 1, used_at = NOW()
                WHERE id = %s
            """, (credit['id'],))
            
            # 谿九ｊ縺ｮ譛ｪ菴ｿ逕ｨ繧ｯ繝ｬ繧ｸ繝・ヨ謨ｰ繧貞叙蠕・            cur.execute("""
                SELECT COUNT(*) as count
                FROM crane_game_credits
                WHERE user_id = %s AND is_used = 0
            """, (student_id,))
            
            remaining = cur.fetchone()['count']
            
            conn.commit()
            
            return jsonify({
                'success': True,
                'message': '繝励Ξ繧､讓ｩ繧剃ｽｿ逕ｨ縺励∪縺励◆',
                'remaining_credits': remaining
            })
    
    except Exception as e:
        log_error(f"Error using crane game credit: {e}")
        if 'conn' in locals():
            conn.rollback()
        return jsonify({'success': False, 'message': '繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: ' + str(e)}), 500
    finally:
        if 'conn' in locals():
            conn.close()

# 繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝繝励Ξ繧､讓ｩ蜿門ｾ輸PI
@app.route('/api/student/get-crane-game-credit', methods=['POST'])
def get_crane_game_credit():
    """繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝縺ｮ繝励Ξ繧､讓ｩ繧貞叙蠕励☆繧帰PI"""
    if not session.get('user_id'):
        return jsonify({'success': False, 'message': '隱崎ｨｼ繧ｨ繝ｩ繝ｼ縺ｧ縺・}), 401
    
    user_id = request.json.get('student_id') if session.get('role') == 'teacher' else session.get('user_id')
    
    try:
        conn = get_db_connection()
        
        # 迴ｾ蝨ｨ縺ｮ繝昴う繝ｳ繝医ｒ遒ｺ隱・        total_points = get_user_total_points(conn, user_id)
        
        if total_points < 100:
            return jsonify({'success': False, 'message': '繝昴う繝ｳ繝医′雜ｳ繧翫∪縺帙ｓ'}), 400
        
        # 繝昴う繝ｳ繝域ｶ郁ｲｻ險倬鹸繧定ｿｽ蜉
        point_history_id = consume_points(
            conn, 
            user_id, 
            100, 
            'crane_game', 
            f"繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝: 繝励Ξ繧､讓ｩ繧堤佐蠕・
        )[1]  # 霑斐ｊ蛟､縺ｮ2逡ｪ逶ｮ縺ｮ隕∫ｴ縺・history_id
        
        # 繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝繧ｯ繝ｬ繧ｸ繝・ヨ螻･豁ｴ縺ｫ險倬鹸
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO crane_game_credits
                (user_id, point_history_id, is_used)
                VALUES (%s, %s, %s)
            """, (user_id, point_history_id, 0))  # 0 = 譛ｪ菴ｿ逕ｨ
        
            conn.commit()
            
            # 譛ｪ菴ｿ逕ｨ縺ｮ繝励Ξ繧､讓ｩ謨ｰ繧貞叙蠕・            cur.execute("""
                SELECT COUNT(*) as count
                FROM crane_game_credits
                WHERE user_id = %s AND is_used = 0
            """, (user_id,))
            unused_credits = cur.fetchone()['count']
        
        # 谿九ｊ縺ｮ繝昴う繝ｳ繝医ｒ蜀崎ｨ育ｮ・        remaining_points = get_user_total_points(conn, user_id)
        
        return jsonify({
            'success': True,
            'remaining_points': remaining_points,
            'unused_credits': unused_credits,
            'message': "繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝縺ｮ繝励Ξ繧､讓ｩ繧堤佐蠕励＠縺ｾ縺励◆"
        })
    
    except Exception as e:
        log_error(f"Error in get_crane_game_credit: {e}")
        if 'conn' in locals():
            conn.rollback()
        return jsonify({'success': False, 'message': '繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: ' + str(e)}), 500
    finally:
        if 'conn' in locals():
            conn.close()

# 隰帛ｸｫ逕ｨ縺ｮ繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝繝励Ξ繧､讓ｩ邂｡逅・判髱｢
@app.route('/teacher/crane-game-credits')
def teacher_crane_game_credits():
    """隰帛ｸｫ逕ｨ繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝繝励Ξ繧､讓ｩ邂｡逅・判髱｢"""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return redirect('/myapp/index.cgi/login')
    
    # 讀懃ｴ｢繝代Λ繝｡繝ｼ繧ｿ蜿門ｾ・    search_query = request.args.get('search', '')
    
    # 逕溷ｾ剃ｸ隕ｧ縺ｨ譛ｪ菴ｿ逕ｨ繧ｯ繝ｬ繧ｸ繝・ヨ諠・ｱ繧貞叙蠕・    students = []
    
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            # 讀懃ｴ｢譚｡莉ｶ縺ｫ蝓ｺ縺･縺・※逕溷ｾ偵ｒ蜿門ｾ・            if search_query:
                query = """
                    SELECT u.id, u.name, u.grade_level, 
                           (SELECT COUNT(*) FROM crane_game_credits 
                            WHERE user_id = u.id AND is_used = 0) as unused_credits
                    FROM users u
                    WHERE u.role = 'student' AND u.name LIKE %s
                    ORDER BY u.grade_level, u.name
                """
                cur.execute(query, (f"%{search_query}%",))
            else:
                query = """
                    SELECT u.id, u.name, u.grade_level, 
                           (SELECT COUNT(*) FROM crane_game_credits 
                            WHERE user_id = u.id AND is_used = 0) as unused_credits
                    FROM users u
                    WHERE u.role = 'student'
                    ORDER BY u.grade_level, u.name
                """
                cur.execute(query)
            
            students = cur.fetchall() or []
    except Exception as e:
        log_error(f"Error getting students with credits: {e}")
    finally:
        if 'conn' in locals():
            conn.close()
    
    return render_template(
        'teacher_crane_game_credits.html',
        name=session.get('user_name', ''),
        students=students,
        search_query=search_query
    )

# 繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝譎ｯ蜩∽ｺ､謠妁PI
@app.route('/api/student/redeem-prize', methods=['POST'])
def redeem_prize():
    """繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝譎ｯ蜩∽ｺ､謠妁PI"""
    if not session.get('user_id'):
        return jsonify({'success': False, 'message': '隱崎ｨｼ繧ｨ繝ｩ繝ｼ縺ｧ縺・}), 401
        
    data = request.json
    if not data:
        return jsonify({'success': False, 'message': '繝・・繧ｿ縺碁∽ｿ｡縺輔ｌ縺ｦ縺・∪縺帙ｓ'}), 400
    
    user_id = data.get('student_id') if session.get('role') == 'teacher' else session.get('user_id')
    prize_id = data.get('prize_id')
    comments = data.get('comments', '')
    
    if not prize_id:
        return jsonify({'success': False, 'message': '譎ｯ蜩！D縺梧欠螳壹＆繧後※縺・∪縺帙ｓ'}), 400
    
    try:
        conn = get_db_connection()
        
        # 譎ｯ蜩∵ュ蝣ｱ繧貞叙蠕・        with conn.cursor() as cur:
            cur.execute("SELECT * FROM crane_game_prizes WHERE id = %s", (prize_id,))
            prize = cur.fetchone()
            
            if not prize:
                return jsonify({'success': False, 'message': '謖・ｮ壹＆繧後◆譎ｯ蜩√′隕九▽縺九ｊ縺ｾ縺帙ｓ'})
            
            if prize['stock'] <= 0:
                return jsonify({'success': False, 'message': '縺薙・譎ｯ蜩√・蝨ｨ蠎ｫ蛻・ｌ縺ｧ縺・})
            
            point_cost = prize['point_cost']
            
            # 迴ｾ蝨ｨ縺ｮ繝昴う繝ｳ繝域ｮ矩ｫ倥ｒ遒ｺ隱・            cur.execute("""
                SELECT COALESCE(SUM(points), 0) as total_points
                FROM point_history
                WHERE user_id = %s AND is_active = 1
            """, (user_id,))
            
            result = cur.fetchone()
            total_points = int(result['total_points']) if result else 0
            
            if total_points < point_cost:
                return jsonify({'success': False, 'message': '繝昴う繝ｳ繝医′荳崎ｶｳ縺励※縺・∪縺・})
            
            # 繝昴う繝ｳ繝域ｶ郁ｲｻ險倬鹸繧定ｿｽ蜉
            cur.execute("""
                INSERT INTO point_history (user_id, points, event_type, comment)
                VALUES (%s, %s, %s, %s)
            """, (user_id, -point_cost, 'crane_game', f"繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝: {prize['name']}繧堤佐蠕・))
            
            point_history_id = cur.lastrowid
            
            # 譎ｯ蜩∝ｱ･豁ｴ縺ｫ險倬鹸
            cur.execute("""
                INSERT INTO crane_game_history (user_id, prize_id, point_history_id, comments)
                VALUES (%s, %s, %s, %s)
            """, (user_id, prize_id, point_history_id, comments))
            
            # 蝨ｨ蠎ｫ繧呈ｸ帙ｉ縺・            cur.execute("""
                UPDATE crane_game_prizes
                SET stock = stock - 1
                WHERE id = %s
            """, (prize_id,))
            
            # 譖ｴ譁ｰ蠕後・繝昴う繝ｳ繝域ｮ矩ｫ倥ｒ蜿門ｾ・            cur.execute("""
                SELECT COALESCE(SUM(points), 0) as total_points
                FROM point_history
                WHERE user_id = %s AND is_active = 1
            """, (user_id,))
            
            result = cur.fetchone()
            new_total_points = int(result['total_points']) if result else 0
            
            conn.commit()
            
            return jsonify({
                'success': True,
                'message': f"{prize['name']}繧堤佐蠕励＠縺ｾ縺励◆・・,
                'total_points': new_total_points
            })
    
    except Exception as e:
        log_error(f"Error in redeem_prize: {e}")
        if 'conn' in locals():
            conn.rollback()
        return jsonify({'success': False, 'message': '繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: ' + str(e)})
    
    finally:
        if 'conn' in locals():
            conn.close()

# 繧､繝吶Φ繝医ち繧､繝励ユ繝ｼ繝悶Ν繧剃ｽ懈・縺吶ｋ髢｢謨ｰ
def create_event_types_table(conn):
    """point_event_types繝・・繝悶Ν繧剃ｽ懈・縺吶ｋ"""
    try:
        with conn.cursor() as cur:
            # 繝・・繝悶Ν菴懈・
            cur.execute("""
                CREATE TABLE IF NOT EXISTS point_event_types (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(50) NOT NULL UNIQUE,
                    display_name VARCHAR(100) NOT NULL,
                    description TEXT,
                    min_points INT NOT NULL DEFAULT 0,
                    max_points INT NOT NULL DEFAULT 0,
                    teacher_can_award TINYINT(1) NOT NULL DEFAULT 0,
                    is_active TINYINT(1) NOT NULL DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                )
            """)
            log_error("point_event_types繝・・繝悶Ν繧剃ｽ懈・縺励∪縺励◆")
            conn.commit()
    except Exception as e:
        log_error(f"Error creating point_event_types table: {e}")
        conn.rollback()

# 繝・ヵ繧ｩ繝ｫ繝医・繧､繝吶Φ繝医ち繧､繝励ｒ謖ｿ蜈･縺吶ｋ髢｢謨ｰ
def insert_default_event_types(conn):
    """繝・ヵ繧ｩ繝ｫ繝医・繧､繝吶Φ繝医ち繧､繝励ｒ謖ｿ蜈･縺吶ｋ"""
    try:
        with conn.cursor() as cur:
            # 繝・ヵ繧ｩ繝ｫ繝医・繧､繝吶Φ繝医ち繧､繝励ｒ謖ｿ蜈･
            event_types = [
                ('login', '繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ', '豈取律縺ｮ繝ｭ繧ｰ繧､繝ｳ縺ｧ繝昴う繝ｳ繝育佐蠕・, 3, 10, 0),
                ('streak_5', '5譌･騾｣邯壹Ο繧ｰ繧､繝ｳ', '5譌･騾｣邯壹Ο繧ｰ繧､繝ｳ縺ｮ繝懊・繝翫せ', 20, 20, 0),
                ('streak_10', '10譌･騾｣邯壹Ο繧ｰ繧､繝ｳ', '10譌･騾｣邯壹Ο繧ｰ繧､繝ｳ縺ｮ繝懊・繝翫せ', 50, 50, 0),
                ('streak_30', '30譌･騾｣邯壹Ο繧ｰ繧､繝ｳ', '30譌･騾｣邯壹Ο繧ｰ繧､繝ｳ縺ｮ繝懊・繝翫せ', 150, 150, 0),
                ('birthday', '隱慕函譌･繝懊・繝翫せ', '縺願ｪ慕函譌･險伜ｿｵ繝懊・繝翫せ', 100, 100, 0),
                ('attendance_90', '譛磯俣90%蜃ｺ蟶ｭ繝懊・繝翫せ', '譛磯俣蜃ｺ蟶ｭ邇・0%莉･荳企＃謌舌・繝ｼ繝翫せ', 50, 50, 0),
                ('attendance_100', '逧・共雉・, '譛磯俣蜃ｺ蟶ｭ邇・00%驕疲・繝懊・繝翫せ', 100, 100, 0),
                ('grade_improvement_small', '謌千ｸｾ蜷台ｸ翫・繝ｼ繝翫せ(蟆・', '蜑榊屓繧医ｊ5轤ｹ莉･荳頑・邵ｾ繧｢繝・・', 20, 20, 0),
                ('grade_improvement_medium', '謌千ｸｾ蜷台ｸ翫・繝ｼ繝翫せ(荳ｭ)', '蜑榊屓繧医ｊ10轤ｹ莉･荳頑・邵ｾ繧｢繝・・', 30, 30, 0),
                ('grade_improvement_large', '謌千ｸｾ蜷台ｸ翫・繝ｼ繝翫せ(螟ｧ)', '蜑榊屓繧医ｊ15轤ｹ莉･荳頑・邵ｾ繧｢繝・・', 50, 50, 0),
                ('homework', '螳ｿ鬘梧署蜃ｺ繝懊・繝翫せ', '螳ｿ鬘梧署蜃ｺ縺斐→縺ｫ迯ｲ蠕・, 10, 10, 1),
                ('exam_result', '隧ｦ鬨鍋ｵ先棡繝懊・繝翫せ', '隧ｦ鬨鍋ｵ先棡縺ｫ蠢懊§縺溘・繝ｼ繝翫せ', 10, 100, 1),
                ('mock_exam', '讓｡隧ｦ繝懊・繝翫せ', '讓｡隧ｦ邨先棡縺ｫ蠢懊§縺溘・繝ｼ繝翫せ', 10, 100, 1),
                ('special_award', '迚ｹ蛻･繝懊・繝翫せ', '迚ｹ蛻･縺ｪ豢ｻ蜍輔ｄ謌先棡縺ｫ蟇ｾ縺吶ｋ繝懊・繝翫せ', 10, 500, 1),
                ('crane_game', '繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝', '繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝縺ｧ縺ｮ譎ｯ蜩∽ｺ､謠・, 0, 0, 0)
            ]
            
            for event_type in event_types:
                # REPLACE INTO繧剃ｽｿ逕ｨ縺励※INSERT縺ｾ縺溘・UPDATE
                cur.execute("""
                    INSERT INTO point_event_types
                    (name, display_name, description, min_points, max_points, teacher_can_award)
                    VALUES (%s, %s, %s, %s, %s, %s)
                    ON DUPLICATE KEY UPDATE
                    display_name = VALUES(display_name),
                    description = VALUES(description),
                    min_points = VALUES(min_points),
                    max_points = VALUES(max_points),
                    teacher_can_award = VALUES(teacher_can_award),
                    is_active = 1
                """, event_type)
            
            log_error("繝・ヵ繧ｩ繝ｫ繝医・繧､繝吶Φ繝医ち繧､繝励ｒ謖ｿ蜈･縺励∪縺励◆")
            conn.commit()
    except Exception as e:
        log_error(f"Error inserting default event types: {e}")
        conn.rollback()

@app.route('/teacher/points', methods=['GET', 'POST'])
def teacher_points():
    """隰帛ｸｫ繝昴う繝ｳ繝育ｮ｡逅・・繝ｼ繧ｸ・井ｿｮ豁｣迚茨ｼ・""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return redirect('/myapp/index.cgi/login')
    
    # 謨吝ｸｫID繧貞叙蠕・    teacher_id = session.get('user_id')
    error = None
    success = None
    
    # POST繝ｪ繧ｯ繧ｨ繧ｹ繝亥・逅・ｼ医・繧､繝ｳ繝井ｻ倅ｸ趣ｼ・    if request.method == 'POST':
        try:
            # 繝ｪ繧ｯ繧ｨ繧ｹ繝医ョ繝ｼ繧ｿ蜿門ｾ・            action = request.form.get('action')
            
            # 繝・ヰ繝・げ繝ｭ繧ｰ
            app.logger.info(f"POST繝ｪ繧ｯ繧ｨ繧ｹ繝亥女菫｡: action={action}")
            app.logger.info(f"繝輔か繝ｼ繝繝・・繧ｿ: {request.form}")
            
            if action == 'award_points':
                # 繝輔か繝ｼ繝繝・・繧ｿ蜿門ｾ・                student_id = request.form.get('student_id')
                event_type = request.form.get('event_type')
                points = request.form.get('points', type=int)
                comment = request.form.get('comment', '')
                
                # 蜈･蜉帶､懆ｨｼ
                if not all([student_id, event_type, points]):
                    error = "蠢・磯・岼縺悟・蜉帙＆繧後※縺・∪縺帙ｓ"
                    app.logger.error(f"蜈･蜉帶､懆ｨｼ繧ｨ繝ｩ繝ｼ: student_id={student_id}, event_type={event_type}, points={points}")
                else:
                    # 繝・・繧ｿ繝吶・繧ｹ謗･邯・                    conn = get_db_connection()
                    try:
                        # 繝昴う繝ｳ繝井ｻ倅ｸ主・逅・ｒ譏守､ｺ逧・↑繝医Λ繝ｳ繧ｶ繧ｯ繧ｷ繝ｧ繝ｳ縺ｧ螳溯｡・                        conn.begin()
                        
                        # points_utils.py縺ｮteacher_award_points髢｢謨ｰ繧貞他縺ｳ蜃ｺ縺・                        award_success, message = teacher_award_points(
                            conn=conn,
                            teacher_id=teacher_id,
                            student_id=student_id,
                            event_type=event_type,
                            points=points,
                            comment=comment
                        )
                        
                        if award_success:
                            # 謌仙粥譎ゅ・繧ｳ繝溘ャ繝・                            conn.commit()
                            success = f"繝昴う繝ｳ繝医ｒ莉倅ｸ弱＠縺ｾ縺励◆: {message}"
                            app.logger.info(f"繝昴う繝ｳ繝井ｻ倅ｸ取・蜉・ {message}")
                        else:
                            # 螟ｱ謨玲凾縺ｯ繝ｭ繝ｼ繝ｫ繝舌ャ繧ｯ
                            conn.rollback()
                            error = f"繝昴う繝ｳ繝井ｻ倅ｸ弱お繝ｩ繝ｼ: {message}"
                            app.logger.error(f"繝昴う繝ｳ繝井ｻ倅ｸ主､ｱ謨・ {message}")
                    except Exception as e:
                        # 繧ｨ繝ｩ繝ｼ譎ゅ・繝ｭ繝ｼ繝ｫ繝舌ャ繧ｯ
                        conn.rollback()
                        error = f"繝・・繧ｿ繝吶・繧ｹ繧ｨ繝ｩ繝ｼ: {str(e)}"
                        app.logger.error(f"繝昴う繝ｳ繝井ｻ倅ｸ惹ｸｭ縺ｮ繝・・繧ｿ繝吶・繧ｹ繧ｨ繝ｩ繝ｼ: {e}")
                    finally:
                        conn.close()
                        
            # 縺昴・莉悶・繧｢繧ｯ繧ｷ繝ｧ繝ｳ蜃ｦ逅・..
        except Exception as e:
            error = f"蜃ｦ逅・お繝ｩ繝ｼ: {str(e)}"
            app.logger.error(f"繝昴う繝ｳ繝亥・逅・ｸｭ縺ｮ莠域悄縺帙〓繧ｨ繝ｩ繝ｼ: {e}")
    
    # 逕溷ｾ剃ｸ隕ｧ繧貞叙蠕・    students = []
    event_types = []
    point_history = []
    
    try:
        conn = get_db_connection()
        
        # 逕溷ｾ剃ｸ隕ｧ繧貞叙蠕・        try:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT id, name, grade_level
                    FROM users
                    WHERE role = 'student'
                    ORDER BY grade_level, name
                """)
                students = cur.fetchall() or []
        except Exception as e:
            app.logger.error(f"逕溷ｾ呈ュ蝣ｱ蜿門ｾ励お繝ｩ繝ｼ: {e}")
            error = "逕溷ｾ呈ュ蝣ｱ縺ｮ蜿門ｾ励↓螟ｱ謨励＠縺ｾ縺励◆"
        
        # 繧､繝吶Φ繝医ち繧､繝励ｒ蜿門ｾ暦ｼ井ｿｮ豁｣迚茨ｼ・        try:
            with conn.cursor() as cur:
                # 繧､繝吶Φ繝医ち繧､繝励ユ繝ｼ繝悶Ν縺ｮ蟄伜惠遒ｺ隱・                cur.execute("SHOW TABLES LIKE 'point_event_types'")
                if not cur.fetchone():
                    app.logger.error("point_event_types繝・・繝悶Ν縺悟ｭ伜惠縺励∪縺帙ｓ")
                    error = "繧､繝吶Φ繝医ち繧､繝励ユ繝ｼ繝悶Ν縺悟ｭ伜惠縺励∪縺帙ｓ"
                else:
                    # is_active繧ｫ繝ｩ繝縺ｮ蟄伜惠遒ｺ隱・                    cur.execute("SHOW COLUMNS FROM point_event_types LIKE 'is_active'")
                    has_is_active = cur.fetchone() is not None
                    
                    # 繧ｯ繧ｨ繝ｪ讒狗ｯ会ｼ・s_active繧ｫ繝ｩ繝縺ｮ譛臥┌縺ｫ蠢懊§縺ｦ螟画峩・・                    if has_is_active:
                        query = """
                            SELECT name, display_name, min_points, max_points
                            FROM point_event_types
                            WHERE teacher_can_award = 1 AND is_active = 1
                            ORDER BY display_name
                        """
                    else:
                        query = """
                            SELECT name, display_name, min_points, max_points
                            FROM point_event_types
                            WHERE teacher_can_award = 1
                            ORDER BY display_name
                        """
                    
                    # 繧ｯ繧ｨ繝ｪ螳溯｡・                    cur.execute(query)
                    event_types = cur.fetchall() or []
                    
                    # 繝ｭ繧ｰ縺ｫ險倬鹸
                    app.logger.info(f"蜿門ｾ励＠縺溘う繝吶Φ繝医ち繧､繝・ {len(event_types)}莉ｶ")
                    
                    # 繧､繝吶Φ繝医ち繧､繝励′蜿門ｾ励〒縺阪↑縺九▲縺溷ｴ蜷・                    if not event_types:
                        app.logger.warning("繧､繝吶Φ繝医ち繧､繝励′蜿門ｾ励〒縺阪∪縺帙ｓ縺ｧ縺励◆縲ゅョ繝輔か繝ｫ繝亥､繧剃ｽｿ逕ｨ縺励∪縺吶・)
                        # 繝・ヵ繧ｩ繝ｫ繝亥､繧定ｨｭ螳・                        event_types = [
                            {'name': 'homework', 'display_name': '螳ｿ鬘梧署蜃ｺ繝懊・繝翫せ', 'min_points': 10, 'max_points': 10},
                            {'name': 'exam_result', 'display_name': '隧ｦ鬨鍋ｵ先棡繝懊・繝翫せ', 'min_points': 10, 'max_points': 100},
                            {'name': 'mock_exam', 'display_name': '讓｡隧ｦ繝懊・繝翫せ', 'min_points': 10, 'max_points': 100},
                            {'name': 'special_award', 'display_name': '迚ｹ蛻･繝懊・繝翫せ', 'min_points': 10, 'max_points': 500}
                        ]
        except Exception as e:
            app.logger.error(f"繧､繝吶Φ繝医ち繧､繝怜叙蠕励お繝ｩ繝ｼ: {e}")
            error = "繧､繝吶Φ繝医ち繧､繝励・蜿門ｾ励↓螟ｱ謨励＠縺ｾ縺励◆"
            # 繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺溷ｴ蜷医〒繧ゅョ繝輔か繝ｫ繝亥､繧定ｨｭ螳・            event_types = [
                {'name': 'homework', 'display_name': '螳ｿ鬘梧署蜃ｺ繝懊・繝翫せ', 'min_points': 10, 'max_points': 10},
                {'name': 'exam_result', 'display_name': '隧ｦ鬨鍋ｵ先棡繝懊・繝翫せ', 'min_points': 10, 'max_points': 100},
                {'name': 'mock_exam', 'display_name': '讓｡隧ｦ繝懊・繝翫せ', 'min_points': 10, 'max_points': 100},
                {'name': 'special_award', 'display_name': '迚ｹ蛻･繝懊・繝翫せ', 'min_points': 10, 'max_points': 500}
            ]
        
        # 繝昴う繝ｳ繝亥ｱ･豁ｴ繧貞叙蠕・        try:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT ph.*, u.name as user_name, 
                           pe.display_name as event_display_name, 
                           t.name as created_by_name
                    FROM point_history ph
                    JOIN users u ON ph.user_id = u.id
                    LEFT JOIN point_event_types pe ON ph.event_type = pe.name
                    LEFT JOIN users t ON ph.created_by = t.id
                    ORDER BY ph.created_at DESC
                    LIMIT 100
                """)
                point_history = cur.fetchall() or []
        except Exception as e:
            app.logger.error(f"繝昴う繝ｳ繝亥ｱ･豁ｴ蜿門ｾ励お繝ｩ繝ｼ: {e}")
            error = "繝昴う繝ｳ繝亥ｱ･豁ｴ縺ｮ蜿門ｾ励↓螟ｱ謨励＠縺ｾ縺励◆"
    except Exception as e:
        app.logger.error(f"繝・・繧ｿ繝吶・繧ｹ謗･邯壹お繝ｩ繝ｼ: {e}")
        error = "繝・・繧ｿ繝吶・繧ｹ謗･邯壹お繝ｩ繝ｼ"
    finally:
        if 'conn' in locals():
            conn.close()
    
    # 繝・Φ繝励Ξ繝ｼ繝医ｒ繝ｬ繝ｳ繝繝ｪ繝ｳ繧ｰ
    return render_template(
        'teacher_points.html',
        name=session.get('user_name', ''),
        students=students,
        event_types=event_types,
        point_history=point_history,
        error=error,
        success=success
    )

@app.route('/api/student/points')
def get_student_points_api():
    """逕溷ｾ偵・繝昴う繝ｳ繝域ュ蝣ｱ繧貞叙蠕励☆繧帰PI"""
    if not session.get('user_id'):
        return jsonify({'success': False, 'message': '隱崎ｨｼ繧ｨ繝ｩ繝ｼ縺ｧ縺・}), 401
    
    # 繧ｯ繧ｨ繝ｪ繝代Λ繝｡繝ｼ繧ｿ縺九ｉ逕溷ｾ棚D繧貞叙蠕暦ｼ郁ｬ帛ｸｫ逕ｨ・・    student_id = request.args.get('student_id', type=int)
    
    # 繝ｦ繝ｼ繧ｶ繝ｼID繧呈ｱｺ螳・    if session.get('role') == 'teacher' and student_id:
        user_id = student_id
    else:
        user_id = session.get('user_id')
    
    try:
        conn = get_db_connection()
        total_points = get_user_total_points(conn, user_id)
        
        return jsonify({
            'success': True,
            'total_points': total_points
        })
    except Exception as e:
        log_error(f"Error getting points: {e}")
        return jsonify({'success': False, 'message': '繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆'}), 500
    finally:
        if 'conn' in locals():
            conn.close()

@app.route('/debug/event-types')
def debug_event_types():
    """繧､繝吶Φ繝医ち繧､繝励ユ繝ｼ繝悶Ν縺ｮ迥ｶ諷九ｒ遒ｺ隱・""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return redirect('/myapp/index.cgi/login')
    
    debug_info = {
        'table_exists': False,
        'records': [],
        'error': None
    }
    
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            # 繝・・繝悶Ν縺ｮ蟄伜惠遒ｺ隱・            try:
                cur.execute("SHOW TABLES LIKE 'point_event_types'")
                if cur.fetchone():
                    debug_info['table_exists'] = True
                else:
                    debug_info['error'] = "point_event_types繝・・繝悶Ν縺悟ｭ伜惠縺励∪縺帙ｓ"
                    return jsonify(debug_info)
            except Exception as e:
                debug_info['error'] = f"繝・・繝悶Ν遒ｺ隱阪お繝ｩ繝ｼ: {str(e)}"
                return jsonify(debug_info)
            
            # 繝ｬ繧ｳ繝ｼ繝臥｢ｺ隱・            try:
                cur.execute("SELECT * FROM point_event_types")
                records = cur.fetchall()
                debug_info['records'] = [dict(r) for r in records]
                debug_info['record_count'] = len(records)
            except Exception as e:
                debug_info['error'] = f"繝ｬ繧ｳ繝ｼ繝牙叙蠕励お繝ｩ繝ｼ: {str(e)}"
                return jsonify(debug_info)
            
            # 隰帛ｸｫ縺御ｻ倅ｸ主庄閭ｽ縺ｪ繧､繝吶Φ繝医ち繧､繝励・遒ｺ隱・            try:
                cur.execute("SELECT * FROM point_event_types WHERE teacher_can_award = 1")
                teacher_records = cur.fetchall()
                debug_info['teacher_events'] = [dict(r) for r in teacher_records]
                debug_info['teacher_event_count'] = len(teacher_records)
            except Exception as e:
                debug_info['error'] = f"隰帛ｸｫ繧､繝吶Φ繝亥叙蠕励お繝ｩ繝ｼ: {str(e)}"
                return jsonify(debug_info)
    except Exception as e:
        debug_info['error'] = f"繝・・繧ｿ繝吶・繧ｹ謗･邯壹お繝ｩ繝ｼ: {str(e)}"
    finally:
        if 'conn' in locals():
            conn.close()
    
    return jsonify(debug_info)

# 繧､繝吶Φ繝医ち繧､繝励・繝・・繧ｿ繧呈諺蜈･繝ｻ譖ｴ譁ｰ縺吶ｋ繧ｨ繝ｳ繝峨・繧､繝ｳ繝・@app.route('/admin/reset-event-types')
def reset_event_types():
    """繧､繝吶Φ繝医ち繧､繝励ユ繝ｼ繝悶Ν縺ｮ繝・・繧ｿ繧偵Μ繧ｻ繝・ヨ"""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return redirect('/myapp/index.cgi/login')
    
    result = {
        'success': False,
        'message': '',
        'error': None,
        'records_added': 0
    }
    
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            # 繝・・繝悶Ν縺ｮ蟄伜惠遒ｺ隱阪√↑縺代ｌ縺ｰ菴懈・
            try:
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS point_event_types (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        name VARCHAR(50) NOT NULL UNIQUE,
                        display_name VARCHAR(100) NOT NULL,
                        description TEXT,
                        min_points INT NOT NULL DEFAULT 0,
                        max_points INT NOT NULL DEFAULT 0,
                        teacher_can_award TINYINT(1) NOT NULL DEFAULT 0,
                        is_active TINYINT(1) NOT NULL DEFAULT 1,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                    )
                """)
            except Exception as e:
                result['error'] = f"繝・・繝悶Ν菴懈・繧ｨ繝ｩ繝ｼ: {str(e)}"
                return jsonify(result)
            
            # 繝・・繧ｿ繧呈諺蜈･・域里蟄倥・繝ｬ繧ｳ繝ｼ繝峨・譖ｴ譁ｰ・・            event_types = [
                ('login', '繝ｭ繧ｰ繧､繝ｳ繝懊・繝翫せ', '豈取律縺ｮ繝ｭ繧ｰ繧､繝ｳ縺ｧ繝昴う繝ｳ繝育佐蠕・, 3, 10, 0),
                ('streak_5', '5譌･騾｣邯壹Ο繧ｰ繧､繝ｳ', '5譌･騾｣邯壹Ο繧ｰ繧､繝ｳ縺ｮ繝懊・繝翫せ', 20, 20, 0),
                ('streak_10', '10譌･騾｣邯壹Ο繧ｰ繧､繝ｳ', '10譌･騾｣邯壹Ο繧ｰ繧､繝ｳ縺ｮ繝懊・繝翫せ', 50, 50, 0),
                ('streak_30', '30譌･騾｣邯壹Ο繧ｰ繧､繝ｳ', '30譌･騾｣邯壹Ο繧ｰ繧､繝ｳ縺ｮ繝懊・繝翫せ', 150, 150, 0),
                ('birthday', '隱慕函譌･繝懊・繝翫せ', '縺願ｪ慕函譌･險伜ｿｵ繝懊・繝翫せ', 100, 100, 0),
                ('attendance_90', '譛磯俣90%蜃ｺ蟶ｭ繝懊・繝翫せ', '譛磯俣蜃ｺ蟶ｭ邇・0%莉･荳企＃謌舌・繝ｼ繝翫せ', 50, 50, 0),
                ('attendance_100', '逧・共雉・, '譛磯俣蜃ｺ蟶ｭ邇・00%驕疲・繝懊・繝翫せ', 100, 100, 0),
                ('grade_improvement_small', '謌千ｸｾ蜷台ｸ翫・繝ｼ繝翫せ(蟆・', '蜑榊屓繧医ｊ5轤ｹ莉･荳頑・邵ｾ繧｢繝・・', 20, 20, 0),
                ('grade_improvement_medium', '謌千ｸｾ蜷台ｸ翫・繝ｼ繝翫せ(荳ｭ)', '蜑榊屓繧医ｊ10轤ｹ莉･荳頑・邵ｾ繧｢繝・・', 30, 30, 0),
                ('grade_improvement_large', '謌千ｸｾ蜷台ｸ翫・繝ｼ繝翫せ(螟ｧ)', '蜑榊屓繧医ｊ15轤ｹ莉･荳頑・邵ｾ繧｢繝・・', 50, 50, 0),
                ('homework', '螳ｿ鬘梧署蜃ｺ繝懊・繝翫せ', '螳ｿ鬘梧署蜃ｺ縺斐→縺ｫ迯ｲ蠕・, 10, 10, 1),
                ('exam_result', '隧ｦ鬨鍋ｵ先棡繝懊・繝翫せ', '隧ｦ鬨鍋ｵ先棡縺ｫ蠢懊§縺溘・繝ｼ繝翫せ', 10, 100, 1),
                ('mock_exam', '讓｡隧ｦ繝懊・繝翫せ', '讓｡隧ｦ邨先棡縺ｫ蠢懊§縺溘・繝ｼ繝翫せ', 10, 100, 1),
                ('special_award', '迚ｹ蛻･繝懊・繝翫せ', '迚ｹ蛻･縺ｪ豢ｻ蜍輔ｄ謌先棡縺ｫ蟇ｾ縺吶ｋ繝懊・繝翫せ', 10, 500, 1),
                ('crane_game', '繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝', '繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝縺ｧ縺ｮ譎ｯ蜩∽ｺ､謠・, 0, 0, 0)
            ]
            
            count = 0
            for event_type in event_types:
                try:
                    # 譌｢蟄倥・繝ｬ繧ｳ繝ｼ繝峨ｒ繝√ぉ繝・け
                    cur.execute("SELECT id FROM point_event_types WHERE name = %s", (event_type[0],))
                    existing = cur.fetchone()
                    
                    if existing:
                        # 譖ｴ譁ｰ
                        cur.execute("""
                            UPDATE point_event_types
                            SET display_name = %s,
                                description = %s,
                                min_points = %s,
                                max_points = %s,
                                teacher_can_award = %s,
                                is_active = 1
                            WHERE name = %s
                        """, (event_type[1], event_type[2], event_type[3], event_type[4], event_type[5], event_type[0]))
                    else:
                        # 謖ｿ蜈･
                        cur.execute("""
                            INSERT INTO point_event_types
                            (name, display_name, description, min_points, max_points, teacher_can_award)
                            VALUES (%s, %s, %s, %s, %s, %s)
                        """, event_type)
                    
                    count += 1
                except Exception as e:
                    result['error'] = f"繝ｬ繧ｳ繝ｼ繝・{event_type[0]} 縺ｮ蜃ｦ逅・ｸｭ縺ｫ繧ｨ繝ｩ繝ｼ: {str(e)}"
                    # 邯夊｡後☆繧・            
            result['records_added'] = count
            result['success'] = True
            result['message'] = f"{count} 莉ｶ縺ｮ繧､繝吶Φ繝医ち繧､繝励ｒ豁｣蟶ｸ縺ｫ蜃ｦ逅・＠縺ｾ縺励◆"
        
        conn.commit()
    except Exception as e:
        result['error'] = f"繝・・繧ｿ繝吶・繧ｹ蜃ｦ逅・お繝ｩ繝ｼ: {str(e)}"
        if 'conn' in locals():
            conn.rollback()
    finally:
        if 'conn' in locals():
            conn.close()
    
    return jsonify(result)

# 蜀・Κ繧ｵ繝ｼ繝舌・繧ｨ繝ｩ繝ｼ縺ｮ繝上Φ繝峨Λ繝ｼ
@app.errorhandler(500)
def internal_error(error):
    """蜀・Κ繧ｵ繝ｼ繝舌・繧ｨ繝ｩ繝ｼ縺ｮ繝上Φ繝峨Λ繝ｼ"""
    return render_template('error.html', 
        error="蜀・Κ繧ｵ繝ｼ繝舌・繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆縲らｮ｡逅・・↓縺雁撫縺・粋繧上○縺上□縺輔＞縲・, 
        back_url="/myapp/index.cgi/student/high-schools"), 500

# 迚ｹ螳壹・鬮俶｡諠・ｱ繧偵ョ繝舌ャ繧ｰ陦ｨ遉ｺ縺吶ｋ繝ｫ繝ｼ繝・@app.route('/debug/high-school/<int:school_id>')
def debug_high_school(school_id):
    """鬮俶｡諠・ｱ縺ｮ繝・ヰ繝・げ陦ｨ遉ｺ"""
    if not session.get('user_id'):
        return "繝ｭ繧ｰ繧､繝ｳ縺悟ｿ・ｦ√〒縺・, 401
    
    result = {
        'school_id': school_id,
        'db_info': {},
        'school_data': None,
        'errors': []
    }
    
    try:
        # 繝・・繧ｿ繝吶・繧ｹ謗･邯・        conn = get_db_connection()
        
        # 繝・・繧ｿ繝吶・繧ｹ諠・ｱ繧貞叙蠕・        with conn.cursor() as cur:
            # 繝・・繝悶Ν蟄伜惠遒ｺ隱・            cur.execute("SHOW TABLES LIKE 'high_schools'")
            result['db_info']['high_schools_exists'] = cur.fetchone() is not None
            
            # 繧ｫ繝ｩ繝諠・ｱ繧貞叙蠕・            if result['db_info']['high_schools_exists']:
                cur.execute("DESCRIBE high_schools")
                columns = cur.fetchall()
                result['db_info']['columns'] = [col['Field'] for col in columns]
                
                # 鬮俶｡謨ｰ繧貞叙蠕・                cur.execute("SELECT COUNT(*) as count FROM high_schools")
                count = cur.fetchone()
                result['db_info']['total_records'] = count['count'] if count else 0
        
        # 鬮俶｡諠・ｱ繧貞叙蠕・        with conn.cursor() as cur:
            cur.execute("SELECT * FROM high_schools WHERE id = %s", (school_id,))
            school = cur.fetchone()
            
            if school:
                # 霎樊嶌縺ｫ螟画鋤・・SON繧ｷ繝ｪ繧｢繝ｩ繧､繧ｺ蜿ｯ閭ｽ縺ｫ縺吶ｋ・・                school_dict = {}
                for key, value in school.items():
                    if isinstance(value, (int, float, str, bool, type(None))):
                        school_dict[key] = value
                    else:
                        # 髱槭す繝ｪ繧｢繝ｩ繧､繧ｺ蜿ｯ閭ｽ縺ｪ蝙九・譁・ｭ怜・蛹・                        school_dict[key] = str(value)
                
                result['school_data'] = school_dict
            else:
                result['errors'].append(f"ID {school_id} 縺ｮ鬮俶｡縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ")
    except Exception as e:
        result['errors'].append(f"繧ｨ繝ｩ繝ｼ: {str(e)}")
    finally:
        if 'conn' in locals():
            conn.close()
    
    # 繝・ヰ繝・げ諠・ｱ繧辿TML蠖｢蠑上〒陦ｨ遉ｺ
    debug_html = f"""
    <html>
    <head>
        <title>鬮俶｡諠・ｱ繝・ヰ繝・げ</title>
        <style>
            body {{ font-family: sans-serif; padding: 20px; }}
            pre {{ background: #f5f5f5; padding: 10px; border-radius: 5px; overflow: auto; }}
            .error {{ color: red; }}
        </style>
    </head>
    <body>
        <h1>鬮俶｡ID: {school_id} 縺ｮ繝・ヰ繝・げ諠・ｱ</h1>
        
        <h2>繝・・繧ｿ繝吶・繧ｹ諠・ｱ</h2>
        <pre>{str(result['db_info'])}</pre>
        
        <h2>鬮俶｡繝・・繧ｿ</h2>
        <pre>{str(result['school_data'])}</pre>
        
        <h2>繧ｨ繝ｩ繝ｼ</h2>
        {'<p class="error">繧ｨ繝ｩ繝ｼ縺ｪ縺・/p>' if not result['errors'] else ''}
        {''.join([f'<p class="error">{error}</p>' for error in result['errors']])}
        
        <hr>
        <p><a href="/myapp/index.cgi/student/high-schools">鬮俶｡荳隕ｧ縺ｫ謌ｻ繧・/a></p>
    </body>
    </html>
    """
    
    return debug_html

@app.route('/direct/high-school/<int:school_id>')
def direct_high_school_detail(school_id):
    """繝・Φ繝励Ξ繝ｼ繝医ｒ菴ｿ繧上★縺ｫ逶ｴ謗･HTML繧定ｿ斐☆鬮俶｡隧ｳ邏ｰ陦ｨ遉ｺ"""
    if not session.get('user_id'):
        return redirect('/myapp/index.cgi/login')
    
    try:
        # 繝・・繧ｿ繝吶・繧ｹ謗･邯・        conn = get_db_connection()
        school = None
        
        # 鬮俶｡諠・ｱ繧貞叙蠕・        try:
            with conn.cursor() as cur:
                cur.execute("SELECT * FROM high_schools WHERE id = %s", (school_id,))
                school = cur.fetchone()
        except Exception as e:
            return f"""
            <html>
            <body>
                <h1>繝・・繧ｿ蜿門ｾ励お繝ｩ繝ｼ</h1>
                <p>繧ｨ繝ｩ繝ｼ: {str(e)}</p>
                <p><a href="/myapp/index.cgi/student/high-schools">謌ｻ繧・/a></p>
            </body>
            </html>
            """
        finally:
            conn.close()
        
        if not school:
            log_error(f"鬮俶｡ID {school_id} 縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ縲・direct route)")
            return render_template('error.html',
                error=f"鬮俶｡諠・ｱ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ・・D: {school_id}・・, 
                back_url="/myapp/index.cgi/student/high-schools")
        
        # 繝・・繧ｿ繧堤峩謗･HTML縺ｧ陦ｨ遉ｺ
        school_html = f"""
        <html>
        <head>
            <title>{school['name']} 隧ｳ邏ｰ</title>
            <style>
                body {{ font-family: sans-serif; padding: 20px; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <h1>鬮俶｡隧ｳ邏ｰ: {school['name']}</h1>
            
            <table>
                <tr><th>ID</th><td>{school['id']}</td></tr>
                <tr><th>蜷咲ｧｰ</th><td>{school['name']}</td></tr>
                <tr><th>蝨ｰ蛹ｺ</th><td>{school.get('district', '-')}</td></tr>
                <tr><th>繧ｳ繝ｼ繧ｹ</th><td>{school.get('course_type', '-')}</td></tr>
                <tr><th>蛛丞ｷｮ蛟､</th><td>{school.get('deviation_score', '-')}</td></tr>
                <tr><th>譛菴主ｿ・ｦ∝・逕ｳ轤ｹ</th><td>{school.get('min_required_points', '-')}</td></tr>
                <tr><th>蛟咲紫</th><td>{school.get('competition_rate', '-')}</td></tr>
            </table>
            
            <p><a href="/myapp/index.cgi/student/high-schools">鬮俶｡荳隕ｧ縺ｫ謌ｻ繧・/a></p>
        </body>
        </html>
        """
        
        return school_html
        
    except Exception as e:
        # 菴輔ｉ縺九・莠域悄縺帙〓繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺溷ｴ蜷・        error_html = f"""
        <html>
        <body>
            <h1>繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆</h1>
            <p>繧ｨ繝ｩ繝ｼ: {str(e)}</p>
            <p><a href="/myapp/index.cgi/student/high-schools">謌ｻ繧・/a></p>
        </body>
        </html>
        """
        return error_html

# 雜・渕譛ｬ逧・↑繝・せ繝育畑繝ｫ繝ｼ繝茨ｼ医ユ繝ｳ繝励Ξ繝ｼ繝医ｂDB繧ゆｽｿ繧上↑縺・ヰ繝ｼ繧ｸ繝ｧ繝ｳ・・
@app.route('/test/basic')
def test_basic():
    """譛繧ょ渕譛ｬ逧・↑繝・せ繝・- 蜊倡ｴ斐↑繝・く繧ｹ繝亥ｿ懃ｭ斐ｒ霑斐☆縺縺・""
    return "蝓ｺ譛ｬ讖溯・繝・せ繝・- 謌仙粥縺励∪縺励◆"

@app.route('/test/session')
def test_session():
    """繧ｻ繝・す繝ｧ繝ｳ繧剃ｽｿ逕ｨ縺吶ｋ繝・せ繝・""
    if not session.get('test_count'):
        session['test_count'] = 1
    else:
        session['test_count'] += 1
    
    return f"繧ｻ繝・す繝ｧ繝ｳ繝・せ繝・- 繧ｫ繧ｦ繝ｳ繝・ {session.get('test_count')}"

@app.route('/test/db')
def test_db():
    """繝・・繧ｿ繝吶・繧ｹ謗･邯壹ユ繧ｹ繝・""
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            cur.execute("SELECT 1 as test")
            result = cur.fetchone()
        conn.close()
        
        return f"繝・・繧ｿ繝吶・繧ｹ謗･邯壹ユ繧ｹ繝・- 謌仙粥: {result['test']}"
    except Exception as e:
        return f"繝・・繧ｿ繝吶・繧ｹ謗･邯壹ユ繧ｹ繝・- 螟ｱ謨・ {str(e)}"

@app.route('/test/high-schools')
def test_high_schools():
    """鬮俶｡繝・・繝悶Ν縺ｮ繝・せ繝・""
    try:
        output = []
        
        conn = get_db_connection()
        # 繝・・繝悶Ν蟄伜惠遒ｺ隱・        with conn.cursor() as cur:
            cur.execute("SHOW TABLES LIKE 'high_schools'")
            if cur.fetchone():
                output.append("high_schools繝・・繝悶Ν縺悟ｭ伜惠縺励∪縺・)
                
                # 繧ｫ繝ｩ繝遒ｺ隱・                cur.execute("DESCRIBE high_schools")
                columns = [row['Field'] for row in cur.fetchall()]
                output.append(f"繧ｫ繝ｩ繝: {', '.join(columns)}")
                
                # 繝・・繧ｿ莉ｶ謨ｰ遒ｺ隱・                cur.execute("SELECT COUNT(*) as count FROM high_schools")
                count = cur.fetchone()['count']
                output.append(f"繝・・繧ｿ莉ｶ謨ｰ: {count}")
                
                # 繧ｵ繝ｳ繝励Ν繝・・繧ｿ蜿門ｾ・                if count > 0:
                    cur.execute("SELECT id, name FROM high_schools LIMIT 5")
                    schools = cur.fetchall()
                    for school in schools:
                        output.append(f"ID: {school['id']}, 蜷榊燕: {school['name']}")
            else:
                output.append("high_schools繝・・繝悶Ν縺悟ｭ伜惠縺励∪縺帙ｓ")
        conn.close()
        
        return "<br>".join(output)
    except Exception as e:
        return f"鬮俶｡繝・・繝悶Ν繝・せ繝・- 螟ｱ謨・ {str(e)}"

@app.route('/test/direct')
def test_direct():
    """蜊倡ｴ斐↑HTML繧堤峩謗･蜃ｺ蜉帙☆繧九ユ繧ｹ繝・""
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>逶ｴ謗･HTML蜃ｺ蜉帙ユ繧ｹ繝・/title>
    </head>
    <body>
        <h1>逶ｴ謗･HTML蜃ｺ蜉帙ユ繧ｹ繝・/h1>
        <p>縺薙・繝壹・繧ｸ縺ｯ繝・Φ繝励Ξ繝ｼ繝医ｒ菴ｿ繧上★縺ｫ逶ｴ謗･HTML繧貞・蜉帙＠縺ｦ縺・∪縺吶・/p>
        <ul>
            <li><a href="/myapp/index.cgi/test/basic">蝓ｺ譛ｬ繝・せ繝・/a></li>
            <li><a href="/myapp/index.cgi/test/session">繧ｻ繝・す繝ｧ繝ｳ繝・せ繝・/a></li>
            <li><a href="/myapp/index.cgi/test/db">繝・・繧ｿ繝吶・繧ｹ繝・せ繝・/a></li>
            <li><a href="/myapp/index.cgi/test/high-schools">鬮俶｡繝・・繝悶Ν繝・せ繝・/a></li>
        </ul>
    </body>
    </html>
    """
    return html

@app.route('/test/log-error')
def test_log_error():
    """繧ｨ繝ｩ繝ｼ繝ｭ繧ｰ繝・せ繝・""
    try:
        # 諢丞峙逧・↓繧ｨ繝ｩ繝ｼ繧堤匱逕溘＆縺帙ｋ
        result = 1 / 0
    except Exception as e:
        log_error(f"繝・せ繝育畑繧ｨ繝ｩ繝ｼ: {str(e)}")
        return "繧ｨ繝ｩ繝ｼ繝ｭ繧ｰ縺ｫ譖ｸ縺崎ｾｼ縺ｿ縺ｾ縺励◆縲ゅΟ繧ｰ繝輔ぃ繧､繝ｫ繧堤｢ｺ隱阪＠縺ｦ縺上□縺輔＞縲・

# 繝・・繧ｿ繝吶・繧ｹ菫ｮ蠕ｩ繧ｹ繧ｯ繝ｪ繝励ヨ
@app.route('/admin/db-repair')
def db_repair():
    """繝・・繧ｿ繝吶・繧ｹ菫ｮ蠕ｩ繝・・繝ｫ"""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return "縺薙・讖溯・縺ｯ隰帛ｸｫ縺ｮ縺ｿ菴ｿ逕ｨ縺ｧ縺阪∪縺・, 403
    
    results = []
    
    try:
        conn = get_db_connection()
        
        # 1. user_high_school_preferences 繝・・繝悶Ν縺ｮ菫ｮ蠕ｩ
        try:
            with conn.cursor() as cur:
                # 繝・・繝悶Ν蟄伜惠遒ｺ隱・                cur.execute("SHOW TABLES LIKE 'user_high_school_preferences'")
                if not cur.fetchone():
                    # 繝・・繝悶Ν縺後↑縺代ｌ縺ｰ菴懈・
                    cur.execute("""
                        CREATE TABLE user_high_school_preferences (
                            id INT AUTO_INCREMENT PRIMARY KEY,
                            user_id INT NOT NULL,
                            high_school_id INT NOT NULL,
                            preference_order INT NOT NULL DEFAULT 1,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                            UNIQUE KEY(user_id, high_school_id)
                        )
                    """)
                    results.append("user_high_school_preferences 繝・・繝悶Ν繧剃ｽ懈・縺励∪縺励◆")
                else:
                    results.append("user_high_school_preferences 繝・・繝悶Ν縺ｯ譌｢縺ｫ蟄伜惠縺励∪縺・)
        except Exception as e:
            results.append(f"user_high_school_preferences 繝・・繝悶Ν縺ｮ菫ｮ蠕ｩ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ: {str(e)}")
        
        # 2. subjects 繝・・繝悶Ν縺ｮ菫ｮ蠕ｩ
        try:
            with conn.cursor() as cur:
                # 繝・・繝悶Ν蟄伜惠遒ｺ隱・                cur.execute("SHOW TABLES LIKE 'subjects'")
                if not cur.fetchone():
                    # 繝・・繝悶Ν縺後↑縺代ｌ縺ｰ菴懈・
                    cur.execute("""
                        CREATE TABLE subjects (
                            id INT AUTO_INCREMENT PRIMARY KEY,
                            name VARCHAR(50) NOT NULL,
                            is_main TINYINT(1) NOT NULL DEFAULT 0,
                            display_order INT NOT NULL DEFAULT 0,
                            is_active TINYINT(1) NOT NULL DEFAULT 1,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        )
                    """)
                    
                    # 蝓ｺ譛ｬ繝・・繧ｿ謖ｿ蜈･
                    cur.execute("""
                        INSERT INTO subjects (id, name, is_main, display_order) VALUES 
                        (1, '蝗ｽ隱・, 1, 1),
                        (2, '謨ｰ蟄ｦ', 1, 2),
                        (3, '闍ｱ隱・, 1, 3),
                        (4, '逅・ｧ・, 1, 4),
                        (5, '遉ｾ莨・, 1, 5),
                        (6, '髻ｳ讌ｽ', 0, 6),
                        (7, '鄒手｡・, 0, 7),
                        (8, '菴楢ご', 0, 8),
                        (9, '謚螳ｶ', 0, 9)
                    """)
                    
                    results.append("subjects 繝・・繝悶Ν繧剃ｽ懈・縺励∝渕譛ｬ繝・・繧ｿ繧呈諺蜈･縺励∪縺励◆")
                else:
                    results.append("subjects 繝・・繝悶Ν縺ｯ譌｢縺ｫ蟄伜惠縺励∪縺・)
        except Exception as e:
            results.append(f"subjects 繝・・繝悶Ν縺ｮ菫ｮ蠕ｩ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ: {str(e)}")
        
        
        try:
            with conn.cursor() as cur:
                # 繝・・繝悶Ν蟄伜惠遒ｺ隱・                cur.execute("SHOW TABLES LIKE 'internal_points'")
                if not cur.fetchone():
                    # 繝・・繝悶Ν縺後↑縺代ｌ縺ｰ菴懈・
                    cur.execute("""
                        CREATE TABLE internal_points (
                            id INT AUTO_INCREMENT PRIMARY KEY,
                            student_id INT NOT NULL,
                            grade_year INT NOT NULL,
                            subject INT NOT NULL,
                            term INT NOT NULL,
                            point INT NOT NULL,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                            UNIQUE KEY(student_id, grade_year, subject, term)
                        )
                    """)
                    results.append("internal_points 繝・・繝悶Ν繧剃ｽ懈・縺励∪縺励◆")
                else:
                    results.append("internal_points 繝・・繝悶Ν縺ｯ譌｢縺ｫ蟄伜惠縺励∪縺・)
        except Exception as e:
            results.append(f"internal_points 繝・・繝悶Ν縺ｮ菫ｮ蠕ｩ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ: {str(e)}")
        
        # 4. high_schools 繝・・繝悶Ν縺ｮ繧ｵ繝ｳ繝励Ν繝・・繧ｿ
        try:
            with conn.cursor() as cur:
                # 繝・・繧ｿ莉ｶ謨ｰ遒ｺ隱・                cur.execute("SELECT COUNT(*) as count FROM high_schools")
                count = cur.fetchone()['count']
                
                if count == 0:
                    # 繧ｵ繝ｳ繝励Ν繝・・繧ｿ繧呈諺蜈･
                    cur.execute("""
                        INSERT INTO high_schools 
                        (name, district, course_type, min_required_points, deviation_score, competition_rate, year) 
                        VALUES 
                        ('繧ｵ繝ｳ繝励Ν鬮俶｡1', '逾槫･亥ｷ晉恁', '譎ｮ騾夂ｧ・, 40.0, 60.0, 1.2, 2025),
                        ('繧ｵ繝ｳ繝励Ν鬮俶｡2', '逾槫･亥ｷ晉恁', '譎ｮ騾夂ｧ・, 35.0, 55.0, 1.1, 2025)
                    """)
                    results.append("high_schools 繝・・繝悶Ν縺ｫ繧ｵ繝ｳ繝励Ν繝・・繧ｿ繧定ｿｽ蜉縺励∪縺励◆")
                else:
                    results.append(f"high_schools 繝・・繝悶Ν縺ｫ縺ｯ譌｢縺ｫ繝・・繧ｿ縺後≠繧翫∪縺呻ｼ・count}莉ｶ・・)
        except Exception as e:
            results.append(f"high_schools 繝・・繝悶Ν縺ｮ繝・・繧ｿ霑ｽ蜉荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ: {str(e)}")
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        results.append(f"繝・・繧ｿ繝吶・繧ｹ謗･邯壹お繝ｩ繝ｼ: {str(e)}")
    
    # 邨先棡繧辿TML縺ｧ陦ｨ遉ｺ
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>繝・・繧ｿ繝吶・繧ｹ菫ｮ蠕ｩ邨先棡</title>
        <style>
            body { font-family: sans-serif; padding: 20px; }
            .success { color: green; }
            .error { color: red; }
            h1 { color: #333; }
            ul { line-height: 1.6; }
            a { color: blue; text-decoration: none; }
            a:hover { text-decoration: underline; }
        </style>
    </head>
    <body>
        <h1>繝・・繧ｿ繝吶・繧ｹ菫ｮ蠕ｩ邨先棡</h1>
        <ul>
    """
    
    for result in results:
        error = "繧ｨ繝ｩ繝ｼ" in result
        html += f'<li class="{"error" if error else "success"}">{result}</li>'
    
    html += """
        </ul>
        <p><a href="/myapp/index.cgi/test/direct">繝・せ繝医・繝ｼ繧ｸ縺ｫ謌ｻ繧・/a></p>
        <p><a href="/myapp/index.cgi/teacher/dashboard">繝繝・す繝･繝懊・繝峨↓謌ｻ繧・/a></p>
    </body>
    </html>
    """
    
    return html

@app.route('/student/points-basic')
def student_points_basic():
    """雜・す繝ｳ繝励Ν縺ｪ繝昴う繝ｳ繝郁｡ｨ遉ｺ・医お繝ｩ繝ｼ險ｺ譁ｭ逕ｨ・・""
    html = (
        "<html>"
        "<head><title>繝昴う繝ｳ繝・/title></head>"
        "<body>"
        "<h1>繝昴う繝ｳ繝域ュ蝣ｱ - 繧ｷ繝ｳ繝励Ν迚・/h1>"
        "<p>繧ｷ繝ｳ繝励Ν陦ｨ遉ｺ繝・せ繝・/p>"
        "<a href='/myapp/index.cgi/student/dashboard'>繝繝・す繝･繝懊・繝峨↓謌ｻ繧・/a>"
        "</body>"
        "</html>"
    )
    return html

@app.route('/student/crane-game-basic')
def student_crane_game_basic():
    """雜・す繝ｳ繝励Ν縺ｪ繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝陦ｨ遉ｺ・医お繝ｩ繝ｼ險ｺ譁ｭ逕ｨ・・""
    return """
    <html>
    <head><title>繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝</title></head>
    <body>
        <h1>繧ｯ繝ｬ繝ｼ繝ｳ繧ｲ繝ｼ繝 - 繧ｷ繝ｳ繝励Ν迚・/h1>
        <p>繧ｷ繝ｳ繝励Ν陦ｨ遉ｺ繝・せ繝・/p>
        <a href="/myapp/index.cgi/student/dashboard">繝繝・す繝･繝懊・繝峨↓謌ｻ繧・/a>
    </body>
    </html>
    """

@app.route('/api/teacher/notification-count')
def teacher_notification_count():
    """譛ｪ蜃ｦ逅・・謌千ｸｾ蜷台ｸ企夂衍謨ｰ繧貞叙蠕励☆繧帰PI"""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    try:
        conn = get_db_connection()
        count = 0
        
        with conn.cursor() as cur:
            # 騾夂衍繝・・繝悶Ν縺ｮ蟄伜惠遒ｺ隱・            cur.execute("SHOW TABLES LIKE 'grade_improvement_notifications'")
            if cur.fetchone():
                # 譛ｪ蜃ｦ逅・・騾夂衍謨ｰ繧貞叙蠕・                cur.execute("""
                    SELECT COUNT(*) as count 
                    FROM grade_improvement_notifications 
                    WHERE is_processed = 0
                """)
                result = cur.fetchone()
                count = result['count'] if result else 0
        
        conn.close()
        return jsonify({'count': count})
    
    except Exception as e:
        log_error(f"Error getting notification count: {e}")
        return jsonify({'error': str(e)}), 500

# 謌千ｸｾ蜷台ｸ企夂衍繝壹・繧ｸ
@app.route('/teacher/grade-notifications', methods=['GET', 'POST'])
def teacher_grade_notifications():
    """隰帛ｸｫ逕ｨ縺ｮ謌千ｸｾ蜷台ｸ企夂衍繝壹・繧ｸ"""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return redirect('/myapp/index.cgi/login')
    
    teacher_id = session.get('user_id')
    error = None
    success = None
    
    # POST繝ｪ繧ｯ繧ｨ繧ｹ繝亥・逅・ｼ医・繧､繝ｳ繝井ｻ倅ｸ趣ｼ・    if request.method == 'POST':
        action = request.form.get('action')
        
        if action == 'award_points':
            notification_id = request.form.get('notification_id')
            student_id = request.form.get('student_id')
            points = request.form.get('points', type=int)
            
            if not all([notification_id, student_id, points]):
                error = "蠢・ｦ√↑諠・ｱ縺御ｸ崎ｶｳ縺励※縺・∪縺・
            else:
                try:
                    conn = get_db_connection()
                    
                    # 騾夂衍諠・ｱ縺ｮ蜿門ｾ・                    with conn.cursor() as cur:
                        cur.execute("""
                            SELECT n.*, s.name as subject_name
                            FROM grade_improvement_notifications n
                            JOIN subjects s ON n.subject_id = s.id
                            WHERE n.id = %s AND n.is_processed = 0
                        """, (notification_id,))
                        
                        notification = cur.fetchone()
                        
                        if not notification:
                            error = "騾夂衍縺瑚ｦ九▽縺九ｉ縺ｪ縺・°縲∵里縺ｫ蜃ｦ逅・＆繧後※縺・∪縺・
                        else:
                            # 繝昴う繝ｳ繝井ｻ倅ｸ・                            level = notification['improvement_level']
                            event_type = f"grade_improvement_{level.lower()}"
                            comment = f"謌千ｸｾ蜷台ｸ翫・繝ｼ繝翫せ・・level}・・ {notification['subject_name']}縺鶏notification['previous_score']}轤ｹ縺九ｉ{notification['new_score']}轤ｹ縺ｫ蜷台ｸ・
                            
                            # teacher_award_points髢｢謨ｰ繧貞他縺ｳ蜃ｺ縺・                            success, message = teacher_award_points(
                                conn,
                                teacher_id,
                                student_id,
                                event_type,
                                points,
                                comment
                            )
                            
                            if success:
                                # 騾夂衍繧貞・逅・ｸ医∩縺ｫ譖ｴ譁ｰ
                                cur.execute("""
                                    UPDATE grade_improvement_notifications
                                    SET is_processed = 1,
                                        processed_by = %s,
                                        processed_at = NOW()
                                    WHERE id = %s
                                """, (teacher_id, notification_id))
                                
                                conn.commit()
                                success = "繝昴う繝ｳ繝医ｒ莉倅ｸ弱＠縲・夂衍繧貞・逅・ｸ医∩縺ｫ縺励∪縺励◆"
                            else:
                                error = f"繝昴う繝ｳ繝井ｻ倅ｸ弱お繝ｩ繝ｼ: {message}"
                except Exception as e:
                    log_error(f"Error processing grade notification: {e}")
                    error = f"蜃ｦ逅・お繝ｩ繝ｼ: {str(e)}"
                finally:
                    if 'conn' in locals():
                        conn.close()
    
    # 謌千ｸｾ蜷台ｸ企夂衍縺ｮ蜿門ｾ・    notifications = []
    unprocessed_count = 0
    
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            # 騾夂衍繝・・繝悶Ν縺ｮ蟄伜惠遒ｺ隱・            cur.execute("SHOW TABLES LIKE 'grade_improvement_notifications'")
            if not cur.fetchone():
                # 繝・・繝悶Ν縺悟ｭ伜惠縺励↑縺・ｴ蜷医・菴懈・
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS grade_improvement_notifications (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        student_id INT NOT NULL,
                        grade_year INT NOT NULL,
                        subject_id INT NOT NULL,
                        term INT NOT NULL,
                        previous_score INT NOT NULL,
                        new_score INT NOT NULL,
                        improvement_level VARCHAR(10) NOT NULL,
                        potential_points INT NOT NULL,
                        is_processed TINYINT(1) NOT NULL DEFAULT 0,
                        processed_by INT NULL,
                        processed_at TIMESTAMP NULL,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        INDEX(student_id),
                        INDEX(is_processed)
                    )
                """)
                conn.commit()
            
            # 騾夂衍繝・・繧ｿ繧貞叙蠕・            cur.execute("""
                SELECT n.*, 
                       u.name as student_name, 
                       s.name as subject_name,
                       t.name as teacher_name
                FROM grade_improvement_notifications n
                JOIN users u ON n.student_id = u.id
                JOIN subjects s ON n.subject_id = s.id
                LEFT JOIN users t ON n.processed_by = t.id
                ORDER BY n.is_processed ASC, n.created_at DESC
            """)
            
            notifications = cur.fetchall() or []
            
            # 譛ｪ蜃ｦ逅・・騾夂衍謨ｰ繧貞叙蠕・            cur.execute("""
                SELECT COUNT(*) as count
                FROM grade_improvement_notifications
                WHERE is_processed = 0
            """)
            
            result = cur.fetchone()
            unprocessed_count = result['count'] if result else 0
    except Exception as e:
        log_error(f"Error fetching grade notifications: {e}")
        error = f"騾夂衍縺ｮ蜿門ｾ励お繝ｩ繝ｼ: {str(e)}"
    finally:
        if 'conn' in locals():
            conn.close()
    
    # 繝・・繧ｿ縺後↑縺・ｴ蜷医・繝・せ繝育畑繝・・繧ｿ繧堤函謌・    if not notifications:
        notifications = generate_sample_notifications()
        unprocessed_count = sum(1 for n in notifications if not n['is_processed'])
    
    return render_template(
        'teacher_grade_notifications.html',
        name=session.get('user_name', ''),
        notifications=notifications,
        unprocessed_count=unprocessed_count,
        error=error,
        success=success
    )

# 繝・せ繝育畑縺ｮ繧ｵ繝ｳ繝励Ν騾夂衍逕滓・髢｢謨ｰ
def generate_sample_notifications():
    """繧ｵ繝ｳ繝励Ν縺ｮ謌千ｸｾ蜷台ｸ企夂衍繧堤函謌舌☆繧具ｼ医ユ繧ｹ繝育畑・・""
    current_time = datetime.now()
    one_day_ago = current_time - timedelta(days=1)
    two_days_ago = current_time - timedelta(days=2)
    one_hour_ago = current_time - timedelta(hours=1)
    
    return [
        {
            'id': 1,
            'student_id': 7,
            'student_name': '繝・せ繝育函蠕但',
            'grade_year': 3,
            'subject_id': 2,
            'subject_name': '謨ｰ蟄ｦ',
            'term': 2,
            'previous_score': 65,
            'new_score': 85,
            'improvement_level': '螟ｧ',
            'potential_points': 50,
            'is_processed': 0,
            'processed_by': None,
            'processed_at': None,
            'teacher_name': None,
            'created_at': one_hour_ago
        },
        {
            'id': 2,
            'student_id': 8,
            'student_name': '繝・せ繝育函蠕達',
            'grade_year': 2,
            'subject_id': 1,
            'subject_name': '蝗ｽ隱・,
            'term': 1,
            'previous_score': 72,
            'new_score': 82,
            'improvement_level': '荳ｭ',
            'potential_points': 30,
            'is_processed': 0,
            'processed_by': None,
            'processed_at': None,
            'teacher_name': None,
            'created_at': one_day_ago
        },
        {
            'id': 3,
            'student_id': 9,
            'student_name': '繝・せ繝育函蠕辰',
            'grade_year': 1,
            'subject_id': 3,
            'subject_name': '闍ｱ隱・,
            'term': 3,
            'previous_score': 55,
            'new_score': 62,
            'improvement_level': '蟆・,
            'potential_points': 20,
            'is_processed': 1,
            'processed_by': 1,
            'processed_at': two_days_ago,
            'teacher_name': '隰帛ｸｫA',
            'created_at': two_days_ago - timedelta(hours=2)
        }
    ]

# 蜃ｺ蟶ｭ邂｡逅・・繝ｼ繧ｸ
@app.route('/teacher/attendance', methods=['GET', 'POST'])
def teacher_attendance():
    """蜃ｺ蟶ｭ邂｡逅・・繝ｼ繧ｸ"""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return redirect('/myapp/index.cgi/login')
    
    # 螳溯｣・・逵∫払
    return "蜃ｺ蟶ｭ邂｡逅・・繝ｼ繧ｸ・亥ｮ溯｣・ｺ亥ｮ夲ｼ・

# 讓｡隧ｦ轤ｹ謨ｰ蜿門ｾ輸PI
@app.route('/api/teacher/mock-exam-scores', methods=['GET'])
def get_teacher_mock_exam_scores():
    """讓｡隧ｦ縺ｮ轤ｹ謨ｰ繝・・繧ｿ繧貞叙蠕励☆繧帰PI"""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    student_id = request.args.get('student_id')
    exam_type = request.args.get('exam_type')
    
    try:
        conn = get_db_connection()
        success, result = get_mock_exam_scores(conn, student_id, exam_type)
        conn.close()
        
        if success:
            return jsonify({
                'success': True,
                'scores': result
            })
        else:
            return jsonify({
                'success': False,
                'message': result
            }), 500
    except Exception as e:
        log_error(f"Error in get_teacher_mock_exam_scores: {e}")
        return jsonify({
            'success': False,
            'message': '繝・・繧ｿ蜿門ｾ嶺ｸｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆'
        }), 500

# 讓｡隧ｦ轤ｹ謨ｰ菫晏ｭ連PI
@app.route('/api/teacher/mock-exam-score', methods=['POST'])
def save_teacher_mock_exam_score():
    """讓｡隧ｦ縺ｮ轤ｹ謨ｰ繧剃ｿ晏ｭ倥☆繧帰PI"""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    teacher_id = session.get('user_id')
    data = request.json
    
    if not data:
        return jsonify({
            'success': False,
            'message': '繝・・繧ｿ縺碁∽ｿ｡縺輔ｌ縺ｦ縺・∪縺帙ｓ'
        }), 400
    
    try:
        conn = get_db_connection()
        success, result = save_mock_exam_score(conn, data, teacher_id)
        conn.close()
        
        if success:
            return jsonify({
                'success': True,
                'score_id': result['score_id'],
                'points_awarded': result['points_awarded'],
                'message': '讓｡隧ｦ轤ｹ謨ｰ繧剃ｿ晏ｭ倥＠縺ｾ縺励◆'
            })
        else:
            return jsonify({
                'success': False,
                'message': result
            }), 500
    except Exception as e:
        log_error(f"Error in save_teacher_mock_exam_score: {e}")
        return jsonify({
            'success': False,
            'message': '繝・・繧ｿ菫晏ｭ倅ｸｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆'
        }), 500

# 讓｡隧ｦ轤ｹ謨ｰ蜑企勁API
@app.route('/api/teacher/mock-exam-score/<int:score_id>', methods=['DELETE'])
def delete_teacher_mock_exam_score(score_id):
    """讓｡隧ｦ縺ｮ轤ｹ謨ｰ繧貞炎髯､縺吶ｋAPI"""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    teacher_id = session.get('user_id')
    
    try:
        conn = get_db_connection()
        success, message = delete_mock_exam_score(conn, score_id, teacher_id)
        conn.close()
        
        if success:
            return jsonify({
                'success': True,
                'message': message
            })
        else:
            return jsonify({
                'success': False,
                'message': message
            }), 500
    except Exception as e:
        log_error(f"Error in delete_teacher_mock_exam_score: {e}")
        return jsonify({
            'success': False,
            'message': '繝・・繧ｿ蜑企勁荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆'
        }), 500

# 謌千ｸｾ繝ｻ蜀・筏蜷台ｸ企夂衍繝壹・繧ｸ
@app.route('/teacher/improvement-notifications', methods=['GET', 'POST'])
def teacher_improvement_notifications():
    """隰帛ｸｫ逕ｨ縺ｮ謌千ｸｾ繝ｻ蜀・筏轤ｹ蜷台ｸ企夂衍繝壹・繧ｸ・育ｵｱ蜷育沿・・""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return redirect('/myapp/index.cgi/login')
    
    teacher_id = session.get('user_id')
    error = None
    success = None
    
    # POST繝ｪ繧ｯ繧ｨ繧ｹ繝亥・逅・ｼ医・繧､繝ｳ繝井ｻ倅ｸ趣ｼ・    if request.method == 'POST':
        action = request.form.get('action')
        
        if action == 'award_points':
            notification_id = request.form.get('notification_id')
            notification_type = request.form.get('notification_type')
            student_id = request.form.get('student_id')
            points = request.form.get('points', type=int)
            
            if not all([notification_id, notification_type, student_id, points]):
                error = "蠢・ｦ√↑諠・ｱ縺御ｸ崎ｶｳ縺励※縺・∪縺・
            else:
                try:
                    conn = get_db_connection()
                    
                    # 騾夂衍蜃ｦ逅・ｒ螳溯｡・                    success_process, message = process_notification(
                        conn, notification_id, notification_type, student_id, points, teacher_id
                    )
                    
                    if success_process:
                        success = message
                    else:
                        error = message
                    
                    conn.close()
                except Exception as e:
                    log_error(f"Error processing improvement notification: {e}")
                    error = f"蜃ｦ逅・お繝ｩ繝ｼ: {str(e)}"
    
    # 蜈ｨ縺ｦ縺ｮ騾夂衍繧貞叙蠕・    notifications = []
    unprocessed_count = 0
    
    try:
        conn = get_db_connection()
        
        # 蜷・夂衍繝・・繝悶Ν縺ｮ蟄伜惠遒ｺ隱阪・菴懈・
        ensure_notification_tables(conn)
        
        # 譛ｪ蜃ｦ逅・・騾夂衍謨ｰ繧貞叙蠕・        counts = get_notification_counts(conn)
        unprocessed_count = counts['total_count']
        
        # 蜈ｨ縺ｦ縺ｮ騾夂衍繧貞叙蠕・        notifications = get_all_improvement_notifications(conn)
        
        conn.close()
    except Exception as e:
        log_error(f"Error fetching improvement notifications: {e}")
        error = f"騾夂衍縺ｮ蜿門ｾ励お繝ｩ繝ｼ: {str(e)}"
    
    # 繝・・繧ｿ縺後↑縺・ｴ蜷医・繝・せ繝育畑繝・・繧ｿ逕滓・
    if not notifications:
        notifications = generate_sample_improvement_notifications()
        unprocessed_count = sum(1 for n in notifications if not n['is_processed'])
    
    return render_template(
        'teacher_improvement_notifications.html',
        name=session.get('user_name', ''),
        notifications=notifications,
        unprocessed_count=unprocessed_count,
        error=error,
        success=success
    )

# 繝・せ繝育畑縺ｮ繧ｵ繝ｳ繝励Ν騾夂衍逕滓・髢｢謨ｰ
def generate_sample_improvement_notifications():
    """繧ｵ繝ｳ繝励Ν縺ｮ謌千ｸｾ繝ｻ蜀・筏蜷台ｸ企夂衍繧堤函謌舌☆繧具ｼ医ユ繧ｹ繝育畑・・""
    current_time = datetime.now()
    one_day_ago = current_time - timedelta(days=1)
    two_days_ago = current_time - timedelta(days=2)
    one_hour_ago = current_time - timedelta(hours=1)
    
    return [
        {
            'id': 1,
            'student_id': 7,
            'student_name': '繝・せ繝育函蠕但',
            'student_type': 'elementary',
            'grade_year': 3,
            'subject_id': 2,
            'subject_name': '邂玲焚',
            'term': 2,
            'previous_score': 65,
            'new_score': 85,
            'improvement_level': '螟ｧ',
            'potential_points': 50,
            'is_processed': 0,
            'processed_by': None,
            'processed_at': None,
            'teacher_name': None,
            'term_display': '3蟷ｴ2蟄ｦ譛・,
            'notification_text': '邂玲焚縺ｮ謌千ｸｾ縺・5轤ｹ縺九ｉ85轤ｹ縺ｫ蜷台ｸ翫＠縺ｾ縺励◆',
            'created_at': one_hour_ago
        },
        {
            'id': 2,
            'student_id': 8,
            'student_name': '繝・せ繝育函蠕達',
            'student_type': 'middle',
            'grade_year': 7,
            'subject_id': 1,
            'subject_name': '蝗ｽ隱・,
            'term': 1,
            'previous_point': 3,
            'new_point': 4,
            'improvement_level': '蟆・,
            'potential_points': 20,
            'is_processed': 0,
            'processed_by': None,
            'processed_at': None,
            'teacher_name': None,
            'term_display': '7蟷ｴ1蟄ｦ譛・,
            'notification_text': '蝗ｽ隱槭・蜀・筏轤ｹ縺・縺九ｉ4縺ｫ蜷台ｸ翫＠縺ｾ縺励◆',
            'created_at': one_day_ago
        },
        {
            'id': 3,
            'student_id': 9,
            'student_name': '繝・せ繝育函蠕辰',
            'student_type': 'middle',
            'grade_year': 9,
            'subject_id': 3,
            'subject_name': '闍ｱ隱・,
            'term': 3,
            'previous_score': 55,
            'new_score': 75,
            'improvement_level': '螟ｧ',
            'potential_points': 50,
            'is_processed': 1,
            'processed_by': 1,
            'processed_at': two_days_ago,
            'teacher_name': '隰帛ｸｫA',
            'term_display': '9蟷ｴ3蟄ｦ譛・,
            'notification_text': '闍ｱ隱槭・謌千ｸｾ縺・5轤ｹ縺九ｉ75轤ｹ縺ｫ蜷台ｸ翫＠縺ｾ縺励◆',
            'created_at': two_days_ago - timedelta(hours=2)
        }
    ]

# API: 譛ｪ蜃ｦ逅・・騾夂衍謨ｰ繧貞叙蠕・@app.route('/api/teacher/improvement-notification-count')
def improvement_notification_count():
    """譛ｪ蜃ｦ逅・・謌千ｸｾ繝ｻ蜀・筏蜷台ｸ企夂衍謨ｰ繧貞叙蠕励☆繧帰PI"""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    try:
        conn = get_db_connection()
        
        # 蜷・夂衍繝・・繝悶Ν縺ｮ蟄伜惠遒ｺ隱阪・菴懈・
        ensure_notification_tables(conn)
        
        # 騾夂衍謨ｰ繧貞叙蠕・        counts = get_notification_counts(conn)
        conn.close()
        
        return jsonify(counts)
    except Exception as e:
        log_error(f"Error getting improvement notification count: {e}")
        return jsonify({
            'elementary_count': 0,
            'middle_count': 0,
            'high_count': 0,
            'internal_count': 0,
            'total_count': 0,
            'error': str(e)
        })

# 蟆丞ｭｦ逕滓ｨ｡隧ｦ轤ｹ謨ｰ邂｡逅・・繝ｼ繧ｸ
@app.route('/teacher/manual-score', methods=['GET', 'POST'])
def teacher_manual_score():
    if not session.get('user_id') or session.get('role') != 'teacher':
        return redirect('/myapp/index.cgi/login')
    
    students = []
    
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            cur.execute("""
                SELECT id, name, grade_level, role 
                FROM users 
                WHERE role = 'student'
                ORDER BY grade_level, name
            """)
            students = cur.fetchall()
    except Exception as e:
        log_error(f"Error fetching students: {e}")
    finally:
        if 'conn' in locals():
            conn.close()
    
    # 繝・Φ繝励Ξ繝ｼ繝亥錐縺梧ｭ｣縺励＞縺狗｢ｺ隱・    return render_template('teacher_mock_exam.html', 
                          name=session.get('user_name', ''),
                          students=students)

@app.route('/api/teacher/students')
def get_teacher_students():
    """逕溷ｾ偵ョ繝ｼ繧ｿ縺ｨ蜃ｺ蟶ｭ諠・ｱ繧貞叙蠕励☆繧帰PI - 謾ｹ蝟・沿"""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return jsonify({'success': False, 'message': 'Unauthorized'}), 401
    
    # 繝輔ぅ繝ｫ繧ｿ繝ｼ繝代Λ繝｡繝ｼ繧ｿ
    grade = request.args.get('grade', 'all')
    day = request.args.get('day')  # 譖懈律繝輔ぅ繝ｫ繧ｿ繝ｼ
    grade_level = request.args.get('grade_level')  # 隧ｳ邏ｰ縺ｪ蟄ｦ蟷ｴ繝ｬ繝吶Ν
    school_type = request.args.get('school_type')  # 蟄ｦ譬｡遞ｮ蛻･
    student_id = request.args.get('student_id')  # 蛟句挨逕溷ｾ棚D
    
    try:
        conn = get_db_connection()
        students = []
        
        with conn.cursor() as cur:
            # 蝓ｺ譛ｬ繧ｯ繧ｨ繝ｪ繧呈ｧ狗ｯ・            query = """
                SELECT u.id, u.name, u.grade_level, u.school_type, u.attendance_days
                FROM users u
                WHERE u.role = 'student'
            """
            
            params = []
            
            # ID繝輔ぅ繝ｫ繧ｿ繝ｼ
            if student_id:
                query += " AND u.id = %s"
                params.append(int(student_id))
            
            # 蟄ｦ蟷ｴ/蟄ｦ譬｡遞ｮ蛻･繝輔ぅ繝ｫ繧ｿ繝ｼ
            if grade_level and school_type:
                # 隧ｳ邏ｰ縺ｪ繝輔ぅ繝ｫ繧ｿ繝ｪ繝ｳ繧ｰ・・lementary-1縺ｪ縺ｩ・・                query += " AND u.grade_level = %s AND u.school_type = %s"
                params.append(int(grade_level))
                params.append(school_type)
            elif grade and grade != 'all':
                if grade in ['elementary', 'middle', 'high']:
                    query += " AND u.school_type = %s"
                    params.append(grade)
                else:
                    # 謨ｰ蛟､蟄ｦ蟷ｴ縺ｧ縺ｮ讀懃ｴ｢縺ｮ蝣ｴ蜷・                    query += " AND u.grade_level = %s"
                    try:
                        params.append(int(grade))
                    except ValueError:
                        # 謨ｰ蛟､縺ｧ縺ｪ縺・ｴ蜷医√％繧後・ school_type 縺九ｂ縺励ｌ縺ｪ縺・                        query = query.replace("u.grade_level = %s", "u.school_type = %s")
                        params.append(grade)
            
            # 譖懈律繝輔ぅ繝ｫ繧ｿ繝ｼ - attendance_days蛻励ｒ菴ｿ逕ｨ (all縺ｮ蝣ｴ蜷医・譚｡莉ｶ繧定ｿｽ蜉縺励↑縺・
            if day and day != 'all' and day != 'today':
                try:
                    day_int = int(day)
                    # 繧ｫ繝ｳ繝槫玄蛻・ｊ縺ｧ譬ｼ邏阪＆繧後※縺・ｋ縺ｮ縺ｧ縲√ヱ繧ｿ繝ｼ繝ｳ繝槭ャ繝√Φ繧ｰ縺ｧ讀懃ｴ｢
                    query += " AND (u.attendance_days LIKE %s OR u.attendance_days LIKE %s OR u.attendance_days LIKE %s OR u.attendance_days = %s)"
                    params.append(f"{day_int},%")  # 蜈磯ｭ
                    params.append(f"%,{day_int},%")  # 荳ｭ髢・                    params.append(f"%,{day_int}")  # 譛ｫ蟆ｾ
                    params.append(f"{day_int}")  # 蜊倅ｸ蛟､
                except ValueError:
                    pass  # 謨ｰ蛟､縺ｧ縺ｪ縺・ｴ蜷医・辟｡隕・            
            # 譛ｬ譌･繝輔ぅ繝ｫ繧ｿ繝ｼ
            if day == 'today':
                today_day_of_week = datetime.now().weekday()
                # Python: 譛域屆=0, 譌･譖・6 竊・JS: 譌･譖・0, 譛域屆=1, ...
                js_day_of_week = (today_day_of_week + 1) % 7
                
                query += " AND (u.attendance_days LIKE %s OR u.attendance_days LIKE %s OR u.attendance_days LIKE %s OR u.attendance_days = %s)"
                params.append(f"{js_day_of_week},%")  # 蜈磯ｭ
                params.append(f"%,{js_day_of_week},%")  # 荳ｭ髢・                params.append(f"%,{js_day_of_week}")  # 譛ｫ蟆ｾ
                params.append(f"{js_day_of_week}")  # 蜊倅ｸ蛟､
            
            # 荳ｦ縺ｳ鬆・- 蟄ｦ譬｡遞ｮ蛻･縺ｮ鬆・ｺ上ｒ譏守､ｺ逧・↓蛻ｶ蠕｡縺励∵ｬ｡縺ｫ蟄ｦ蟷ｴ縲∝錐蜑阪〒繧ｽ繝ｼ繝・            query += """
                ORDER BY 
                CASE u.school_type 
                    WHEN 'elementary' THEN 1 
                    WHEN 'middle' THEN 2 
                    WHEN 'high' THEN 3 
                    ELSE 4 
                END, 
                u.grade_level, 
                u.name
            """
            
            # 繧ｯ繧ｨ繝ｪ繧定ｨ倬鹸・医ョ繝舌ャ繧ｰ逕ｨ・・            log_error(f"SQL Query: {query}")
            log_error(f"SQL Params: {params}")
            
            # 繧ｯ繧ｨ繝ｪ螳溯｡・            cur.execute(query, params)
            student_rows = cur.fetchall()
            
            # 逕溷ｾ偵ョ繝ｼ繧ｿ縺ｫ繝ｭ繧ｰ繧､繝ｳ繝ｻ蜃ｺ蟶ｭ諠・ｱ繧定ｿｽ蜉
            today = datetime.now().date()
            for student in student_rows:
                student_id = student['id']
                
                # 莉頑律縺ｮ繝ｭ繧ｰ繧､繝ｳ遒ｺ隱・                cur.execute("""
                    SELECT id FROM login_history
                    WHERE user_id = %s AND login_date = %s
                """, (student_id, today))
                has_logged_in_today = cur.fetchone() is not None
                
                # 譛邨ゅΟ繧ｰ繧､繝ｳ譎る俣蜿門ｾ・                cur.execute("""
                    SELECT login_time FROM login_history
                    WHERE user_id = %s
                    ORDER BY login_time DESC LIMIT 1
                """, (student_id,))
                last_login_row = cur.fetchone()
                last_login = last_login_row['login_time'] if last_login_row else None
                
                # 蜃ｺ蟶ｭ迥ｶ諷狗｢ｺ隱・                cur.execute("""
                    SELECT status FROM attendance_records
                    WHERE user_id = %s AND attendance_date = %s
                """, (student_id, today))
                attendance_row = cur.fetchone()
                attendance_today = attendance_row['status'] if attendance_row else None
                
                students.append({
                    'id': student_id,
                    'name': student['name'],
                    'grade_level': student['grade_level'],
                    'school_type': student['school_type'],
                    'attendance_days': student['attendance_days'],
                    'lastLogin': last_login,
                    'hasLoggedInToday': has_logged_in_today,
                    'attendanceToday': attendance_today
                })
        
        conn.close()
        
        # 繝・・繧ｿ縺後↑縺・ｴ蜷医〒繧ゅム繝溘・繝・・繧ｿ縺ｯ菴ｿ逕ｨ縺帙★縲∫ｩｺ縺ｮ驟榊・繧定ｿ斐☆
        return jsonify({'success': True, 'students': students})
    
    except Exception as e:
        log_error(f"Error fetching students: {e}")
        if 'conn' in locals():
            conn.close()
        return jsonify({'success': False, 'message': str(e)}), 500

# app.py縺ｫ霑ｽ蜉縺吶ｋAPI繝・ヰ繝・げ逕ｨ繧ｨ繝ｳ繝峨・繧､繝ｳ繝・
@app.route('/api/debug/info')
def api_debug_info():
    """API繝・ヰ繝・げ諠・ｱ繧定ｿ斐☆繧ｨ繝ｳ繝峨・繧､繝ｳ繝・""
    # 蝓ｺ譛ｬ諠・ｱ繧貞庶髮・    debug_info = {
        'server_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'app_root': os.path.dirname(os.path.abspath(__file__)),
        'python_version': sys.version,
        'routes': [],
        'session': {},
        'request': {
            'path': request.path,
            'method': request.method,
            'headers': dict(request.headers),
            'args': dict(request.args),
        }
    }
    
    # 繧ｻ繝・す繝ｧ繝ｳ諠・ｱ・医そ繧ｭ繝･繝ｪ繝・ぅ荳企㍾隕√↑諠・ｱ縺ｯ髯､縺擾ｼ・    if session:
        safe_session = {}
        for key, value in session.items():
            if key not in ['password', 'token', 'secret']:
                safe_session[key] = value
        debug_info['session'] = safe_session
    
    # 逋ｻ骭ｲ縺輔ｌ縺ｦ縺・ｋ繝ｫ繝ｼ繝域ュ蝣ｱ
    for rule in app.url_map.iter_rules():
        debug_info['routes'].append({
            'endpoint': rule.endpoint,
            'methods': list(rule.methods),
            'path': str(rule)
        })
    
    # 繝・・繧ｿ繝吶・繧ｹ謗･邯壹ユ繧ｹ繝・    db_status = {'connected': False, 'message': ''}
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            cur.execute("SELECT 1 as test")
            result = cur.fetchone()
            db_status['connected'] = True
            db_status['message'] = '謗･邯壽・蜉・
            
            # 繝・・繝悶Ν荳隕ｧ繧貞叙蠕・            cur.execute("SHOW TABLES")
            tables = cur.fetchall()
            db_status['tables'] = [table.values()[0] for table in tables]
            
            # students API縺ｧ菴ｿ逕ｨ縺吶ｋ繝・・繝悶Ν縺ｮ蟄伜惠遒ｺ隱・            for table_name in ['users', 'login_history', 'attendance_records']:
                cur.execute(f"SHOW TABLES LIKE '{table_name}'")
                exists = cur.fetchone() is not None
                db_status[f'table_{table_name}_exists'] = exists
        
        conn.close()
    except Exception as e:
        db_status['message'] = f'謗･邯壹お繝ｩ繝ｼ: {str(e)}'
    
    debug_info['database'] = db_status
    
    return jsonify(debug_info)

@app.route('/api/debug/test-query')
def api_debug_test_query():
    """API繝・ヰ繝・げ逕ｨ縺ｫ繝・せ繝医け繧ｨ繝ｪ繧貞ｮ溯｡後☆繧九お繝ｳ繝峨・繧､繝ｳ繝・""
    query = request.args.get('query')
    params_str = request.args.get('params', '[]')
    
    if not query:
        return jsonify({'error': '繧ｯ繧ｨ繝ｪ繝代Λ繝｡繝ｼ繧ｿ縺梧欠螳壹＆繧後※縺・∪縺帙ｓ'}), 400
    
    try:
        # 繝代Λ繝｡繝ｼ繧ｿ繧谷SON縺九ｉ蠕ｩ蜈・        params = json.loads(params_str)
        
        result = {
            'query': query,
            'params': params,
            'results': []
        }
        
        # 繧ｯ繧ｨ繝ｪ繧貞ｮ溯｡・        conn = get_db_connection()
        try:
            with conn.cursor() as cur:
                cur.execute(query, params)
                rows = cur.fetchall()
                result['results'] = rows
                result['row_count'] = len(rows)
                result['success'] = True
        except Exception as e:
            result['error'] = str(e)
            result['success'] = False
        finally:
            conn.close()
        
        return jsonify(result)
    except Exception as e:
        return jsonify({'error': f'繧ｯ繧ｨ繝ｪ螳溯｡後お繝ｩ繝ｼ: {str(e)}'}), 500

@app.route('/api/teacher/attendance', methods=['POST'])
def update_student_attendance():
    """逕溷ｾ偵・蜃ｺ蟶ｭ迥ｶ豕√ｒ譖ｴ譁ｰ縺吶ｋAPI"""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return jsonify({'success': False, 'message': 'Unauthorized'}), 401
    
    teacher_id = session.get('user_id')
    data = request.json
    
    if not data or 'attendance_records' not in data:
        return jsonify({'success': False, 'message': '蜃ｺ蟶ｭ繝・・繧ｿ縺後≠繧翫∪縺帙ｓ'}), 400
    
    try:
        conn = get_db_connection()
        updated_count = 0
        points_awarded_count = 0
        errors = []
        
        for record in data['attendance_records']:
            student_id = record.get('student_id')
            status = record.get('status')
            date = record.get('date', datetime.now().strftime('%Y-%m-%d'))
            award_points_flag = record.get('award_points', False)
            
            if not student_id or not status:
                continue
                
            try:
                with conn.cursor() as cur:
                    # 蜃ｺ蟶ｭ險倬鹸繧呈峩譁ｰ/菴懈・
                    cur.execute("""
                        SELECT id FROM attendance_records
                        WHERE user_id = %s AND attendance_date = %s
                    """, (student_id, date))
                    
                    existing = cur.fetchone()
                    
                    if existing:
                        cur.execute("""
                            UPDATE attendance_records
                            SET status = %s, recorded_by = %s, recorded_at = NOW()
                            WHERE id = %s
                        """, (status, teacher_id, existing['id']))
                    else:
                        cur.execute("""
                            INSERT INTO attendance_records
                            (user_id, attendance_date, status, recorded_by)
                            VALUES (%s, %s, %s, %s)
                        """, (student_id, date, status, teacher_id))
                    
                    conn.commit()  # 蜃ｺ蟶ｭ險倬鹸繧堤｢ｺ螳溘↓菫晏ｭ・                    updated_count += 1
                    
                    # 蜃ｺ蟶ｭ縺ｧ繝昴う繝ｳ繝井ｻ倅ｸ弱ヵ繝ｩ繧ｰ縺梧怏蜉ｹ縺ｪ繧牙ｮ溯｡・                    if status == 'present' and award_points_flag:
                        from points_utils import award_attendance_points
                        success, message = award_attendance_points(
                            conn, 
                            student_id, 
                            datetime.strptime(date, '%Y-%m-%d').date(),
                            teacher_id  # 謨吝ｸｫID繧呈ｸ｡縺・                        )
                        if success:
                            points_awarded_count += 1
                            conn.commit()  # 繝昴う繝ｳ繝井ｻ倅ｸ弱ｂ遒ｺ螳溘↓菫晏ｭ・                        else:
                            errors.append(f"逕溷ｾ棚D {student_id}: {message}")
            
            except Exception as e:
                log_error(f"Error processing student {student_id}: {e}")
                errors.append(f"逕溷ｾ棚D {student_id}: {str(e)}")
                conn.rollback()  # 縺薙・繝ｬ繧ｳ繝ｼ繝峨・蜃ｦ逅・・縺ｿ繝ｭ繝ｼ繝ｫ繝舌ャ繧ｯ
        
        # 謌仙粥邨先棡繧定ｿ斐☆
        result = {
            'success': True, 
            'message': f'{updated_count}莉ｶ縺ｮ蜃ｺ蟶ｭ險倬鹸繧呈峩譁ｰ縺励∪縺励◆',
            'updated_count': updated_count
        }
        
        # 繝昴う繝ｳ繝井ｻ倅ｸ弱′縺ゅｌ縺ｰ霑ｽ蜉諠・ｱ
        if points_awarded_count > 0:
            result['awarded_points'] = 10
            result['awarded_points_count'] = points_awarded_count
            result['message'] = f'{updated_count}莉ｶ縺ｮ蜃ｺ蟶ｭ險倬鹸繧呈峩譁ｰ縺励＋points_awarded_count}莉ｶ縺ｮ繝昴う繝ｳ繝井ｻ倅ｸ弱ｒ陦後＞縺ｾ縺励◆'
        
        # 繧ｨ繝ｩ繝ｼ縺後≠繧後・霑ｽ蜉
        if errors:
            result['errors'] = errors
            
        return jsonify(result)
    
    except Exception as e:
        log_error(f"Error updating attendance: {e}")
        if 'conn' in locals():
            conn.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500

# app.py縺ｫ霑ｽ蜉
@app.route('/api/teacher/class-schedule', methods=['GET', 'POST'])
def manage_class_schedule():
    """蟄ｦ蟷ｴ蛻･譖懈律險ｭ螳壹・蜿門ｾ励・譖ｴ譁ｰAPI"""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return jsonify({'success': False, 'message': 'Unauthorized'}), 401
    
    # GET繝ｪ繧ｯ繧ｨ繧ｹ繝・ 險ｭ螳壼叙蠕・    if request.method == 'GET':
        try:
            conn = get_db_connection()
            
            # 繝・・繝悶Ν縺悟ｭ伜惠縺吶ｋ縺狗｢ｺ隱阪＠縲√↑縺代ｌ縺ｰ菴懈・
            create_class_schedule_master_table(conn)
            
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT grade_level, school_type, day_of_week 
                    FROM class_schedule_master
                    WHERE is_active = 1
                """)
                schedule = cur.fetchall()
            conn.close()
            return jsonify({'success': True, 'schedule': schedule})
        except Exception as e:
            return jsonify({'success': False, 'message': str(e)}), 500
    
    # POST繝ｪ繧ｯ繧ｨ繧ｹ繝・ 險ｭ螳壽峩譁ｰ
    else:
        data = request.json
        if not data or 'schedule' not in data:
            return jsonify({'success': False, 'message': '險ｭ螳壹ョ繝ｼ繧ｿ縺後≠繧翫∪縺帙ｓ'}), 400
        
        try:
            conn = get_db_connection()
            
            # 繝・・繝悶Ν縺悟ｭ伜惠縺吶ｋ縺狗｢ｺ隱阪＠縲√↑縺代ｌ縺ｰ菴懈・
            create_class_schedule_master_table(conn)
            
            with conn.cursor() as cur:
                # 譌｢蟄倩ｨｭ螳壹ｒ辟｡蜉ｹ蛹・                cur.execute("UPDATE class_schedule_master SET is_active = 0")
                
                # 譁ｰ縺励＞險ｭ螳壹ｒ謖ｿ蜈･
                for item in data['schedule']:
                    grade_level = item.get('grade_level')
                    school_type = item.get('school_type')
                    day_of_week = item.get('day_of_week')
                    
                    # 荳肴ｭ｣縺ｪ蛟､繧偵せ繧ｭ繝・・
                    if grade_level is None or school_type is None or day_of_week is None:
                        continue
                    
                    # 蛟､繧呈紛謨ｰ縺ｫ螟画鋤・域枚蟄怜・縺ｧ譚･繧句庄閭ｽ諤ｧ縺後≠繧具ｼ・                    try:
                        grade_level = int(grade_level)
                        day_of_week = int(day_of_week)
                    except (ValueError, TypeError):
                        continue
                    
                    cur.execute("""
                        INSERT INTO class_schedule_master
                        (grade_level, school_type, day_of_week, is_active)
                        VALUES (%s, %s, %s, 1)
                        ON DUPLICATE KEY UPDATE is_active = 1
                    """, (grade_level, school_type, day_of_week))
            
            conn.commit()
            conn.close()
            return jsonify({'success': True, 'message': '險ｭ螳壹ｒ譖ｴ譁ｰ縺励∪縺励◆'})
        except Exception as e:
            if 'conn' in locals():
                conn.rollback()
                conn.close()
            return jsonify({'success': False, 'message': str(e)}), 500

# 逕溷ｾ偵・蜃ｺ蟶ｭ譖懈律繧呈峩譁ｰ縺吶ｋAPI - 霑ｽ蜉
@app.route('/api/teacher/update-student-attendance-days', methods=['POST'])
def update_student_attendance_days():
    """逕溷ｾ偵・蜃ｺ蟶ｭ譖懈律險ｭ螳壹ｒ譖ｴ譁ｰ縺吶ｋAPI"""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return jsonify({'success': False, 'message': 'Unauthorized'}), 401
    
    data = request.json
    if not data:
        return jsonify({'success': False, 'message': '繝・・繧ｿ縺後≠繧翫∪縺帙ｓ'}), 400
    
    student_id = data.get('student_id')
    attendance_days = data.get('attendance_days')  # "0,1,3,5" 縺ｮ繧医≧縺ｪ蠖｢蠑・    
    if not student_id:
        return jsonify({'success': False, 'message': '逕溷ｾ棚D縺梧欠螳壹＆繧後※縺・∪縺帙ｓ'}), 400
    
    try:
        conn = get_db_connection()
        
        # users繝・・繝悶Ν縺ｫ attendance_days 繧ｫ繝ｩ繝縺悟ｭ伜惠縺吶ｋ縺狗｢ｺ隱・        add_attendance_day_column_to_users(conn)
        
        with conn.cursor() as cur:
            # 逕溷ｾ偵′蟄伜惠縺吶ｋ縺狗｢ｺ隱・            cur.execute("SELECT id FROM users WHERE id = %s AND role = 'student'", (student_id,))
            if not cur.fetchone():
                return jsonify({'success': False, 'message': '謖・ｮ壹＆繧後◆逕溷ｾ偵′隕九▽縺九ｊ縺ｾ縺帙ｓ'}), 404
            
            # 蜃ｺ蟶ｭ譖懈律繧呈峩譁ｰ
            cur.execute("""
                UPDATE users
                SET attendance_days = %s,
                    updated_at = NOW()
                WHERE id = %s
            """, (attendance_days, student_id))
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'message': '蜃ｺ蟶ｭ譖懈律險ｭ螳壹ｒ譖ｴ譁ｰ縺励∪縺励◆'
        })
    
    except Exception as e:
        if 'conn' in locals():
            conn.rollback()
            conn.close()
        return jsonify({'success': False, 'message': str(e)}), 500

def create_class_schedule_master_table(conn):
    """蟄ｦ蟷ｴ蛻･譖懈律險ｭ螳壹ユ繝ｼ繝悶Ν繧剃ｽ懈・縺吶ｋ"""
    try:
        with conn.cursor() as cur:
            # 繝・・繝悶Ν菴懈・
            cur.execute("""
                CREATE TABLE IF NOT EXISTS class_schedule_master (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    grade_level INT NOT NULL,
                    school_type VARCHAR(20) NOT NULL,
                    day_of_week INT NOT NULL, 
                    is_active TINYINT(1) NOT NULL DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    UNIQUE KEY(grade_level, school_type, day_of_week)
                )
            """)
            app.logger.info("class_schedule_master繝・・繝悶Ν繧剃ｽ懈・縺励∪縺励◆")
            conn.commit()
    except Exception as e:
        app.logger.error(f"Error creating class_schedule_master table: {e}")
        conn.rollback()

# 譖懈律諠・ｱ繧置sers繝・・繝悶Ν縺ｫ菫晏ｭ倥☆繧九◆繧√・蛻励ｒ霑ｽ蜉
def add_attendance_day_column_to_users(conn):
    """users繝・・繝悶Ν縺ｫ attendance_days 蛻励ｒ霑ｽ蜉"""
    try:
        with conn.cursor() as cur:
            # 繧ｫ繝ｩ繝縺悟ｭ伜惠縺吶ｋ縺狗｢ｺ隱・            cur.execute("SHOW COLUMNS FROM users LIKE 'attendance_days'")
            if not cur.fetchone():
                # 繧ｫ繝ｩ繝繧定ｿｽ蜉
                cur.execute("""
                    ALTER TABLE users
                    ADD COLUMN attendance_days VARCHAR(20) NULL
                    COMMENT '蜃ｺ蟶ｭ譖懈律 (0,1,2,3,4,5,6 縺ｮ蠖｢蠑上〒菫晏ｭ倥・=譌･譖・'
                """)
                app.logger.info("users繝・・繝悶Ν縺ｫ attendance_days 繧ｫ繝ｩ繝繧定ｿｽ蜉縺励∪縺励◆")
            
            conn.commit()
    except Exception as e:
        app.logger.error(f"Error adding attendance_days column: {e}")
        conn.rollback()

def ensure_elementary_grades_table(conn):
    """蟆丞ｭｦ逕溽畑謌千ｸｾ繝・・繝悶Ν繧堤｢ｺ隱阪・菴懈・縺吶ｋ"""
    try:
        with conn.cursor() as cur:
            # 繝・・繝悶Ν菴懈・
            cur.execute("""
                CREATE TABLE IF NOT EXISTS elementary_grades (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    student_id INT NOT NULL,
                    grade_year INT NOT NULL,
                    subject INT NOT NULL,
                    month INT NOT NULL,
                    score INT NOT NULL,
                    comment TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    UNIQUE KEY unique_elementary_grade (student_id, grade_year, subject, month)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
            """)
            app.logger.info("elementary_grades 繝・・繝悶Ν繧堤｢ｺ隱・菴懈・縺励∪縺励◆")
            conn.commit()
    except Exception as e:
        app.logger.error(f"Error creating elementary_grades table: {e}")
        conn.rollback()

# 繝・・繝悶Ν菴懈・遒ｺ隱埼未謨ｰ
def ensure_monthly_test_comments_table(conn):
    """繝・せ繝域・邵ｾ縺ｮ繧ｳ繝｡繝ｳ繝育畑繝・・繝悶Ν繧堤｢ｺ隱阪・菴懈・縺吶ｋ"""
    try:
        with conn.cursor() as cur:
            # 繝・・繝悶Ν菴懈・
            cur.execute("""
                CREATE TABLE IF NOT EXISTS monthly_test_comments (
                    id int NOT NULL AUTO_INCREMENT PRIMARY KEY,
                    student_id int NOT NULL,
                    grade_year tinyint NOT NULL,
                    subject tinyint NOT NULL,
                    month tinyint NOT NULL,
                    comment text,
                    created_at timestamp NULL DEFAULT CURRENT_TIMESTAMP,
                    updated_at timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    UNIQUE KEY unique_comment (student_id, grade_year, subject, month)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
            """)
            app.logger.info("monthly_test_comments繝・・繝悶Ν繧堤｢ｺ隱・菴懈・縺励∪縺励◆")
            conn.commit()
    except Exception as e:
        app.logger.error(f"Error creating monthly_test_comments table: {e}")
        conn.rollback()

def ensure_eiken_words_table(conn):
    """闍ｱ讀懷腰隱槭ユ繝ｼ繝悶Ν繧堤｢ｺ隱阪・菴懈・縺吶ｋ・域隼蝟・沿・・""
    try:
        with conn.cursor() as cur:
            # 繝・・繝悶Ν菴懈・
            cur.execute("""
                CREATE TABLE IF NOT EXISTS eiken_words (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    grade VARCHAR(10) NOT NULL COMMENT '闍ｱ讀懊・邏・(5, 4, 3, pre2, 2)',
                    question_id INT NOT NULL COMMENT '蝠城｡栗D',
                    stage_number INT NOT NULL DEFAULT 1 COMMENT '繧ｹ繝・・繧ｸ逡ｪ蜿ｷ',
                    word VARCHAR(255) NOT NULL COMMENT '闍ｱ蜊倩ｪ・,
                    pronunciation VARCHAR(255) COMMENT '逋ｺ髻ｳ繝ｻ諢丞袖',
                    audio_url VARCHAR(255) COMMENT '髻ｳ螢ｰ繝輔ぃ繧､繝ｫURL',
                    notes TEXT COMMENT '霑ｽ蜉諠・ｱ繝ｻ繝｡繝｢',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    INDEX idx_grade_question (grade, question_id),
                    INDEX idx_grade_stage (grade, stage_number),
                    INDEX idx_word (word(20))
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
            """)
            
            # 繧ｫ繝ｩ繝縺ｮ蟄伜惠遒ｺ隱阪→霑ｽ蜉・域里蟄倥ユ繝ｼ繝悶Ν縺ｸ縺ｮ蠕梧婿莠呈鋤諤ｧ蟇ｾ蠢懶ｼ・            columns_to_check = [
                ('notes', "ALTER TABLE eiken_words ADD COLUMN notes TEXT COMMENT '霑ｽ蜉諠・ｱ繝ｻ繝｡繝｢' AFTER audio_url"),
                ('audio_url', "ALTER TABLE eiken_words ADD COLUMN audio_url VARCHAR(255) COMMENT '髻ｳ螢ｰ繝輔ぃ繧､繝ｫURL' AFTER pronunciation")
            ]
            
            for column_name, alter_sql in columns_to_check:
                try:
                    cur.execute(f"SHOW COLUMNS FROM eiken_words LIKE '{column_name}'")
                    if not cur.fetchone():
                        cur.execute(alter_sql)
                        log_error(f"eiken_words 繝・・繝悶Ν縺ｫ {column_name} 繧ｫ繝ｩ繝繧定ｿｽ蜉縺励∪縺励◆")
                except Exception as column_error:
                    log_error(f"繧ｫ繝ｩ繝遒ｺ隱・霑ｽ蜉繧ｨ繝ｩ繝ｼ ({column_name}): {column_error}")
            
            # 繧､繝ｳ繝・ャ繧ｯ繧ｹ縺ｮ遒ｺ隱阪→霑ｽ蜉
            indices_to_check = [
                ('idx_grade_question', "CREATE INDEX idx_grade_question ON eiken_words (grade, question_id)"),
                ('idx_grade_stage', "CREATE INDEX idx_grade_stage ON eiken_words (grade, stage_number)"),
                ('idx_word', "CREATE INDEX idx_word ON eiken_words (word(20))")
            ]
            
            for index_name, create_index_sql in indices_to_check:
                try:
                    cur.execute(f"SHOW INDEX FROM eiken_words WHERE Key_name = '{index_name}'")
                    if not cur.fetchone():
                        cur.execute(create_index_sql)
                        log_error(f"eiken_words 繝・・繝悶Ν縺ｫ {index_name} 繧､繝ｳ繝・ャ繧ｯ繧ｹ繧定ｿｽ蜉縺励∪縺励◆")
                except Exception as index_error:
                    log_error(f"繧､繝ｳ繝・ャ繧ｯ繧ｹ遒ｺ隱・霑ｽ蜉繧ｨ繝ｩ繝ｼ ({index_name}): {index_error}")
            
            log_error("eiken_words 繝・・繝悶Ν繧堤｢ｺ隱・菴懈・縺励∪縺励◆")
            conn.commit()
    except Exception as e:
        log_error(f"Error creating eiken_words table: {e}")
        conn.rollback()

# 繝・せ繝医さ繝｡繝ｳ繝亥叙蠕輸PI
@app.route('/api/student/test-comments')
def get_test_comments():
    """逕溷ｾ偵・繝・せ繝域・邵ｾ繧ｳ繝｡繝ｳ繝医ｒ蜿門ｾ励☆繧帰PI"""
    if not session.get('user_id'):
        return jsonify({'success': False, 'message': '隱崎ｨｼ繧ｨ繝ｩ繝ｼ縺ｧ縺・}), 401
    
    # 繧ｯ繧ｨ繝ｪ繝代Λ繝｡繝ｼ繧ｿ縺九ｉ逕溷ｾ棚D縺ｨ蟷ｴ蠎ｦ繧貞叙蠕・    student_id = request.args.get('student_id', type=int)
    grade_year = request.args.get('grade_year', type=int)
    
    # 繝ｦ繝ｼ繧ｶ繝ｼID繧呈ｱｺ螳・    if session.get('role') == 'teacher' and student_id:
        user_id = student_id
    else:
        user_id = session.get('user_id')
    
    # 蟷ｴ蠎ｦ縺梧欠螳壹＆繧後※縺・↑縺・ｴ蜷医・迴ｾ蝨ｨ縺ｮ蟄ｦ蟷ｴ繧剃ｽｿ逕ｨ
    if not grade_year:
        try:
            conn = get_db_connection()
            with conn.cursor() as cur:
                cur.execute("SELECT grade_level FROM users WHERE id = %s", (user_id,))
                result = cur.fetchone()
                grade_year = result['grade_level'] if result else 1
            conn.close()
        except Exception as e:
            log_error(f"Error getting user grade level: {e}")
            grade_year = 1
    
    try:
        conn = get_db_connection()
        
        # 繝・・繝悶Ν縺ｮ蟄伜惠遒ｺ隱・        ensure_monthly_test_comments_table(conn)
        
        # 繧ｳ繝｡繝ｳ繝医ョ繝ｼ繧ｿ繧貞叙蠕・        with conn.cursor() as cur:
            cur.execute("""
                SELECT subject, month, comment
                FROM monthly_test_comments
                WHERE student_id = %s AND grade_year = %s
            """, (user_id, grade_year))
            comments = cur.fetchall()
        
        # 遘醍岼縺ｨ譛医＃縺ｨ縺ｮ繧ｳ繝｡繝ｳ繝医ｒ謨ｴ逅・        result = {}
        for row in comments:
            subject_id = str(row['subject'])
            month = row['month']
            
            if subject_id not in result:
                result[subject_id] = {}
            
            result[subject_id][month] = row['comment']
        
        conn.close()
        return jsonify({
            'success': True,
            'comments': result
        })
    
    except Exception as e:
        log_error(f"Error getting test comments: {e}")
        return jsonify({
            'success': False,
            'message': '繧ｳ繝｡繝ｳ繝医ョ繝ｼ繧ｿ縺ｮ蜿門ｾ励↓螟ｱ謨励＠縺ｾ縺励◆'
        }), 500

# 繝・せ繝医さ繝｡繝ｳ繝域峩譁ｰAPI
@app.route('/api/student/update-test-comment', methods=['POST'])
def update_test_comment():
    """繝・せ繝域・邵ｾ縺ｮ繧ｳ繝｡繝ｳ繝医ｒ譖ｴ譁ｰ縺吶ｋAPI"""
    if not session.get('user_id'):
        return jsonify({'success': False, 'message': '隱崎ｨｼ繧ｨ繝ｩ繝ｼ縺ｧ縺・}), 401
    
    data = request.json
    if not data:
        return jsonify({'success': False, 'message': '繝・・繧ｿ縺碁∽ｿ｡縺輔ｌ縺ｦ縺・∪縺帙ｓ'}), 400
    
    student_id = data.get('student_id')
    grade_year = data.get('grade_year')
    subject_id = data.get('subject_id')
    month = data.get('month')
    comment = data.get('comment', '')
    
    # 蠢・ｦ√↑繝代Λ繝｡繝ｼ繧ｿ縺梧純縺｣縺ｦ縺・ｋ縺狗｢ｺ隱・    if not all([student_id, grade_year, subject_id, month]):
        return jsonify({'success': False, 'message': '蠢・ｦ√↑繝代Λ繝｡繝ｼ繧ｿ縺御ｸ崎ｶｳ縺励※縺・∪縺・}), 400
    
    # 繧｢繧ｯ繧ｻ繧ｹ讓ｩ繝√ぉ繝・け - 閾ｪ蛻・・霄ｫ縺ｾ縺溘・隰帛ｸｫ縺ｮ縺ｿ邱ｨ髮・庄閭ｽ
    if int(student_id) != int(session.get('user_id')) and session.get('role') != 'teacher':
        return jsonify({'success': False, 'message': '讓ｩ髯舌′縺ゅｊ縺ｾ縺帙ｓ'}), 403
    
    try:
        conn = get_db_connection()
        
        # 繝・・繝悶Ν縺ｮ蟄伜惠遒ｺ隱・        ensure_monthly_test_comments_table(conn)
        
        with conn.cursor() as cur:
            # 譌｢蟄倥・繧ｳ繝｡繝ｳ繝医ｒ讀懃ｴ｢
            cur.execute("""
                SELECT id FROM monthly_test_comments
                WHERE student_id = %s AND grade_year = %s AND subject = %s AND month = %s
            """, (student_id, grade_year, subject_id, month))
            
            existing = cur.fetchone()
            
            if existing:
                # 譌｢蟄倥さ繝｡繝ｳ繝医ｒ譖ｴ譁ｰ
                cur.execute("""
                    UPDATE monthly_test_comments
                    SET comment = %s, updated_at = NOW()
                    WHERE id = %s
                """, (comment, existing['id']))
                comment_id = existing['id']
            else:
                # 譁ｰ隕上さ繝｡繝ｳ繝医ｒ謖ｿ蜈･
                cur.execute("""
                    INSERT INTO monthly_test_comments
                    (student_id, grade_year, subject, month, comment)
                    VALUES (%s, %s, %s, %s, %s)
                """, (student_id, grade_year, subject_id, month, comment))
                comment_id = cur.lastrowid
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'comment_id': comment_id,
            'message': '繧ｳ繝｡繝ｳ繝医ｒ菫晏ｭ倥＠縺ｾ縺励◆'
        })
    
    except Exception as e:
        log_error(f"Error updating test comment: {e}")
        if 'conn' in locals():
            conn.rollback()
            conn.close()
        return jsonify({
            'success': False,
            'message': f'繧ｳ繝｡繝ｳ繝医・菫晏ｭ倥↓螟ｱ謨励＠縺ｾ縺励◆: {str(e)}'
        }), 500

@app.route('/api/student/update-elementary-grade', methods=['POST'])
def update_elementary_grade():
    """蟆丞ｭｦ逕溘・謌千ｸｾ繝・・繧ｿ繧呈峩譁ｰ縺吶ｋAPI"""
    if not session.get('user_id'):
        return jsonify({'success': False, 'message': '隱崎ｨｼ繧ｨ繝ｩ繝ｼ縺ｧ縺・}), 401
        
    data = request.json
    if not data:
        return jsonify({'success': False, 'message': '繝・・繧ｿ縺碁∽ｿ｡縺輔ｌ縺ｦ縺・∪縺帙ｓ'}), 400
    
    student_id = data.get('student_id')
    grade_year = data.get('grade_year')
    subject_id = data.get('subject_id')
    month = data.get('month')
    score = data.get('score')
    comment = data.get('comment', '')
    grade_id = data.get('grade_id')  # 譌｢蟄倥・謌千ｸｾ縺ｮ蝣ｴ蜷医・ID
    
    if not all([student_id, grade_year, subject_id, month]) or score is None:
        return jsonify({'success': False, 'message': '蠢・ｦ√↑繝代Λ繝｡繝ｼ繧ｿ縺御ｸ崎ｶｳ縺励※縺・∪縺・}), 400
    
    # 讓ｩ髯舌メ繧ｧ繝・け - 閾ｪ蛻・・霄ｫ縺ｾ縺溘・隰帛ｸｫ縺ｮ縺ｿ邱ｨ髮・庄閭ｽ
    if int(student_id) != int(session.get('user_id')) and session.get('role') != 'teacher':
        return jsonify({'success': False, 'message': '讓ｩ髯舌′縺ゅｊ縺ｾ縺帙ｓ'}), 403
    
    try:
        conn = get_db_connection()
        
        # 繝・・繝悶Ν縺ｮ蟄伜惠遒ｺ隱・        ensure_elementary_grades_table(conn)
        
        with conn.cursor() as cur:
            if grade_id:  # 譖ｴ譁ｰ
                cur.execute("""
                    UPDATE elementary_grades
                    SET score = %s, comment = %s
                    WHERE id = %s AND student_id = %s
                """, (score, comment, grade_id, student_id))
            else:  # 譁ｰ隕剰ｿｽ蜉
                # 蜷後§譚｡莉ｶ縺ｮ繝・・繧ｿ縺梧里縺ｫ縺ゅｋ縺狗｢ｺ隱・                cur.execute("""
                    SELECT id FROM elementary_grades
                    WHERE student_id = %s AND grade_year = %s AND subject = %s AND month = %s
                """, (student_id, grade_year, subject_id, month))
                
                existing = cur.fetchone()
                if existing:
                    # 譌｢蟄倥Ξ繧ｳ繝ｼ繝峨・譖ｴ譁ｰ
                    cur.execute("""
                        UPDATE elementary_grades
                        SET score = %s, comment = %s
                        WHERE id = %s
                    """, (score, comment, existing['id']))
                    grade_id = existing['id']
                else:
                    # 譁ｰ隕上Ξ繧ｳ繝ｼ繝峨・謖ｿ蜈･
                    cur.execute("""
                        INSERT INTO elementary_grades (student_id, grade_year, subject, month, score, comment)
                        VALUES (%s, %s, %s, %s, %s, %s)
                    """, (student_id, grade_year, subject_id, month, score, comment))
                    grade_id = cur.lastrowid
        
        conn.commit()
        
        return jsonify({
            'success': True,
            'grade_id': grade_id,
            'message': '謌千ｸｾ繧剃ｿ晏ｭ倥＠縺ｾ縺励◆'
        })
    
    except Exception as e:
        log_error(f"Error updating elementary grade: {e}")
        if 'conn' in locals():
            conn.rollback()
            conn.close()
        return jsonify({
            'success': False,
            'message': f'謌千ｸｾ縺ｮ菫晏ｭ倥↓螟ｱ謨励＠縺ｾ縺励◆: {str(e)}'
        }), 500

@app.route('/api/teacher/improved-students')
def get_improved_students():
    """謌千ｸｾ蜷台ｸ顔函蠕偵ョ繝ｼ繧ｿ蜿門ｾ輸PI"""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return jsonify({'success': False, 'message': 'Unauthorized'}), 401
    
    # 繧ｯ繧ｨ繝ｪ繝代Λ繝｡繝ｼ繧ｿ縺ｮ蜿門ｾ・    school_type = request.args.get('type', 'elementary')
    
    try:
        conn = get_db_connection()
        
        if school_type == 'elementary':
            # 蟆丞ｭｦ逕溷髄縺第・邵ｾ蜷台ｸ翫ョ繝ｼ繧ｿ縺ｮ蜿門ｾ・            start_month = request.args.get('start_month', 1, type=int)
            end_month = request.args.get('end_month', 12, type=int)
            subject_id = request.args.get('subject', 'all')
            min_improvement = request.args.get('min_improvement', 0, type=int)
            
            with conn.cursor() as cur:
                # 蝓ｺ譛ｬ逧・↑SQL繧ｯ繧ｨ繝ｪ縺ｮ讒狗ｯ・                query = """
                    SELECT 
                        s1.student_id, 
                        s1.grade_year, 
                        s1.subject, 
                        s1.month AS current_month, 
                        s1.score AS current_score, 
                        s2.month AS previous_month,
                        s2.score AS previous_score,
                        u.name AS student_name,
                        u.school_type,
                        u.grade_level,
                        sub.name AS subject_name,
                        (s1.score - s2.score) AS improvement
                    FROM elementary_grades s1
                    JOIN elementary_grades s2 ON 
                        s1.student_id = s2.student_id AND 
                        s1.grade_year = s2.grade_year AND 
                        s1.subject = s2.subject AND
                        s1.month != s2.month
                    JOIN users u ON s1.student_id = u.id
                    JOIN subjects sub ON s1.subject = sub.id
                    WHERE 
                        u.school_type = 'elementary' AND
                        s1.month = %s AND 
                        s2.month = %s AND 
                        (s1.score - s2.score) >= %s
                """
                
                params = [end_month, start_month, min_improvement]
                
                # 遘醍岼繝輔ぅ繝ｫ繧ｿ繝ｼ縺梧欠螳壹＆繧後※縺・ｋ蝣ｴ蜷医・WHERE蜿･縺ｫ霑ｽ蜉
                if subject_id != 'all':
                    query += " AND s1.subject = %s"
                    params.append(int(subject_id))
                    
                # 蜷台ｸ雁ｹ・〒繧ｽ繝ｼ繝・                query += " ORDER BY (s1.score - s2.score) DESC"
                
                # 繧ｯ繧ｨ繝ｪ繧貞ｮ溯｡・                log_error(f"SQL Query: {query}")
                log_error(f"SQL Params: {params}")
                
                cur.execute(query, params)
                results = cur.fetchall()
                
                # 邨先棡繧偵Μ繧ｹ繝亥ｽ｢蠑上↓謨ｴ蠖｢
                students = []
                for row in results:
                    # JavaScript縺ｧ菴ｿ縺・ｄ縺吶＞蠖｢蠑上↓螟画鋤
                    student = {
                        'id': row['student_id'],
                        'name': row['student_name'],
                        'grade_level': row['grade_level'],
                        'school_type': row['school_type'],
                        'subject_id': row['subject'],
                        'subject_name': row['subject_name'],
                        'previous_month': row['previous_month'],
                        'current_month': row['current_month'],
                        'previous_score': row['previous_score'],
                        'current_score': row['current_score'],
                        'improvement': row['improvement']
                    }
                    
                    <div class="settings-title">繝・せ繝・</div>
                    <input type="text" id="test-text" value="Hello, this is a test.">
                    <button id="test-voice-btn">繝・せ繝亥・逕・/button>
                </div>
                
                <button id="save-settings-btn">險ｭ螳壹ｒ菫晏ｭ・/button>
            </div>
        </div>
        
        <script>
            // 迥ｶ諷狗ｮ｡逅・            const state = {{
                grade: '5',
                page: 1,
                search: '',
                stage: '',
                totalPages: 1,
                words: [],
                voiceSettings: {{
                    voice: null,
                    rate: 1,
                    pitch: 1
                }}
            }};
            
            // 髻ｳ螢ｰ蜷域・蛻晄悄蛹・            let synth = window.speechSynthesis;
            let voices = [];
            
            // 髻ｳ螢ｰ荳隕ｧ縺瑚ｪｭ縺ｿ霎ｼ縺ｾ繧後◆縺ｨ縺阪・繧､繝吶Φ繝・            function loadVoices() {{
                voices = synth.getVoices();
            }}
            
            // 髻ｳ螢ｰ荳隕ｧ縺ｮ隱ｭ縺ｿ霎ｼ縺ｿ
            loadVoices();
            if (synth.onvoiceschanged !== undefined) {{
                synth.onvoiceschanged = loadVoices;
            }}
            
            // DOM隕∫ｴ
            const gradeFilter = document.getElementById('grade-filter');
            const searchInput = document.getElementById('search-input');
            const stageFilter = document.getElementById('stage-filter');
            const applyFiltersBtn = document.getElementById('apply-filters');
            const resetFiltersBtn = document.getElementById('reset-filters');
            const wordList = document.getElementById('word-list');
            const loading = document.getElementById('loading');
            const pagination = document.getElementById('pagination');
            
            // 髻ｳ螢ｰ險ｭ螳壹Δ繝ｼ繝繝ｫ隕∫ｴ
            const voiceSettingsBtn = document.getElementById('voice-settings-btn');
            const voiceSettingsModal = document.getElementById('voice-settings-modal');
            const closeModalBtn = document.querySelector('.close');
            const voiceSelect = document.getElementById('voice-select');
            const rateRange = document.getElementById('rate-range');
            const rateValue = document.getElementById('rate-value');
            const pitchRange = document.getElementById('pitch-range');
            const pitchValue = document.getElementById('pitch-value');
            const testTextInput = document.getElementById('test-text');
            const testVoiceBtn = document.getElementById('test-voice-btn');
            const saveSettingsBtn = document.getElementById('save-settings-btn');
            
            // 蜊倩ｪ槭ョ繝ｼ繧ｿ縺ｮ蜿門ｾ・            async function fetchWords() {{
                loading.style.display = 'block';
                wordList.innerHTML = '';
                pagination.innerHTML = '';
                
                try {{
                    // 繧ｯ繧ｨ繝ｪ繝代Λ繝｡繝ｼ繧ｿ縺ｮ讒狗ｯ・                    const params = new URLSearchParams();
                    params.append('grade', state.grade);
                    params.append('page', state.page);
                    params.append('per_page', 20);
                    
                    if (state.search) {{
                        params.append('search', state.search);
                    }}
                    
                    if (state.stage) {{
                        params.append('stage', state.stage);
                    }}
                    
                    // API繝ｪ繧ｯ繧ｨ繧ｹ繝・                    const response = await fetch(`/api/eiken-words?${{params.toString()}}`);
                    const data = await response.json();
                    
                    if (data.success) {{
                        state.words = data.words || [];
                        state.totalPages = data.pagination.total_pages || 1;
                        
                        // 蜊倩ｪ槭Μ繧ｹ繝医・陦ｨ遉ｺ
                        renderWords();
                        // 繝壹・繧ｸ繝阪・繧ｷ繝ｧ繝ｳ縺ｮ陦ｨ遉ｺ
                        renderPagination();
                    }} else {{
                        wordList.innerHTML = `<p>繝・・繧ｿ縺ｮ蜿門ｾ励↓螟ｱ謨励＠縺ｾ縺励◆: ${{data.message || '繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆'}}</p>`;
                    }}
                }} catch (error) {{
                    wordList.innerHTML = `<p>繧ｨ繝ｩ繝ｼ: ${{error.message || '繝・・繧ｿ縺ｮ蜿門ｾ嶺ｸｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆'}}</p>`;
                }} finally {{
                    loading.style.display = 'none';
                }}
            }}
            
            // 邨ｱ險域ュ蝣ｱ縺ｮ蜿門ｾ・            async function fetchStats() {{
                try {{
                    const response = await fetch(`/myapp/index.cgi/api/eiken-progress/stats?grade=${{state.grade}}`);
                    const data = await response.json();
                    
                    if (data.success) {{
                        document.getElementById('mastered-count').textContent = data.stats?.mastered || 0;
                        document.getElementById('learning-count').textContent = data.stats?.learning || 0;
                        document.getElementById('total-count').textContent = data.total_words || 0;
                        document.getElementById('mastery-rate').textContent = `${{data.rates?.mastery_rate || 0}}%`;
                    }}
                }} catch (error) {{
                    console.error('邨ｱ險域ュ蝣ｱ縺ｮ蜿門ｾ励↓螟ｱ謨励＠縺ｾ縺励◆:', error);
                }}
            }}
            
            // 蜊倩ｪ槭Μ繧ｹ繝医・陦ｨ遉ｺ
            function renderWords() {{
                if (state.words.length === 0) {{
                    wordList.innerHTML = '<p>譚｡莉ｶ縺ｫ荳閾ｴ縺吶ｋ蜊倩ｪ槭′縺ゅｊ縺ｾ縺帙ｓ</p>';
                    return;
                }}
                
                wordList.innerHTML = state.words.map(word => {{
                    // 闍ｱ蜊倩ｪ槭・繧ｫ繧ｿ繧ｫ繝顔匱髻ｳ繧貞叙蠕・                    const katakana = englishToKatakana(word.pronunciation || '');
                    
                    return `
                    <div class="word-card" data-id="${{word.id}}">
                        <div class="word">${{word.word}}</div>
                        <div class="pronunciation">${{word.pronunciation || ''}}</div>
                        <div class="katakana-pronunciation">${{katakana}}</div>
                        <div>
                            <button class="audio-btn" onclick="speakWord('${{word.word}}', null, '${{word.pronunciation || ''}}')">笆ｶ 髻ｳ螢ｰ</button>
                            <button class="audio-btn" onclick="speakSlow('${{word.word}}', '${{word.pronunciation || ''}}')">世 繧・▲縺上ｊ</button>
                        </div>
                        <div>繧ｹ繝・・繧ｸ: ${{word.stage_number || 1}}</div>
                    </div>
                `).join('');
            }}
            
            // 繝壹・繧ｸ繝阪・繧ｷ繝ｧ繝ｳ縺ｮ陦ｨ遉ｺ
            function renderPagination() {{
                if (state.totalPages <= 1) return;
                
                let paginationHtml = '';
                
                // 蜑阪∈繝懊ち繝ｳ
                paginationHtml += `
                    <button ${{state.page === 1 ? 'disabled' : ''}} 
                            onclick="changePage(${{state.page - 1}})">蜑阪∈</button>
                `;
                
                // 繝壹・繧ｸ逡ｪ蜿ｷ
                for (let i = 1; i <= state.totalPages; i++) {{
                    if (
                        i === 1 || 
                        i === state.totalPages || 
                        (i >= state.page - 2 && i <= state.page + 2)
                    ) {{
                        paginationHtml += `
                            <button class="${{i === state.page ? 'active' : ''}}" 
                                    onclick="changePage(${{i}})">${{i}}</button>
                        `;
                    }} else if (
                        i === state.page - 3 || 
                        i === state.page + 3
                    ) {{
                        paginationHtml += `<span>...</span>`;
                    }}
                }}
                
                // 谺｡縺ｸ繝懊ち繝ｳ
                paginationHtml += `
                    <button ${{state.page === state.totalPages ? 'disabled' : ''}} 
                            onclick="changePage(${{state.page + 1}})">谺｡縺ｸ</button>
                `;
                
                pagination.innerHTML = paginationHtml;
            }}
            
            // 蜊倩ｪ櫁ｪｭ縺ｿ荳翫￡讖溯・・郁恭蜊倩ｪ槭・縺ｿ逋ｺ髻ｳ・・            function speakWord(text, audioUrl, pronunciation) {{
                // 蜀咲函荳ｭ縺ｮ髻ｳ螢ｰ繧偵☆縺ｹ縺ｦ蛛懈ｭ｢
                synth.cancel();
                
                // 闍ｱ蜊倩ｪ槭ｒ隱ｭ縺ｿ荳翫￡繧具ｼ域律譛ｬ隱樣Κ蛻・・繧ｹ繧ｭ繝・・・・                if (pronunciation) {{
                    // 譌･譛ｬ隱樊枚蟄暦ｼ医・繧峨′縺ｪ縲√き繧ｿ繧ｫ繝翫∵ｼ｢蟄暦ｼ峨ｒ髯､蜴ｻ
                    const englishOnly = pronunciation.replace(/[\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]/g, "").trim();
                    
                    // 闍ｱ蜊倩ｪ槭ｒ隱ｭ縺ｿ荳翫￡繧九◆繧√・險ｭ螳・                    const utteranceEng = new SpeechSynthesisUtterance(englishOnly);
                    
                    // 髻ｳ螢ｰ險ｭ螳壹ｒ驕ｩ逕ｨ
                    if (state.voiceSettings.voice) {{
                        utteranceEng.voice = state.voiceSettings.voice;
                    }}
                    utteranceEng.lang = 'en-US'; // 闍ｱ隱櫁ｨｭ螳・                    utteranceEng.rate = state.voiceSettings.rate;
                    utteranceEng.pitch = state.voiceSettings.pitch;
                    
                    synth.speak(utteranceEng);
                }}
            }}
            
            // 繧・▲縺上ｊ隱ｭ縺ｿ荳翫￡讖溯・・郁恭蜊倩ｪ槭・縺ｿ逋ｺ髻ｳ・・            function speakSlow(text, pronunciation) {{
                // 蜀咲函荳ｭ縺ｮ髻ｳ螢ｰ繧偵☆縺ｹ縺ｦ蛛懈ｭ｢
                synth.cancel();
                
                // 闍ｱ蜊倩ｪ槭ｒ繧・▲縺上ｊ逋ｺ髻ｳ・域律譛ｬ隱樣Κ蛻・・繧ｹ繧ｭ繝・・・・                if (pronunciation) {{
                    // 譌･譛ｬ隱樊枚蟄暦ｼ医・繧峨′縺ｪ縲√き繧ｿ繧ｫ繝翫∵ｼ｢蟄暦ｼ峨ｒ髯､蜴ｻ
                    const englishOnly = pronunciation.replace(/[\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]/g, "").trim();
                    
                    // 闍ｱ蜊倩ｪ槭ｒ隱ｭ縺ｿ荳翫￡繧九◆繧√・險ｭ螳・                    const utteranceEng = new SpeechSynthesisUtterance(englishOnly);
                    
                    // 髻ｳ螢ｰ險ｭ螳壹ｒ驕ｩ逕ｨ・磯溷ｺｦ繧貞濠蛻・↓・・                    if (state.voiceSettings.voice) {{
                        utteranceEng.voice = state.voiceSettings.voice;
                    }}
                    utteranceEng.lang = 'en-US'; // 闍ｱ隱櫁ｨｭ螳・                    utteranceEng.rate = state.voiceSettings.rate * 0.5; // 蜊雁・縺ｮ騾溘＆
                    utteranceEng.pitch = state.voiceSettings.pitch;
                    
                    synth.speak(utteranceEng);
                }}
            }}
            
            // 髻ｳ螢ｰ險ｭ螳壹Δ繝ｼ繝繝ｫ繧帝幕縺・            function openVoiceSettingsModal() {{
                voiceSettingsModal.style.display = 'block';
                loadVoices();
            }}
            
            // 髻ｳ螢ｰ險ｭ螳壹Δ繝ｼ繝繝ｫ繧帝哩縺倥ｋ
            function closeVoiceSettingsModal() {{
                voiceSettingsModal.style.display = 'none';
            }}
            
            // 髻ｳ螢ｰ繝ｪ繧ｹ繝医・隱ｭ縺ｿ霎ｼ縺ｿ
            function loadVoices() {{
                voices = synth.getVoices();
                
                // 闍ｱ隱槭・髻ｳ螢ｰ縺ｮ縺ｿ繧偵ヵ繧｣繝ｫ繧ｿ繝ｪ繝ｳ繧ｰ
                const englishVoices = voices.filter(voice => voice.lang.includes('en'));
                
                voiceSelect.innerHTML = englishVoices.map(voice =>
                    `<option value="${{voice.name}}" ${{
                        state.voiceSettings.voice && state.voiceSettings.voice.name === voice.name ? 'selected' : ''
                    }}>${{voice.name}} (${{voice.lang}})</option>`
                ).join('');
                
                if (!state.voiceSettings.voice && englishVoices.length > 0) {{
                    state.voiceSettings.voice = englishVoices[0];
                }}
            }}
            
            // 繝・せ繝磯浹螢ｰ縺ｮ蜀咲函
            function testVoice() {{
                const selectedVoiceName = voiceSelect.value;
                const selectedVoice = voices.find(voice => voice.name === selectedVoiceName);
                
                const rate = parseFloat(rateRange.value);
                const pitch = parseFloat(pitchRange.value);
                const text = testTextInput.value;
                
                synth.cancel();
                
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.voice = selectedVoice;
                utterance.rate = rate;
                utterance.pitch = pitch;
                
                synth.speak(utterance);
            }}
            
            // 髻ｳ螢ｰ險ｭ螳壹・菫晏ｭ・            function saveVoiceSettings() {{
                const selectedVoiceName = voiceSelect.value;
                const selectedVoice = voices.find(voice => voice.name === selectedVoiceName);
                
                state.voiceSettings.voice = selectedVoice;
                state.voiceSettings.rate = parseFloat(rateRange.value);
                state.voiceSettings.pitch = parseFloat(pitchRange.value);
                
                // 繝ｭ繝ｼ繧ｫ繝ｫ繧ｹ繝医Ξ繝ｼ繧ｸ縺ｫ菫晏ｭ・                try {{
                    localStorage.setItem('eiken_voice_settings', JSON.stringify({{
                        voiceName: selectedVoice.name,
                        rate: state.voiceSettings.rate,
                        pitch: state.voiceSettings.pitch
                    }}));
                }} catch (e) {{
                    console.error('險ｭ螳壹・菫晏ｭ倥↓螟ｱ謨励＠縺ｾ縺励◆:', e);
                }}
                
                closeVoiceSettingsModal();
            }}
            
            // 繝壹・繧ｸ螟画峩
            function changePage(page) {{
                state.page = page;
                fetchWords();
                window.scrollTo(0, 0);
            }}
            
            // 繧､繝吶Φ繝医Μ繧ｹ繝翫・
            applyFiltersBtn.addEventListener('click', () => {{
                state.grade = gradeFilter.value;
                state.search = searchInput.value;
                state.stage = stageFilter.value;
                state.page = 1;
                fetchWords();
                fetchStats();
            }});
            
            resetFiltersBtn.addEventListener('click', () => {{
                gradeFilter.value = '5';
                searchInput.value = '';
                stageFilter.value = '';
                state.grade = '5';
                state.search = '';
                state.stage = '';
                state.page = 1;
                fetchWords();
                fetchStats();
            }});
            
            voiceSettingsBtn.addEventListener('click', openVoiceSettingsModal);
            closeModalBtn.addEventListener('click', closeVoiceSettingsModal);
            testVoiceBtn.addEventListener('click', testVoice);
            saveSettingsBtn.addEventListener('click', saveVoiceSettings);
            
            // 繝ｬ繝ｳ繧ｸ縺ｮ蛟､陦ｨ遉ｺ
            rateRange.addEventListener('input', () => {{
                rateValue.textContent = rateRange.value;
            }});
            
            pitchRange.addEventListener('input', () => {{
                pitchValue.textContent = pitchRange.value;
            }});
            
            // 髻ｳ螢ｰ繝ｪ繧ｹ繝医・隱ｭ縺ｿ霎ｼ縺ｿ
            if (synth.onvoiceschanged !== undefined) {{
                synth.onvoiceschanged = loadVoices;
            }}
            
            // 菫晏ｭ倥＆繧後◆險ｭ螳壹ｒ隱ｭ縺ｿ霎ｼ繧
            function loadSavedSettings() {{
                try {{
                    const savedSettings = localStorage.getItem('eiken_voice_settings');
                    if (savedSettings) {{
                        const settings = JSON.parse(savedSettings);
                        rateRange.value = settings.rate;
                        rateValue.textContent = settings.rate;
                        pitchRange.value = settings.pitch;
                        pitchValue.textContent = settings.pitch;
                        
                        state.voiceSettings.rate = settings.rate;
                        state.voiceSettings.pitch = settings.pitch;
                        
                        // 髻ｳ螢ｰ縺ｯ蠕後〒險ｭ螳・                        setTimeout(() => {{
                            if (voices.length > 0) {{
                                const voice = voices.find(v => v.name === settings.voiceName);
                                if (voice) {{
                                    state.voiceSettings.voice = voice;
                                    voiceSelect.value = voice.name;
                                }}
                            }}
                        }}, 100);
                    }}
                }} catch (e) {{
                    console.error('險ｭ螳壹・隱ｭ縺ｿ霎ｼ縺ｿ縺ｫ螟ｱ謨励＠縺ｾ縺励◆:', e);
                }}
            }}
            
            // 蛻晄悄繝・・繧ｿ隱ｭ縺ｿ霎ｼ縺ｿ
            document.addEventListener('DOMContentLoaded', () => {{
                fetchWords();
                fetchStats();
                loadSavedSettings();
                setTimeout(loadVoices, 100); // 蟆代＠驕・ｻｶ縺輔○縺ｦ髻ｳ螢ｰ繧定ｪｭ縺ｿ霎ｼ繧
            }});
            
            // 繧ｰ繝ｭ繝ｼ繝舌Ν縺ｫ髢｢謨ｰ繧貞・髢・            window.speakWord = speakWord;
            window.speakSlow = speakSlow;
            window.changePage = changePage;
        </script>
    </body>
    </html>
    """
    
    return html

# 繝輔Ο繝ｳ繝医お繝ｳ繝臥畑繝・ヰ繝・げ繝・・繝ｫ
@app.route('/debug/api-tester')
def debug_api_tester():
    """API繝・せ繝育畑縺ｮ繝輔Ο繝ｳ繝医お繝ｳ繝峨・繝ｼ繧ｸ"""
    if not session.get('user_id') or session.get('role') != 'teacher':
        return redirect('/myapp/index.cgi/login')
    
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>API Debug Tester</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
                padding: 20px;
                max-width: 1200px;
                margin: 0 auto;
                line-height: 1.5;
            }
            .card {
                background: white;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                padding: 20px;
                margin-bottom: 20px;
            }
            h1, h2, h3 {
                color: #333;
            }
            pre {
                background: #f5f5f5;
                padding: 10px;
                border-radius: 5px;
                overflow: auto;
                max-height: 400px;
            }
            button {
                background: #4285f4;
                color: white;
                border: none;
                padding: 10px 15px;
                border-radius: 4px;
                cursor: pointer;
                font-size: 14px;
            }
            button:hover {
                background: #3367d6;
            }
            input, select {
                padding: 8px 12px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
                margin-bottom: 10px;
            }
            label {
                display: block;
                margin-bottom: 5px;
                font-weight: 500;
            }
            .form-group {
                margin-bottom: 15px;
            }
            .result {
                margin-top: 20px;
            }
            .error {
                color: #d32f2f;
                background: #ffebee;
                padding: 10px;
                border-radius: 4px;
                border-left: 4px solid #d32f2f;
            }
            .nav {
                margin-bottom: 20px;
            }
            .nav a {
                display: inline-block;
                margin-right: 10px;
                color: #1a73e8;
                text-decoration: none;
            }
            .nav a:hover {
                text-decoration: underline;
            }
            .tab-content > div {
                display: none;
            }
            .tab-content > div.active {
                display: block;
            }
            .tabs {
                display: flex;
                border-bottom: 1px solid #ddd;
                margin-bottom: 15px;
            }
            .tab {
                padding: 8px 16px;
                cursor: pointer;
                border-bottom: 2px solid transparent;
            }
            .tab.active {
                border-bottom-color: #4285f4;
                color: #4285f4;
                font-weight: 500;
            }
        </style>
    </head>
    <body>
        <div class="nav">
            <a href="/myapp/index.cgi/teacher/dashboard">繝繝・す繝･繝懊・繝峨↓謌ｻ繧・/a>
        </div>
        <h1>API繝・ヰ繝・げ繝・・繝ｫ</h1>
        
        <div class="tabs">
            <div class="tab active" data-tab="info">繧ｷ繧ｹ繝・Β諠・ｱ</div>
            <div class="tab" data-tab="students">逕溷ｾ但PI</div>
            <div class="tab" data-tab="query">SQL繧ｯ繧ｨ繝ｪ</div>
            <div class="tab" data-tab="attendance">蜃ｺ蟶ｭAPI</div>
        </div>
        
        <div class="tab-content">
            <div id="info-tab" class="active">
                <div class="card">
                    <h2>繧ｷ繧ｹ繝・Β諠・ｱ</h2>
                    <button id="load-debug-info">繝・ヰ繝・げ諠・ｱ繧定ｪｭ縺ｿ霎ｼ繧</button>
                    <div class="result" id="debug-info-result"></div>
                </div>
            </div>
            
            <div id="students-tab">
                <div class="card">
                    <h2>逕溷ｾ但PI 繝・せ繝・/h2>
                    <div class="form-group">
                        <label for="grade-filter">蟄ｦ蟷ｴ繝輔ぅ繝ｫ繧ｿ繝ｼ:</label>
                        <select id="grade-filter">
                            <option value="all">蜈ｨ縺ｦ</option>
                            <option value="elementary">蟆丞ｭｦ逕・/option>
                            <option value="middle">荳ｭ蟄ｦ逕・/option>
                            <option value="high">鬮俶｡逕・/option>
                            <option value="1">1蟷ｴ逕・/option>
                            <option value="2">2蟷ｴ逕・/option>
                            <option value="3">3蟷ｴ逕・/option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="day-filter">譖懈律繝輔ぅ繝ｫ繧ｿ繝ｼ:</label>
                        <select id="day-filter">
                            <option value="all">蜈ｨ縺ｦ</option>
                            <option value="0">譌･譖懈律</option>
                            <option value="1">譛域屆譌･</option>
                            <option value="2">轣ｫ譖懈律</option>
                            <option value="3">豌ｴ譖懈律</option>
                            <option value="4">譛ｨ譖懈律</option>
                            <option value="5">驥第屆譌･</option>
                            <option value="6">蝨滓屆譌･</option>
                            <option value="today">莉頑律</option>
                        </select>
                    </div>
                    <button id="test-students-api">逕溷ｾ但PI繧偵ユ繧ｹ繝・/button>
                    <div class="result" id="students-api-result"></div>
                </div>
            </div>
            
            <div id="query-tab">
                <div class="card">
                    <h2>SQL繧ｯ繧ｨ繝ｪ螳溯｡・/h2>
                    <div class="form-group">
                        <label for="query-input">SQL:</label>
                        <textarea id="query-input" style="width: 100%; height: 100px;">SELECT * FROM users WHERE role = 'student' LIMIT 10</textarea>
                    </div>
                    <div class="form-group">
                        <label for="params-input">繝代Λ繝｡繝ｼ繧ｿ (JSON蠖｢蠑・:</label>
                        <input type="text" id="params-input" value="[]" style="width: 100%;">
                    </div>
                    <button id="run-query">繧ｯ繧ｨ繝ｪ螳溯｡・/button>
                    <div class="result" id="query-result"></div>
                </div>
            </div>
            
            <div id="attendance-tab">
                <div class="card">
                    <h2>蜃ｺ蟶ｭAPI 繝・せ繝・/h2>
                    <div class="form-group">
                        <label for="student-id">逕溷ｾ棚D:</label>
                        <input type="number" id="student-id" value="1">
                    </div>
                    <div class="form-group">
                        <label for="attendance-date">譌･莉・</label>
                        <input type="date" id="attendance-date" value="">
                    </div>
                    <div class="form-group">
                        <label for="attendance-status">蜃ｺ蟶ｭ迥ｶ諷・</label>
                        <select id="attendance-status">
                            <option value="present">蜃ｺ蟶ｭ</option>
                            <option value="absent">谺蟶ｭ</option>
                            <option value="late">驕・綾</option>
                            <option value="excused">谺蟶ｭ・亥ｱ雁・縺ゅｊ・・/option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>
                            <input type="checkbox" id="award-points" checked>
                            繝昴う繝ｳ繝井ｻ倅ｸ趣ｼ亥・蟶ｭ縺ｮ蝣ｴ蜷茨ｼ・                        </label>
                    </div>
                    <button id="test-attendance-api">蜃ｺ蟶ｭ險倬鹸繧偵ユ繧ｹ繝・/button>
                    <div class="result" id="attendance-api-result"></div>
                </div>
            </div>
        </div>
        
        <script>
            // 繧ｿ繝門・繧頑崛縺・            document.querySelectorAll('.tab').forEach(tab => {
                tab.addEventListener('click', function() {
                    // 繧｢繧ｯ繝・ぅ繝悶ち繝悶ｒ螟画峩
                    document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                    
                    // 繧ｿ繝悶さ繝ｳ繝・Φ繝・ｒ蛻・ｊ譖ｿ縺・                    const tabId = this.dataset.tab;
                    document.querySelectorAll('.tab-content > div').forEach(content => {
                        content.classList.remove('active');
                    });
                    document.getElementById(tabId + '-tab').classList.add('active');
                });
            });
            
            // 莉頑律縺ｮ譌･莉倥ｒ繧ｻ繝・ヨ
            document.getElementById('attendance-date').value = new Date().toISOString().split('T')[0];
            
            // 繝・ヰ繝・げ諠・ｱ繧貞叙蠕・            document.getElementById('load-debug-info').addEventListener('click', function() {
                const resultDiv = document.getElementById('debug-info-result');
                resultDiv.innerHTML = '<p>隱ｭ縺ｿ霎ｼ縺ｿ荳ｭ...</p>';
                
                fetch('/myapp/index.cgi/api/debug/info')
                    .then(response => response.json())
                    .then(data => {
                        resultDiv.innerHTML = '<pre>' + JSON.stringify(data, null, 2) + '</pre>';
                    })
                    .catch(error => {
                        resultDiv.innerHTML = '<div class="error">繧ｨ繝ｩ繝ｼ: ' + error.message + '</div>';
                    });
            });
            
            // 逕溷ｾ但PI繝・せ繝・            document.getElementById('test-students-api').addEventListener('click', function() {
                const resultDiv = document.getElementById('students-api-result');
                resultDiv.innerHTML = '<p>隱ｭ縺ｿ霎ｼ縺ｿ荳ｭ...</p>';
                
                const grade = document.getElementById('grade-filter').value;
                const day = document.getElementById('day-filter').value;
                
                let url = '/myapp/index.cgi/api/teacher/students?';
                if (grade !== 'all') url += 'grade=' + grade + '&';
                if (day !== 'all') url += 'day=' + day;
                
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('API繧ｨ繝ｩ繝ｼ: ' + response.status + ' ' + response.statusText);
                        }
                        return response.json();
                    })
                    .then(data => {
                        resultDiv.innerHTML = '<h3>邨先棡:</h3>';
                        if (data.success) {
                            resultDiv.innerHTML += '<p>逕溷ｾ呈焚: ' + data.students.length + '莉ｶ</p>';
                            if (data.students.length > 0) {
                                resultDiv.innerHTML += '<pre>' + JSON.stringify(data.students[0], null, 2) + '</pre>';
                                resultDiv.innerHTML += '<p>... 莉・' + (data.students.length - 1) + ' 莉ｶ</p>';
                            }
                        } else {
                            resultDiv.innerHTML += '<div class="error">繧ｨ繝ｩ繝ｼ: ' + data.message + '</div>';
                        }
                    })
                    .catch(error => {
                        resultDiv.innerHTML = '<div class="error">繧ｨ繝ｩ繝ｼ: ' + error.message + '</div>';
                    });
            });
            
            // SQL繧ｯ繧ｨ繝ｪ螳溯｡・            document.getElementById('run-query').addEventListener('click', function() {
                const resultDiv = document.getElementById('query-result');
                resultDiv.innerHTML = '<p>螳溯｡御ｸｭ...</p>';
                
                const query = document.getElementById('query-input').value;
                const params = document.getElementById('params-input').value;
                
                const url = '/myapp/index.cgi/api/debug/test-query?query=' + 
                    encodeURIComponent(query) + '&params=' + encodeURIComponent(params);
                
                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        if (data.error) {
                            resultDiv.innerHTML = '<div class="error">繧ｨ繝ｩ繝ｼ: ' + data.error + '</div>';
                        } else {
                            resultDiv.innerHTML = '<h3>邨先棡:</h3>';
                            resultDiv.innerHTML += '<p>繝ｬ繧ｳ繝ｼ繝画焚: ' + data.row_count + '莉ｶ</p>';
                            resultDiv.innerHTML += '<pre>' + JSON.stringify(data.results, null, 2) + '</pre>';
                        }
                    })
                    .catch(error => {
                        resultDiv.innerHTML = '<div class="error">繧ｨ繝ｩ繝ｼ: ' + error.message + '</div>';
                    });
            });
            
            // 蜃ｺ蟶ｭAPI繝・せ繝・            document.getElementById('test-attendance-api').addEventListener('click', function() {
                const resultDiv = document.getElementById('attendance-api-result');
                resultDiv.innerHTML = '<p>螳溯｡御ｸｭ...</p>';
                
                const studentId = document.getElementById('student-id').value;
                const date = document.getElementById('attendance-date').value;
                const status = document.getElementById('attendance-status').value;
                const awardPoints = document.getElementById('award-points').checked;
                
                // 蜃ｺ蟶ｭ繝・・繧ｿ繧剃ｽ懈・
                const attendanceData = [{
                    student_id: studentId,
                    status: status,
                    date: date,
                    award_points: awardPoints && status === 'present'
                }];
                
                fetch('/myapp/index.cgi/api/teacher/attendance', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ attendance_records: attendanceData })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        resultDiv.innerHTML = '<div style="color: green; padding: 10px;">' + data.message + '</div>';
                        resultDiv.innerHTML += '<pre>' + JSON.stringify(data, null, 2) + '</pre>';
                    } else {
                        resultDiv.innerHTML = '<div class="error">繧ｨ繝ｩ繝ｼ: ' + data.message + '</div>';
                    }
                })
                .catch(error => {
                    resultDiv.innerHTML = '<div class="error">繧ｨ繝ｩ繝ｼ: ' + error.message + '</div>';
                });
            });
        </script>
    </body>
    </html>
    """
    return html

if __name__ == '__main__':
    app.run(debug=True)
